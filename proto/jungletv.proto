syntax = "proto3";

option go_package = "github.com/tnyim/jungletv/proto";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

package jungletv;

service JungleTV {
    rpc SignIn (SignInRequest) returns (stream SignInProgress) {}
    rpc EnqueueMedia (EnqueueMediaRequest) returns (EnqueueMediaResponse) {}
    rpc MonitorTicket (MonitorTicketRequest) returns (stream EnqueueMediaTicket) {}
    rpc ConsumeMedia (ConsumeMediaRequest) returns (stream MediaConsumptionCheckpoint) {}
    rpc MonitorQueue (MonitorQueueRequest) returns (stream Queue) {}
    rpc RewardInfo (RewardInfoRequest) returns (RewardInfoResponse) {}
    rpc SubmitActivityChallenge (SubmitActivityChallengeRequest) returns (SubmitActivityChallengeResponse) {}
    rpc ConsumeChat (ConsumeChatRequest) returns (stream ChatUpdate) {}
    rpc SendChatMessage (SendChatMessageRequest) returns (SendChatMessageResponse) {}
    rpc SubmitProofOfWork (SubmitProofOfWorkRequest) returns (SubmitProofOfWorkResponse) {}
    rpc UserPermissionLevel (UserPermissionLevelRequest) returns (UserPermissionLevelResponse) {}

    // moderation endpoints
    rpc ForciblyEnqueueTicket(ForciblyEnqueueTicketRequest) returns (ForciblyEnqueueTicketResponse) {}
    rpc RemoveQueueEntry(RemoveQueueEntryRequest) returns (RemoveQueueEntryResponse) {}
    rpc RemoveChatMessage(RemoveChatMessageRequest) returns (RemoveChatMessageResponse) {}
    rpc SetChatSettings(SetChatSettingsRequest) returns (SetChatSettingsResponse) {}
    rpc SetVideoEnqueuingEnabled(SetVideoEnqueuingEnabledRequest) returns (SetVideoEnqueuingEnabledResponse) {}
    rpc BanUser(BanUserRequest) returns (BanUserResponse) {}
    rpc RemoveBan(RemoveBanRequest) returns (RemoveBanResponse) {}
    rpc UserChatMessages(UserChatMessagesRequest) returns (UserChatMessagesResponse) {}
}

message SignInRequest {
    string reward_address = 1;
}

message SignInProgress {
    oneof step {
        SignInVerification verification = 1;
        SignInResponse response = 2;
        SignInVerificationExpired expired = 3;
        SignInAccountUnopened account_unopened = 4;
    }
}

message SignInVerification {
    string verification_representative_address = 1;
    google.protobuf.Timestamp expiration = 2;
}

message SignInAccountUnopened {}

message SignInResponse {
    string auth_token = 1;
    google.protobuf.Timestamp token_expiration = 2;
}

message SignInVerificationExpired {}

message EnqueueYouTubeVideoData {
    string id = 1;
}

// EnqueueStubData allows us to prepare and confirm that polymorphism is working properly
message EnqueueStubData {}

message EnqueueMediaRequest {
    bool unskippable = 1;
    oneof media_info {
        EnqueueStubData stub_data = 2;
        EnqueueYouTubeVideoData youtube_video_data = 3;
    }
}

message EnqueueMediaResponse {
    oneof enqueue_response {
        EnqueueMediaTicket ticket = 1;
        EnqueueMediaFailure failure = 2;
    }
}

message EnqueueMediaFailure {
    string failure_reason = 1;
}

enum EnqueueMediaTicketStatus {
    ACTIVE = 0;
    PAID = 1;
    EXPIRED = 2;
}

message EnqueueMediaTicket {
    string id = 1;
    EnqueueMediaTicketStatus status = 2;
    string payment_address = 3;
    string enqueue_price = 4;
    string play_next_price = 5;
    string play_now_price = 6;
    google.protobuf.Timestamp expiration = 7;
    bool unskippable = 8;
    bool currently_playing_is_unskippable = 9;
    oneof media_info {
        QueueYouTubeVideoData youtube_video_data = 10;
    }
}

message MonitorTicketRequest {
    string ticket_id = 1;
}

message ConsumeMediaRequest {
    bool participate_in_pow = 1;
}

// NowPlayingStubData allows us to prepare and confirm that polymorphism is working properly
message NowPlayingStubData {}

message NowPlayingYouTubeVideoData {
    string id = 1;
}

message MediaConsumptionCheckpoint {
    bool media_present = 1;
    google.protobuf.Duration current_position = 2;
    User requested_by = 3;
    string request_cost = 4;
    uint32 currently_watching = 5;
    optional string reward = 6;
    optional ActivityChallenge activity_challenge = 7;
    optional ProofOfWorkTask pow_task = 8;
    oneof media_info {
        NowPlayingStubData stub_data = 9;
        NowPlayingYouTubeVideoData youtube_video_data = 10;
    }
}

message ActivityChallenge {
    string id = 1;
    string type = 2;
}

message ProofOfWorkTask {
    bytes target = 1;
    bytes previous = 2;
}

message MonitorQueueRequest {}

message Queue {
    repeated QueueEntry entries = 1;
    bool is_heartbeat = 2;
}

message QueueYouTubeVideoData {
    string id = 1;
    string title = 2;
    string thumbnail_url = 3;
    string channel_title = 4;
}

message QueueEntry {
    string id = 1;
    User requested_by = 2;
    string request_cost = 3;
    google.protobuf.Duration length = 4;
    bool unskippable = 5;
    oneof media_info {
        QueueYouTubeVideoData youtube_video_data = 6;
    }
}

enum UserRole {
    MODERATOR = 0;
}

message User {
    string address = 1;
    repeated UserRole roles = 2;
}

message RewardInfoRequest {}

message RewardInfoResponse {
    string reward_address = 1;
}

message RemoveQueueEntryRequest {
    string id = 1;
}

message RemoveQueueEntryResponse {}

enum ForcedTicketEnqueueType {
    ENQUEUE = 0;
    PLAY_NEXT = 1;
    PLAY_NOW = 2;
}

message ForciblyEnqueueTicketRequest {
    string id = 1;
    ForcedTicketEnqueueType enqueue_type = 2;
}

message ForciblyEnqueueTicketResponse {}

message SubmitActivityChallengeRequest {
    string challenge = 1;
    string captcha_response = 2;
    bool trusted = 3;
}

message SubmitActivityChallengeResponse {}

message ConsumeChatRequest {
    uint32 initial_history_size = 1;
}

message ChatUpdate {
    oneof event {
        ChatDisabledEvent disabled = 1;
        ChatEnabledEvent enabled = 2;
        ChatMessageCreatedEvent message_created = 3;
        ChatMessageDeletedEvent message_deleted = 4;
        ChatHeartbeatEvent heartbeat = 5;
    }
}

message ChatMessage {
    int64 id = 1 [jstype = JS_STRING];
    google.protobuf.Timestamp created_at = 2;
    oneof message {
        UserChatMessage user_message = 3;
        SystemChatMessage system_message = 4;
    }
    optional ChatMessage reference = 5;
}

message UserChatMessage {
    User author = 1;
    string content = 2;
}

message SystemChatMessage {
    string content = 1;
}

enum ChatDisabledReason {
    UNSPECIFIED = 0;
    MODERATOR_NOT_PRESENT = 1;
}

message ChatDisabledEvent {
    ChatDisabledReason reason = 1;
}

message ChatEnabledEvent {}

message ChatMessageCreatedEvent {
    ChatMessage message = 1;
}

message ChatMessageDeletedEvent {
    int64 id = 1 [jstype = JS_STRING];
}

message ChatHeartbeatEvent {
    uint32 sequence = 1;
}

message SendChatMessageRequest {
    string content = 1;
    bool trusted = 2;
    optional int64 reply_reference_id = 3 [jstype = JS_STRING];
}

message SendChatMessageResponse {
    int64 id = 1;
}

message RemoveChatMessageRequest {
    int64 id = 1 [jstype = JS_STRING];
}

message RemoveChatMessageResponse {}

message SetChatSettingsRequest {
    bool enabled = 1;
    bool slowmode = 2;
}

message SetChatSettingsResponse {}

message BanUserRequest {
    string address = 1;
    string remote_address = 2;
    bool chat_banned = 3;
    bool enqueuing_banned = 4;
    bool rewards_banned = 5;
    string reason = 6;
}

message BanUserResponse {
    repeated string ban_ids = 1;
}

message RemoveBanRequest {
    string ban_id = 1;
    string reason = 2;
}

message RemoveBanResponse {}

enum AllowedVideoEnqueuingType {
    DISABLED = 0;
    STAFF_ONLY = 1;
    ENABLED = 2;
}

message SetVideoEnqueuingEnabledRequest {
    AllowedVideoEnqueuingType allowed = 1;
}

message SetVideoEnqueuingEnabledResponse {}

message UserChatMessagesRequest {
    string address = 1;
    uint32 num_messages = 2;
}

message UserChatMessagesResponse {
    repeated ChatMessage messages = 1;
}

message SubmitProofOfWorkRequest {
    bytes previous = 1;
    bytes work = 2;
}

message SubmitProofOfWorkResponse {
}

message UserPermissionLevelRequest {}

enum PermissionLevel {
    UNAUTHENTICATED = 0;
    USER = 1;
    ADMIN = 2;
}

message UserPermissionLevelResponse {
    PermissionLevel permission_level = 1;
}