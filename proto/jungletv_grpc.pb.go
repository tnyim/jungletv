// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JungleTVClient is the client API for JungleTV service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JungleTVClient interface {
	SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (JungleTV_SignInClient, error)
	VerifySignInSignature(ctx context.Context, in *VerifySignInSignatureRequest, opts ...grpc.CallOption) (*SignInResponse, error)
	EnqueueMedia(ctx context.Context, in *EnqueueMediaRequest, opts ...grpc.CallOption) (*EnqueueMediaResponse, error)
	RemoveOwnQueueEntry(ctx context.Context, in *RemoveOwnQueueEntryRequest, opts ...grpc.CallOption) (*RemoveOwnQueueEntryResponse, error)
	MoveQueueEntry(ctx context.Context, in *MoveQueueEntryRequest, opts ...grpc.CallOption) (*MoveQueueEntryResponse, error)
	MonitorTicket(ctx context.Context, in *MonitorTicketRequest, opts ...grpc.CallOption) (JungleTV_MonitorTicketClient, error)
	ConsumeMedia(ctx context.Context, in *ConsumeMediaRequest, opts ...grpc.CallOption) (JungleTV_ConsumeMediaClient, error)
	MonitorQueue(ctx context.Context, in *MonitorQueueRequest, opts ...grpc.CallOption) (JungleTV_MonitorQueueClient, error)
	MonitorSkipAndTip(ctx context.Context, in *MonitorSkipAndTipRequest, opts ...grpc.CallOption) (JungleTV_MonitorSkipAndTipClient, error)
	RewardInfo(ctx context.Context, in *RewardInfoRequest, opts ...grpc.CallOption) (*RewardInfoResponse, error)
	SubmitActivityChallenge(ctx context.Context, in *SubmitActivityChallengeRequest, opts ...grpc.CallOption) (*SubmitActivityChallengeResponse, error)
	ProduceSegchaChallenge(ctx context.Context, in *ProduceSegchaChallengeRequest, opts ...grpc.CallOption) (*ProduceSegchaChallengeResponse, error)
	ConsumeChat(ctx context.Context, in *ConsumeChatRequest, opts ...grpc.CallOption) (JungleTV_ConsumeChatClient, error)
	SendChatMessage(ctx context.Context, in *SendChatMessageRequest, opts ...grpc.CallOption) (*SendChatMessageResponse, error)
	UserPermissionLevel(ctx context.Context, in *UserPermissionLevelRequest, opts ...grpc.CallOption) (*UserPermissionLevelResponse, error)
	GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*Document, error)
	SetChatNickname(ctx context.Context, in *SetChatNicknameRequest, opts ...grpc.CallOption) (*SetChatNicknameResponse, error)
	Withdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawResponse, error)
	Leaderboards(ctx context.Context, in *LeaderboardsRequest, opts ...grpc.CallOption) (*LeaderboardsResponse, error)
	RewardHistory(ctx context.Context, in *RewardHistoryRequest, opts ...grpc.CallOption) (*RewardHistoryResponse, error)
	WithdrawalHistory(ctx context.Context, in *WithdrawalHistoryRequest, opts ...grpc.CallOption) (*WithdrawalHistoryResponse, error)
	OngoingRaffleInfo(ctx context.Context, in *OngoingRaffleInfoRequest, opts ...grpc.CallOption) (*OngoingRaffleInfoResponse, error)
	RaffleDrawings(ctx context.Context, in *RaffleDrawingsRequest, opts ...grpc.CallOption) (*RaffleDrawingsResponse, error)
	Connections(ctx context.Context, in *ConnectionsRequest, opts ...grpc.CallOption) (*ConnectionsResponse, error)
	CreateConnection(ctx context.Context, in *CreateConnectionRequest, opts ...grpc.CallOption) (*CreateConnectionResponse, error)
	RemoveConnection(ctx context.Context, in *RemoveConnectionRequest, opts ...grpc.CallOption) (*RemoveConnectionResponse, error)
	UserProfile(ctx context.Context, in *UserProfileRequest, opts ...grpc.CallOption) (*UserProfileResponse, error)
	UserStats(ctx context.Context, in *UserStatsRequest, opts ...grpc.CallOption) (*UserStatsResponse, error)
	SetProfileBiography(ctx context.Context, in *SetProfileBiographyRequest, opts ...grpc.CallOption) (*SetProfileBiographyResponse, error)
	SetProfileFeaturedMedia(ctx context.Context, in *SetProfileFeaturedMediaRequest, opts ...grpc.CallOption) (*SetProfileFeaturedMediaResponse, error)
	PlayedMediaHistory(ctx context.Context, in *PlayedMediaHistoryRequest, opts ...grpc.CallOption) (*PlayedMediaHistoryResponse, error)
	BlockUser(ctx context.Context, in *BlockUserRequest, opts ...grpc.CallOption) (*BlockUserResponse, error)
	UnblockUser(ctx context.Context, in *UnblockUserRequest, opts ...grpc.CallOption) (*UnblockUserResponse, error)
	BlockedUsers(ctx context.Context, in *BlockedUsersRequest, opts ...grpc.CallOption) (*BlockedUsersResponse, error)
	PointsInfo(ctx context.Context, in *PointsInfoRequest, opts ...grpc.CallOption) (*PointsInfoResponse, error)
	PointsTransactions(ctx context.Context, in *PointsTransactionsRequest, opts ...grpc.CallOption) (*PointsTransactionsResponse, error)
	ChatGifSearch(ctx context.Context, in *ChatGifSearchRequest, opts ...grpc.CallOption) (*ChatGifSearchResponse, error)
	ConvertBananoToPoints(ctx context.Context, in *ConvertBananoToPointsRequest, opts ...grpc.CallOption) (JungleTV_ConvertBananoToPointsClient, error)
	StartOrExtendSubscription(ctx context.Context, in *StartOrExtendSubscriptionRequest, opts ...grpc.CallOption) (*StartOrExtendSubscriptionResponse, error)
	SoundCloudTrackDetails(ctx context.Context, in *SoundCloudTrackDetailsRequest, opts ...grpc.CallOption) (*SoundCloudTrackDetailsResponse, error)
	IncreaseOrReduceSkipThreshold(ctx context.Context, in *IncreaseOrReduceSkipThresholdRequest, opts ...grpc.CallOption) (*IncreaseOrReduceSkipThresholdResponse, error)
	CheckMediaEnqueuingPassword(ctx context.Context, in *CheckMediaEnqueuingPasswordRequest, opts ...grpc.CallOption) (*CheckMediaEnqueuingPasswordResponse, error)
	MonitorMediaEnqueuingPermission(ctx context.Context, in *MonitorMediaEnqueuingPermissionRequest, opts ...grpc.CallOption) (JungleTV_MonitorMediaEnqueuingPermissionClient, error)
	InvalidateAuthTokens(ctx context.Context, in *InvalidateAuthTokensRequest, opts ...grpc.CallOption) (*InvalidateAuthTokensResponse, error)
	AuthorizeApplication(ctx context.Context, in *AuthorizeApplicationRequest, opts ...grpc.CallOption) (JungleTV_AuthorizeApplicationClient, error)
	AuthorizationProcessData(ctx context.Context, in *AuthorizationProcessDataRequest, opts ...grpc.CallOption) (*AuthorizationProcessDataResponse, error)
	ConsentOrDissentToAuthorization(ctx context.Context, in *ConsentOrDissentToAuthorizationRequest, opts ...grpc.CallOption) (*ConsentOrDissentToAuthorizationResponse, error)
	// moderation endpoints
	ForciblyEnqueueTicket(ctx context.Context, in *ForciblyEnqueueTicketRequest, opts ...grpc.CallOption) (*ForciblyEnqueueTicketResponse, error)
	RemoveQueueEntry(ctx context.Context, in *RemoveQueueEntryRequest, opts ...grpc.CallOption) (*RemoveQueueEntryResponse, error)
	RemoveChatMessage(ctx context.Context, in *RemoveChatMessageRequest, opts ...grpc.CallOption) (*RemoveChatMessageResponse, error)
	SetChatSettings(ctx context.Context, in *SetChatSettingsRequest, opts ...grpc.CallOption) (*SetChatSettingsResponse, error)
	SetMediaEnqueuingEnabled(ctx context.Context, in *SetMediaEnqueuingEnabledRequest, opts ...grpc.CallOption) (*SetMediaEnqueuingEnabledResponse, error)
	UserBans(ctx context.Context, in *UserBansRequest, opts ...grpc.CallOption) (*UserBansResponse, error)
	BanUser(ctx context.Context, in *BanUserRequest, opts ...grpc.CallOption) (*BanUserResponse, error)
	RemoveBan(ctx context.Context, in *RemoveBanRequest, opts ...grpc.CallOption) (*RemoveBanResponse, error)
	UserVerifications(ctx context.Context, in *UserVerificationsRequest, opts ...grpc.CallOption) (*UserVerificationsResponse, error)
	VerifyUser(ctx context.Context, in *VerifyUserRequest, opts ...grpc.CallOption) (*VerifyUserResponse, error)
	RemoveUserVerification(ctx context.Context, in *RemoveUserVerificationRequest, opts ...grpc.CallOption) (*RemoveUserVerificationResponse, error)
	UserChatMessages(ctx context.Context, in *UserChatMessagesRequest, opts ...grpc.CallOption) (*UserChatMessagesResponse, error)
	DisallowedMedia(ctx context.Context, in *DisallowedMediaRequest, opts ...grpc.CallOption) (*DisallowedMediaResponse, error)
	AddDisallowedMedia(ctx context.Context, in *AddDisallowedMediaRequest, opts ...grpc.CallOption) (*AddDisallowedMediaResponse, error)
	RemoveDisallowedMedia(ctx context.Context, in *RemoveDisallowedMediaRequest, opts ...grpc.CallOption) (*RemoveDisallowedMediaResponse, error)
	DisallowedMediaCollections(ctx context.Context, in *DisallowedMediaCollectionsRequest, opts ...grpc.CallOption) (*DisallowedMediaCollectionsResponse, error)
	AddDisallowedMediaCollection(ctx context.Context, in *AddDisallowedMediaCollectionRequest, opts ...grpc.CallOption) (*AddDisallowedMediaCollectionResponse, error)
	RemoveDisallowedMediaCollection(ctx context.Context, in *RemoveDisallowedMediaCollectionRequest, opts ...grpc.CallOption) (*RemoveDisallowedMediaCollectionResponse, error)
	UpdateDocument(ctx context.Context, in *Document, opts ...grpc.CallOption) (*UpdateDocumentResponse, error)
	Documents(ctx context.Context, in *DocumentsRequest, opts ...grpc.CallOption) (*DocumentsResponse, error)
	SetUserChatNickname(ctx context.Context, in *SetUserChatNicknameRequest, opts ...grpc.CallOption) (*SetUserChatNicknameResponse, error)
	SetPricesMultiplier(ctx context.Context, in *SetPricesMultiplierRequest, opts ...grpc.CallOption) (*SetPricesMultiplierResponse, error)
	SetMinimumPricesMultiplier(ctx context.Context, in *SetMinimumPricesMultiplierRequest, opts ...grpc.CallOption) (*SetMinimumPricesMultiplierResponse, error)
	SetCrowdfundedSkippingEnabled(ctx context.Context, in *SetCrowdfundedSkippingEnabledRequest, opts ...grpc.CallOption) (*SetCrowdfundedSkippingEnabledResponse, error)
	SetSkipPriceMultiplier(ctx context.Context, in *SetSkipPriceMultiplierRequest, opts ...grpc.CallOption) (*SetSkipPriceMultiplierResponse, error)
	ConfirmRaffleWinner(ctx context.Context, in *ConfirmRaffleWinnerRequest, opts ...grpc.CallOption) (*ConfirmRaffleWinnerResponse, error)
	CompleteRaffle(ctx context.Context, in *CompleteRaffleRequest, opts ...grpc.CallOption) (*CompleteRaffleResponse, error)
	RedrawRaffle(ctx context.Context, in *RedrawRaffleRequest, opts ...grpc.CallOption) (*RedrawRaffleResponse, error)
	TriggerAnnouncementsNotification(ctx context.Context, in *TriggerAnnouncementsNotificationRequest, opts ...grpc.CallOption) (*TriggerAnnouncementsNotificationResponse, error)
	SpectatorInfo(ctx context.Context, in *SpectatorInfoRequest, opts ...grpc.CallOption) (*Spectator, error)
	ResetSpectatorStatus(ctx context.Context, in *ResetSpectatorStatusRequest, opts ...grpc.CallOption) (*ResetSpectatorStatusResponse, error)
	MonitorModerationStatus(ctx context.Context, in *MonitorModerationStatusRequest, opts ...grpc.CallOption) (JungleTV_MonitorModerationStatusClient, error)
	SetOwnQueueEntryRemovalAllowed(ctx context.Context, in *SetOwnQueueEntryRemovalAllowedRequest, opts ...grpc.CallOption) (*SetOwnQueueEntryRemovalAllowedResponse, error)
	SetQueueEntryReorderingAllowed(ctx context.Context, in *SetQueueEntryReorderingAllowedRequest, opts ...grpc.CallOption) (*SetQueueEntryReorderingAllowedResponse, error)
	SetNewQueueEntriesAlwaysUnskippable(ctx context.Context, in *SetNewQueueEntriesAlwaysUnskippableRequest, opts ...grpc.CallOption) (*SetNewQueueEntriesAlwaysUnskippableResponse, error)
	SetSkippingEnabled(ctx context.Context, in *SetSkippingEnabledRequest, opts ...grpc.CallOption) (*SetSkippingEnabledResponse, error)
	SetQueueInsertCursor(ctx context.Context, in *SetQueueInsertCursorRequest, opts ...grpc.CallOption) (*SetQueueInsertCursorResponse, error)
	ClearQueueInsertCursor(ctx context.Context, in *ClearQueueInsertCursorRequest, opts ...grpc.CallOption) (*ClearQueueInsertCursorResponse, error)
	ClearUserProfile(ctx context.Context, in *ClearUserProfileRequest, opts ...grpc.CallOption) (*ClearUserProfileResponse, error)
	MarkAsActivelyModerating(ctx context.Context, in *MarkAsActivelyModeratingRequest, opts ...grpc.CallOption) (*MarkAsActivelyModeratingResponse, error)
	StopActivelyModerating(ctx context.Context, in *StopActivelyModeratingRequest, opts ...grpc.CallOption) (*StopActivelyModeratingResponse, error)
	AdjustPointsBalance(ctx context.Context, in *AdjustPointsBalanceRequest, opts ...grpc.CallOption) (*AdjustPointsBalanceResponse, error)
	AddVipUser(ctx context.Context, in *AddVipUserRequest, opts ...grpc.CallOption) (*AddVipUserResponse, error)
	RemoveVipUser(ctx context.Context, in *RemoveVipUserRequest, opts ...grpc.CallOption) (*RemoveVipUserResponse, error)
	TriggerClientReload(ctx context.Context, in *TriggerClientReloadRequest, opts ...grpc.CallOption) (*TriggerClientReloadResponse, error)
	SetMulticurrencyPaymentsEnabled(ctx context.Context, in *SetMulticurrencyPaymentsEnabledRequest, opts ...grpc.CallOption) (*SetMulticurrencyPaymentsEnabledResponse, error)
	InvalidateUserAuthTokens(ctx context.Context, in *InvalidateUserAuthTokensRequest, opts ...grpc.CallOption) (*InvalidateUserAuthTokensResponse, error)
	// application editor endpoints
	Applications(ctx context.Context, in *ApplicationsRequest, opts ...grpc.CallOption) (*ApplicationsResponse, error)
	GetApplication(ctx context.Context, in *GetApplicationRequest, opts ...grpc.CallOption) (*Application, error)
	UpdateApplication(ctx context.Context, in *Application, opts ...grpc.CallOption) (*UpdateApplicationResponse, error)
	CreateApplicationWithWalletPrefix(ctx context.Context, in *CreateApplicationWithWalletPrefixRequest, opts ...grpc.CallOption) (*CreateApplicationWithWalletPrefixResponse, error)
	CloneApplication(ctx context.Context, in *CloneApplicationRequest, opts ...grpc.CallOption) (*CloneApplicationResponse, error)
	DeleteApplication(ctx context.Context, in *DeleteApplicationRequest, opts ...grpc.CallOption) (*DeleteApplicationResponse, error)
	ApplicationFiles(ctx context.Context, in *ApplicationFilesRequest, opts ...grpc.CallOption) (*ApplicationFilesResponse, error)
	GetApplicationFile(ctx context.Context, in *GetApplicationFileRequest, opts ...grpc.CallOption) (*ApplicationFile, error)
	UpdateApplicationFile(ctx context.Context, in *ApplicationFile, opts ...grpc.CallOption) (*UpdateApplicationFileResponse, error)
	CloneApplicationFile(ctx context.Context, in *CloneApplicationFileRequest, opts ...grpc.CallOption) (*CloneApplicationFileResponse, error)
	DeleteApplicationFile(ctx context.Context, in *DeleteApplicationFileRequest, opts ...grpc.CallOption) (*DeleteApplicationFileResponse, error)
	LaunchApplication(ctx context.Context, in *LaunchApplicationRequest, opts ...grpc.CallOption) (*LaunchApplicationResponse, error)
	StopApplication(ctx context.Context, in *StopApplicationRequest, opts ...grpc.CallOption) (*StopApplicationResponse, error)
	ApplicationLog(ctx context.Context, in *ApplicationLogRequest, opts ...grpc.CallOption) (*ApplicationLogResponse, error)
	ConsumeApplicationLog(ctx context.Context, in *ConsumeApplicationLogRequest, opts ...grpc.CallOption) (JungleTV_ConsumeApplicationLogClient, error)
	MonitorRunningApplications(ctx context.Context, in *MonitorRunningApplicationsRequest, opts ...grpc.CallOption) (JungleTV_MonitorRunningApplicationsClient, error)
	EvaluateExpressionOnApplication(ctx context.Context, in *EvaluateExpressionOnApplicationRequest, opts ...grpc.CallOption) (*EvaluateExpressionOnApplicationResponse, error)
	ExportApplication(ctx context.Context, in *ExportApplicationRequest, opts ...grpc.CallOption) (*ExportApplicationResponse, error)
	ImportApplication(ctx context.Context, in *ImportApplicationRequest, opts ...grpc.CallOption) (*ImportApplicationResponse, error)
	TypeScriptTypeDefinitions(ctx context.Context, in *TypeScriptTypeDefinitionsRequest, opts ...grpc.CallOption) (*TypeScriptTypeDefinitionsResponse, error)
	// application runtime endpoints
	ResolveApplicationPage(ctx context.Context, in *ResolveApplicationPageRequest, opts ...grpc.CallOption) (*ResolveApplicationPageResponse, error)
	ConsumeApplicationEvents(ctx context.Context, in *ConsumeApplicationEventsRequest, opts ...grpc.CallOption) (JungleTV_ConsumeApplicationEventsClient, error)
	ApplicationServerMethod(ctx context.Context, in *ApplicationServerMethodRequest, opts ...grpc.CallOption) (*ApplicationServerMethodResponse, error)
	TriggerApplicationEvent(ctx context.Context, in *TriggerApplicationEventRequest, opts ...grpc.CallOption) (*TriggerApplicationEventResponse, error)
}

type jungleTVClient struct {
	cc grpc.ClientConnInterface
}

func NewJungleTVClient(cc grpc.ClientConnInterface) JungleTVClient {
	return &jungleTVClient{cc}
}

func (c *jungleTVClient) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (JungleTV_SignInClient, error) {
	stream, err := c.cc.NewStream(ctx, &JungleTV_ServiceDesc.Streams[0], "/jungletv.JungleTV/SignIn", opts...)
	if err != nil {
		return nil, err
	}
	x := &jungleTVSignInClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JungleTV_SignInClient interface {
	Recv() (*SignInProgress, error)
	grpc.ClientStream
}

type jungleTVSignInClient struct {
	grpc.ClientStream
}

func (x *jungleTVSignInClient) Recv() (*SignInProgress, error) {
	m := new(SignInProgress)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jungleTVClient) VerifySignInSignature(ctx context.Context, in *VerifySignInSignatureRequest, opts ...grpc.CallOption) (*SignInResponse, error) {
	out := new(SignInResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/VerifySignInSignature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) EnqueueMedia(ctx context.Context, in *EnqueueMediaRequest, opts ...grpc.CallOption) (*EnqueueMediaResponse, error) {
	out := new(EnqueueMediaResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/EnqueueMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) RemoveOwnQueueEntry(ctx context.Context, in *RemoveOwnQueueEntryRequest, opts ...grpc.CallOption) (*RemoveOwnQueueEntryResponse, error) {
	out := new(RemoveOwnQueueEntryResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/RemoveOwnQueueEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) MoveQueueEntry(ctx context.Context, in *MoveQueueEntryRequest, opts ...grpc.CallOption) (*MoveQueueEntryResponse, error) {
	out := new(MoveQueueEntryResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/MoveQueueEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) MonitorTicket(ctx context.Context, in *MonitorTicketRequest, opts ...grpc.CallOption) (JungleTV_MonitorTicketClient, error) {
	stream, err := c.cc.NewStream(ctx, &JungleTV_ServiceDesc.Streams[1], "/jungletv.JungleTV/MonitorTicket", opts...)
	if err != nil {
		return nil, err
	}
	x := &jungleTVMonitorTicketClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JungleTV_MonitorTicketClient interface {
	Recv() (*EnqueueMediaTicket, error)
	grpc.ClientStream
}

type jungleTVMonitorTicketClient struct {
	grpc.ClientStream
}

func (x *jungleTVMonitorTicketClient) Recv() (*EnqueueMediaTicket, error) {
	m := new(EnqueueMediaTicket)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jungleTVClient) ConsumeMedia(ctx context.Context, in *ConsumeMediaRequest, opts ...grpc.CallOption) (JungleTV_ConsumeMediaClient, error) {
	stream, err := c.cc.NewStream(ctx, &JungleTV_ServiceDesc.Streams[2], "/jungletv.JungleTV/ConsumeMedia", opts...)
	if err != nil {
		return nil, err
	}
	x := &jungleTVConsumeMediaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JungleTV_ConsumeMediaClient interface {
	Recv() (*MediaConsumptionCheckpoint, error)
	grpc.ClientStream
}

type jungleTVConsumeMediaClient struct {
	grpc.ClientStream
}

func (x *jungleTVConsumeMediaClient) Recv() (*MediaConsumptionCheckpoint, error) {
	m := new(MediaConsumptionCheckpoint)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jungleTVClient) MonitorQueue(ctx context.Context, in *MonitorQueueRequest, opts ...grpc.CallOption) (JungleTV_MonitorQueueClient, error) {
	stream, err := c.cc.NewStream(ctx, &JungleTV_ServiceDesc.Streams[3], "/jungletv.JungleTV/MonitorQueue", opts...)
	if err != nil {
		return nil, err
	}
	x := &jungleTVMonitorQueueClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JungleTV_MonitorQueueClient interface {
	Recv() (*Queue, error)
	grpc.ClientStream
}

type jungleTVMonitorQueueClient struct {
	grpc.ClientStream
}

func (x *jungleTVMonitorQueueClient) Recv() (*Queue, error) {
	m := new(Queue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jungleTVClient) MonitorSkipAndTip(ctx context.Context, in *MonitorSkipAndTipRequest, opts ...grpc.CallOption) (JungleTV_MonitorSkipAndTipClient, error) {
	stream, err := c.cc.NewStream(ctx, &JungleTV_ServiceDesc.Streams[4], "/jungletv.JungleTV/MonitorSkipAndTip", opts...)
	if err != nil {
		return nil, err
	}
	x := &jungleTVMonitorSkipAndTipClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JungleTV_MonitorSkipAndTipClient interface {
	Recv() (*SkipAndTipStatus, error)
	grpc.ClientStream
}

type jungleTVMonitorSkipAndTipClient struct {
	grpc.ClientStream
}

func (x *jungleTVMonitorSkipAndTipClient) Recv() (*SkipAndTipStatus, error) {
	m := new(SkipAndTipStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jungleTVClient) RewardInfo(ctx context.Context, in *RewardInfoRequest, opts ...grpc.CallOption) (*RewardInfoResponse, error) {
	out := new(RewardInfoResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/RewardInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) SubmitActivityChallenge(ctx context.Context, in *SubmitActivityChallengeRequest, opts ...grpc.CallOption) (*SubmitActivityChallengeResponse, error) {
	out := new(SubmitActivityChallengeResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/SubmitActivityChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) ProduceSegchaChallenge(ctx context.Context, in *ProduceSegchaChallengeRequest, opts ...grpc.CallOption) (*ProduceSegchaChallengeResponse, error) {
	out := new(ProduceSegchaChallengeResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/ProduceSegchaChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) ConsumeChat(ctx context.Context, in *ConsumeChatRequest, opts ...grpc.CallOption) (JungleTV_ConsumeChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &JungleTV_ServiceDesc.Streams[5], "/jungletv.JungleTV/ConsumeChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &jungleTVConsumeChatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JungleTV_ConsumeChatClient interface {
	Recv() (*ChatUpdate, error)
	grpc.ClientStream
}

type jungleTVConsumeChatClient struct {
	grpc.ClientStream
}

func (x *jungleTVConsumeChatClient) Recv() (*ChatUpdate, error) {
	m := new(ChatUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jungleTVClient) SendChatMessage(ctx context.Context, in *SendChatMessageRequest, opts ...grpc.CallOption) (*SendChatMessageResponse, error) {
	out := new(SendChatMessageResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/SendChatMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) UserPermissionLevel(ctx context.Context, in *UserPermissionLevelRequest, opts ...grpc.CallOption) (*UserPermissionLevelResponse, error) {
	out := new(UserPermissionLevelResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/UserPermissionLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*Document, error) {
	out := new(Document)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/GetDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) SetChatNickname(ctx context.Context, in *SetChatNicknameRequest, opts ...grpc.CallOption) (*SetChatNicknameResponse, error) {
	out := new(SetChatNicknameResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/SetChatNickname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) Withdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawResponse, error) {
	out := new(WithdrawResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/Withdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) Leaderboards(ctx context.Context, in *LeaderboardsRequest, opts ...grpc.CallOption) (*LeaderboardsResponse, error) {
	out := new(LeaderboardsResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/Leaderboards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) RewardHistory(ctx context.Context, in *RewardHistoryRequest, opts ...grpc.CallOption) (*RewardHistoryResponse, error) {
	out := new(RewardHistoryResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/RewardHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) WithdrawalHistory(ctx context.Context, in *WithdrawalHistoryRequest, opts ...grpc.CallOption) (*WithdrawalHistoryResponse, error) {
	out := new(WithdrawalHistoryResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/WithdrawalHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) OngoingRaffleInfo(ctx context.Context, in *OngoingRaffleInfoRequest, opts ...grpc.CallOption) (*OngoingRaffleInfoResponse, error) {
	out := new(OngoingRaffleInfoResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/OngoingRaffleInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) RaffleDrawings(ctx context.Context, in *RaffleDrawingsRequest, opts ...grpc.CallOption) (*RaffleDrawingsResponse, error) {
	out := new(RaffleDrawingsResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/RaffleDrawings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) Connections(ctx context.Context, in *ConnectionsRequest, opts ...grpc.CallOption) (*ConnectionsResponse, error) {
	out := new(ConnectionsResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/Connections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) CreateConnection(ctx context.Context, in *CreateConnectionRequest, opts ...grpc.CallOption) (*CreateConnectionResponse, error) {
	out := new(CreateConnectionResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/CreateConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) RemoveConnection(ctx context.Context, in *RemoveConnectionRequest, opts ...grpc.CallOption) (*RemoveConnectionResponse, error) {
	out := new(RemoveConnectionResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/RemoveConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) UserProfile(ctx context.Context, in *UserProfileRequest, opts ...grpc.CallOption) (*UserProfileResponse, error) {
	out := new(UserProfileResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/UserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) UserStats(ctx context.Context, in *UserStatsRequest, opts ...grpc.CallOption) (*UserStatsResponse, error) {
	out := new(UserStatsResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/UserStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) SetProfileBiography(ctx context.Context, in *SetProfileBiographyRequest, opts ...grpc.CallOption) (*SetProfileBiographyResponse, error) {
	out := new(SetProfileBiographyResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/SetProfileBiography", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) SetProfileFeaturedMedia(ctx context.Context, in *SetProfileFeaturedMediaRequest, opts ...grpc.CallOption) (*SetProfileFeaturedMediaResponse, error) {
	out := new(SetProfileFeaturedMediaResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/SetProfileFeaturedMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) PlayedMediaHistory(ctx context.Context, in *PlayedMediaHistoryRequest, opts ...grpc.CallOption) (*PlayedMediaHistoryResponse, error) {
	out := new(PlayedMediaHistoryResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/PlayedMediaHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) BlockUser(ctx context.Context, in *BlockUserRequest, opts ...grpc.CallOption) (*BlockUserResponse, error) {
	out := new(BlockUserResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/BlockUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) UnblockUser(ctx context.Context, in *UnblockUserRequest, opts ...grpc.CallOption) (*UnblockUserResponse, error) {
	out := new(UnblockUserResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/UnblockUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) BlockedUsers(ctx context.Context, in *BlockedUsersRequest, opts ...grpc.CallOption) (*BlockedUsersResponse, error) {
	out := new(BlockedUsersResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/BlockedUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) PointsInfo(ctx context.Context, in *PointsInfoRequest, opts ...grpc.CallOption) (*PointsInfoResponse, error) {
	out := new(PointsInfoResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/PointsInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) PointsTransactions(ctx context.Context, in *PointsTransactionsRequest, opts ...grpc.CallOption) (*PointsTransactionsResponse, error) {
	out := new(PointsTransactionsResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/PointsTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) ChatGifSearch(ctx context.Context, in *ChatGifSearchRequest, opts ...grpc.CallOption) (*ChatGifSearchResponse, error) {
	out := new(ChatGifSearchResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/ChatGifSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) ConvertBananoToPoints(ctx context.Context, in *ConvertBananoToPointsRequest, opts ...grpc.CallOption) (JungleTV_ConvertBananoToPointsClient, error) {
	stream, err := c.cc.NewStream(ctx, &JungleTV_ServiceDesc.Streams[6], "/jungletv.JungleTV/ConvertBananoToPoints", opts...)
	if err != nil {
		return nil, err
	}
	x := &jungleTVConvertBananoToPointsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JungleTV_ConvertBananoToPointsClient interface {
	Recv() (*ConvertBananoToPointsStatus, error)
	grpc.ClientStream
}

type jungleTVConvertBananoToPointsClient struct {
	grpc.ClientStream
}

func (x *jungleTVConvertBananoToPointsClient) Recv() (*ConvertBananoToPointsStatus, error) {
	m := new(ConvertBananoToPointsStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jungleTVClient) StartOrExtendSubscription(ctx context.Context, in *StartOrExtendSubscriptionRequest, opts ...grpc.CallOption) (*StartOrExtendSubscriptionResponse, error) {
	out := new(StartOrExtendSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/StartOrExtendSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) SoundCloudTrackDetails(ctx context.Context, in *SoundCloudTrackDetailsRequest, opts ...grpc.CallOption) (*SoundCloudTrackDetailsResponse, error) {
	out := new(SoundCloudTrackDetailsResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/SoundCloudTrackDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) IncreaseOrReduceSkipThreshold(ctx context.Context, in *IncreaseOrReduceSkipThresholdRequest, opts ...grpc.CallOption) (*IncreaseOrReduceSkipThresholdResponse, error) {
	out := new(IncreaseOrReduceSkipThresholdResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/IncreaseOrReduceSkipThreshold", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) CheckMediaEnqueuingPassword(ctx context.Context, in *CheckMediaEnqueuingPasswordRequest, opts ...grpc.CallOption) (*CheckMediaEnqueuingPasswordResponse, error) {
	out := new(CheckMediaEnqueuingPasswordResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/CheckMediaEnqueuingPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) MonitorMediaEnqueuingPermission(ctx context.Context, in *MonitorMediaEnqueuingPermissionRequest, opts ...grpc.CallOption) (JungleTV_MonitorMediaEnqueuingPermissionClient, error) {
	stream, err := c.cc.NewStream(ctx, &JungleTV_ServiceDesc.Streams[7], "/jungletv.JungleTV/MonitorMediaEnqueuingPermission", opts...)
	if err != nil {
		return nil, err
	}
	x := &jungleTVMonitorMediaEnqueuingPermissionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JungleTV_MonitorMediaEnqueuingPermissionClient interface {
	Recv() (*MediaEnqueuingPermissionStatus, error)
	grpc.ClientStream
}

type jungleTVMonitorMediaEnqueuingPermissionClient struct {
	grpc.ClientStream
}

func (x *jungleTVMonitorMediaEnqueuingPermissionClient) Recv() (*MediaEnqueuingPermissionStatus, error) {
	m := new(MediaEnqueuingPermissionStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jungleTVClient) InvalidateAuthTokens(ctx context.Context, in *InvalidateAuthTokensRequest, opts ...grpc.CallOption) (*InvalidateAuthTokensResponse, error) {
	out := new(InvalidateAuthTokensResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/InvalidateAuthTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) AuthorizeApplication(ctx context.Context, in *AuthorizeApplicationRequest, opts ...grpc.CallOption) (JungleTV_AuthorizeApplicationClient, error) {
	stream, err := c.cc.NewStream(ctx, &JungleTV_ServiceDesc.Streams[8], "/jungletv.JungleTV/AuthorizeApplication", opts...)
	if err != nil {
		return nil, err
	}
	x := &jungleTVAuthorizeApplicationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JungleTV_AuthorizeApplicationClient interface {
	Recv() (*AuthorizeApplicationEvent, error)
	grpc.ClientStream
}

type jungleTVAuthorizeApplicationClient struct {
	grpc.ClientStream
}

func (x *jungleTVAuthorizeApplicationClient) Recv() (*AuthorizeApplicationEvent, error) {
	m := new(AuthorizeApplicationEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jungleTVClient) AuthorizationProcessData(ctx context.Context, in *AuthorizationProcessDataRequest, opts ...grpc.CallOption) (*AuthorizationProcessDataResponse, error) {
	out := new(AuthorizationProcessDataResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/AuthorizationProcessData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) ConsentOrDissentToAuthorization(ctx context.Context, in *ConsentOrDissentToAuthorizationRequest, opts ...grpc.CallOption) (*ConsentOrDissentToAuthorizationResponse, error) {
	out := new(ConsentOrDissentToAuthorizationResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/ConsentOrDissentToAuthorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) ForciblyEnqueueTicket(ctx context.Context, in *ForciblyEnqueueTicketRequest, opts ...grpc.CallOption) (*ForciblyEnqueueTicketResponse, error) {
	out := new(ForciblyEnqueueTicketResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/ForciblyEnqueueTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) RemoveQueueEntry(ctx context.Context, in *RemoveQueueEntryRequest, opts ...grpc.CallOption) (*RemoveQueueEntryResponse, error) {
	out := new(RemoveQueueEntryResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/RemoveQueueEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) RemoveChatMessage(ctx context.Context, in *RemoveChatMessageRequest, opts ...grpc.CallOption) (*RemoveChatMessageResponse, error) {
	out := new(RemoveChatMessageResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/RemoveChatMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) SetChatSettings(ctx context.Context, in *SetChatSettingsRequest, opts ...grpc.CallOption) (*SetChatSettingsResponse, error) {
	out := new(SetChatSettingsResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/SetChatSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) SetMediaEnqueuingEnabled(ctx context.Context, in *SetMediaEnqueuingEnabledRequest, opts ...grpc.CallOption) (*SetMediaEnqueuingEnabledResponse, error) {
	out := new(SetMediaEnqueuingEnabledResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/SetMediaEnqueuingEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) UserBans(ctx context.Context, in *UserBansRequest, opts ...grpc.CallOption) (*UserBansResponse, error) {
	out := new(UserBansResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/UserBans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) BanUser(ctx context.Context, in *BanUserRequest, opts ...grpc.CallOption) (*BanUserResponse, error) {
	out := new(BanUserResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/BanUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) RemoveBan(ctx context.Context, in *RemoveBanRequest, opts ...grpc.CallOption) (*RemoveBanResponse, error) {
	out := new(RemoveBanResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/RemoveBan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) UserVerifications(ctx context.Context, in *UserVerificationsRequest, opts ...grpc.CallOption) (*UserVerificationsResponse, error) {
	out := new(UserVerificationsResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/UserVerifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) VerifyUser(ctx context.Context, in *VerifyUserRequest, opts ...grpc.CallOption) (*VerifyUserResponse, error) {
	out := new(VerifyUserResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/VerifyUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) RemoveUserVerification(ctx context.Context, in *RemoveUserVerificationRequest, opts ...grpc.CallOption) (*RemoveUserVerificationResponse, error) {
	out := new(RemoveUserVerificationResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/RemoveUserVerification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) UserChatMessages(ctx context.Context, in *UserChatMessagesRequest, opts ...grpc.CallOption) (*UserChatMessagesResponse, error) {
	out := new(UserChatMessagesResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/UserChatMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) DisallowedMedia(ctx context.Context, in *DisallowedMediaRequest, opts ...grpc.CallOption) (*DisallowedMediaResponse, error) {
	out := new(DisallowedMediaResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/DisallowedMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) AddDisallowedMedia(ctx context.Context, in *AddDisallowedMediaRequest, opts ...grpc.CallOption) (*AddDisallowedMediaResponse, error) {
	out := new(AddDisallowedMediaResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/AddDisallowedMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) RemoveDisallowedMedia(ctx context.Context, in *RemoveDisallowedMediaRequest, opts ...grpc.CallOption) (*RemoveDisallowedMediaResponse, error) {
	out := new(RemoveDisallowedMediaResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/RemoveDisallowedMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) DisallowedMediaCollections(ctx context.Context, in *DisallowedMediaCollectionsRequest, opts ...grpc.CallOption) (*DisallowedMediaCollectionsResponse, error) {
	out := new(DisallowedMediaCollectionsResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/DisallowedMediaCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) AddDisallowedMediaCollection(ctx context.Context, in *AddDisallowedMediaCollectionRequest, opts ...grpc.CallOption) (*AddDisallowedMediaCollectionResponse, error) {
	out := new(AddDisallowedMediaCollectionResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/AddDisallowedMediaCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) RemoveDisallowedMediaCollection(ctx context.Context, in *RemoveDisallowedMediaCollectionRequest, opts ...grpc.CallOption) (*RemoveDisallowedMediaCollectionResponse, error) {
	out := new(RemoveDisallowedMediaCollectionResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/RemoveDisallowedMediaCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) UpdateDocument(ctx context.Context, in *Document, opts ...grpc.CallOption) (*UpdateDocumentResponse, error) {
	out := new(UpdateDocumentResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/UpdateDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) Documents(ctx context.Context, in *DocumentsRequest, opts ...grpc.CallOption) (*DocumentsResponse, error) {
	out := new(DocumentsResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/Documents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) SetUserChatNickname(ctx context.Context, in *SetUserChatNicknameRequest, opts ...grpc.CallOption) (*SetUserChatNicknameResponse, error) {
	out := new(SetUserChatNicknameResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/SetUserChatNickname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) SetPricesMultiplier(ctx context.Context, in *SetPricesMultiplierRequest, opts ...grpc.CallOption) (*SetPricesMultiplierResponse, error) {
	out := new(SetPricesMultiplierResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/SetPricesMultiplier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) SetMinimumPricesMultiplier(ctx context.Context, in *SetMinimumPricesMultiplierRequest, opts ...grpc.CallOption) (*SetMinimumPricesMultiplierResponse, error) {
	out := new(SetMinimumPricesMultiplierResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/SetMinimumPricesMultiplier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) SetCrowdfundedSkippingEnabled(ctx context.Context, in *SetCrowdfundedSkippingEnabledRequest, opts ...grpc.CallOption) (*SetCrowdfundedSkippingEnabledResponse, error) {
	out := new(SetCrowdfundedSkippingEnabledResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/SetCrowdfundedSkippingEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) SetSkipPriceMultiplier(ctx context.Context, in *SetSkipPriceMultiplierRequest, opts ...grpc.CallOption) (*SetSkipPriceMultiplierResponse, error) {
	out := new(SetSkipPriceMultiplierResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/SetSkipPriceMultiplier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) ConfirmRaffleWinner(ctx context.Context, in *ConfirmRaffleWinnerRequest, opts ...grpc.CallOption) (*ConfirmRaffleWinnerResponse, error) {
	out := new(ConfirmRaffleWinnerResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/ConfirmRaffleWinner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) CompleteRaffle(ctx context.Context, in *CompleteRaffleRequest, opts ...grpc.CallOption) (*CompleteRaffleResponse, error) {
	out := new(CompleteRaffleResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/CompleteRaffle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) RedrawRaffle(ctx context.Context, in *RedrawRaffleRequest, opts ...grpc.CallOption) (*RedrawRaffleResponse, error) {
	out := new(RedrawRaffleResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/RedrawRaffle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) TriggerAnnouncementsNotification(ctx context.Context, in *TriggerAnnouncementsNotificationRequest, opts ...grpc.CallOption) (*TriggerAnnouncementsNotificationResponse, error) {
	out := new(TriggerAnnouncementsNotificationResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/TriggerAnnouncementsNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) SpectatorInfo(ctx context.Context, in *SpectatorInfoRequest, opts ...grpc.CallOption) (*Spectator, error) {
	out := new(Spectator)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/SpectatorInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) ResetSpectatorStatus(ctx context.Context, in *ResetSpectatorStatusRequest, opts ...grpc.CallOption) (*ResetSpectatorStatusResponse, error) {
	out := new(ResetSpectatorStatusResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/ResetSpectatorStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) MonitorModerationStatus(ctx context.Context, in *MonitorModerationStatusRequest, opts ...grpc.CallOption) (JungleTV_MonitorModerationStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &JungleTV_ServiceDesc.Streams[9], "/jungletv.JungleTV/MonitorModerationStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &jungleTVMonitorModerationStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JungleTV_MonitorModerationStatusClient interface {
	Recv() (*ModerationStatusOverview, error)
	grpc.ClientStream
}

type jungleTVMonitorModerationStatusClient struct {
	grpc.ClientStream
}

func (x *jungleTVMonitorModerationStatusClient) Recv() (*ModerationStatusOverview, error) {
	m := new(ModerationStatusOverview)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jungleTVClient) SetOwnQueueEntryRemovalAllowed(ctx context.Context, in *SetOwnQueueEntryRemovalAllowedRequest, opts ...grpc.CallOption) (*SetOwnQueueEntryRemovalAllowedResponse, error) {
	out := new(SetOwnQueueEntryRemovalAllowedResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/SetOwnQueueEntryRemovalAllowed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) SetQueueEntryReorderingAllowed(ctx context.Context, in *SetQueueEntryReorderingAllowedRequest, opts ...grpc.CallOption) (*SetQueueEntryReorderingAllowedResponse, error) {
	out := new(SetQueueEntryReorderingAllowedResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/SetQueueEntryReorderingAllowed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) SetNewQueueEntriesAlwaysUnskippable(ctx context.Context, in *SetNewQueueEntriesAlwaysUnskippableRequest, opts ...grpc.CallOption) (*SetNewQueueEntriesAlwaysUnskippableResponse, error) {
	out := new(SetNewQueueEntriesAlwaysUnskippableResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/SetNewQueueEntriesAlwaysUnskippable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) SetSkippingEnabled(ctx context.Context, in *SetSkippingEnabledRequest, opts ...grpc.CallOption) (*SetSkippingEnabledResponse, error) {
	out := new(SetSkippingEnabledResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/SetSkippingEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) SetQueueInsertCursor(ctx context.Context, in *SetQueueInsertCursorRequest, opts ...grpc.CallOption) (*SetQueueInsertCursorResponse, error) {
	out := new(SetQueueInsertCursorResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/SetQueueInsertCursor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) ClearQueueInsertCursor(ctx context.Context, in *ClearQueueInsertCursorRequest, opts ...grpc.CallOption) (*ClearQueueInsertCursorResponse, error) {
	out := new(ClearQueueInsertCursorResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/ClearQueueInsertCursor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) ClearUserProfile(ctx context.Context, in *ClearUserProfileRequest, opts ...grpc.CallOption) (*ClearUserProfileResponse, error) {
	out := new(ClearUserProfileResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/ClearUserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) MarkAsActivelyModerating(ctx context.Context, in *MarkAsActivelyModeratingRequest, opts ...grpc.CallOption) (*MarkAsActivelyModeratingResponse, error) {
	out := new(MarkAsActivelyModeratingResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/MarkAsActivelyModerating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) StopActivelyModerating(ctx context.Context, in *StopActivelyModeratingRequest, opts ...grpc.CallOption) (*StopActivelyModeratingResponse, error) {
	out := new(StopActivelyModeratingResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/StopActivelyModerating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) AdjustPointsBalance(ctx context.Context, in *AdjustPointsBalanceRequest, opts ...grpc.CallOption) (*AdjustPointsBalanceResponse, error) {
	out := new(AdjustPointsBalanceResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/AdjustPointsBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) AddVipUser(ctx context.Context, in *AddVipUserRequest, opts ...grpc.CallOption) (*AddVipUserResponse, error) {
	out := new(AddVipUserResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/AddVipUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) RemoveVipUser(ctx context.Context, in *RemoveVipUserRequest, opts ...grpc.CallOption) (*RemoveVipUserResponse, error) {
	out := new(RemoveVipUserResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/RemoveVipUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) TriggerClientReload(ctx context.Context, in *TriggerClientReloadRequest, opts ...grpc.CallOption) (*TriggerClientReloadResponse, error) {
	out := new(TriggerClientReloadResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/TriggerClientReload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) SetMulticurrencyPaymentsEnabled(ctx context.Context, in *SetMulticurrencyPaymentsEnabledRequest, opts ...grpc.CallOption) (*SetMulticurrencyPaymentsEnabledResponse, error) {
	out := new(SetMulticurrencyPaymentsEnabledResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/SetMulticurrencyPaymentsEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) InvalidateUserAuthTokens(ctx context.Context, in *InvalidateUserAuthTokensRequest, opts ...grpc.CallOption) (*InvalidateUserAuthTokensResponse, error) {
	out := new(InvalidateUserAuthTokensResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/InvalidateUserAuthTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) Applications(ctx context.Context, in *ApplicationsRequest, opts ...grpc.CallOption) (*ApplicationsResponse, error) {
	out := new(ApplicationsResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/Applications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) GetApplication(ctx context.Context, in *GetApplicationRequest, opts ...grpc.CallOption) (*Application, error) {
	out := new(Application)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/GetApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) UpdateApplication(ctx context.Context, in *Application, opts ...grpc.CallOption) (*UpdateApplicationResponse, error) {
	out := new(UpdateApplicationResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/UpdateApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) CreateApplicationWithWalletPrefix(ctx context.Context, in *CreateApplicationWithWalletPrefixRequest, opts ...grpc.CallOption) (*CreateApplicationWithWalletPrefixResponse, error) {
	out := new(CreateApplicationWithWalletPrefixResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/CreateApplicationWithWalletPrefix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) CloneApplication(ctx context.Context, in *CloneApplicationRequest, opts ...grpc.CallOption) (*CloneApplicationResponse, error) {
	out := new(CloneApplicationResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/CloneApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) DeleteApplication(ctx context.Context, in *DeleteApplicationRequest, opts ...grpc.CallOption) (*DeleteApplicationResponse, error) {
	out := new(DeleteApplicationResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/DeleteApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) ApplicationFiles(ctx context.Context, in *ApplicationFilesRequest, opts ...grpc.CallOption) (*ApplicationFilesResponse, error) {
	out := new(ApplicationFilesResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/ApplicationFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) GetApplicationFile(ctx context.Context, in *GetApplicationFileRequest, opts ...grpc.CallOption) (*ApplicationFile, error) {
	out := new(ApplicationFile)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/GetApplicationFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) UpdateApplicationFile(ctx context.Context, in *ApplicationFile, opts ...grpc.CallOption) (*UpdateApplicationFileResponse, error) {
	out := new(UpdateApplicationFileResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/UpdateApplicationFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) CloneApplicationFile(ctx context.Context, in *CloneApplicationFileRequest, opts ...grpc.CallOption) (*CloneApplicationFileResponse, error) {
	out := new(CloneApplicationFileResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/CloneApplicationFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) DeleteApplicationFile(ctx context.Context, in *DeleteApplicationFileRequest, opts ...grpc.CallOption) (*DeleteApplicationFileResponse, error) {
	out := new(DeleteApplicationFileResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/DeleteApplicationFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) LaunchApplication(ctx context.Context, in *LaunchApplicationRequest, opts ...grpc.CallOption) (*LaunchApplicationResponse, error) {
	out := new(LaunchApplicationResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/LaunchApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) StopApplication(ctx context.Context, in *StopApplicationRequest, opts ...grpc.CallOption) (*StopApplicationResponse, error) {
	out := new(StopApplicationResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/StopApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) ApplicationLog(ctx context.Context, in *ApplicationLogRequest, opts ...grpc.CallOption) (*ApplicationLogResponse, error) {
	out := new(ApplicationLogResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/ApplicationLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) ConsumeApplicationLog(ctx context.Context, in *ConsumeApplicationLogRequest, opts ...grpc.CallOption) (JungleTV_ConsumeApplicationLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &JungleTV_ServiceDesc.Streams[10], "/jungletv.JungleTV/ConsumeApplicationLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &jungleTVConsumeApplicationLogClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JungleTV_ConsumeApplicationLogClient interface {
	Recv() (*ApplicationLogEntryContainer, error)
	grpc.ClientStream
}

type jungleTVConsumeApplicationLogClient struct {
	grpc.ClientStream
}

func (x *jungleTVConsumeApplicationLogClient) Recv() (*ApplicationLogEntryContainer, error) {
	m := new(ApplicationLogEntryContainer)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jungleTVClient) MonitorRunningApplications(ctx context.Context, in *MonitorRunningApplicationsRequest, opts ...grpc.CallOption) (JungleTV_MonitorRunningApplicationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &JungleTV_ServiceDesc.Streams[11], "/jungletv.JungleTV/MonitorRunningApplications", opts...)
	if err != nil {
		return nil, err
	}
	x := &jungleTVMonitorRunningApplicationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JungleTV_MonitorRunningApplicationsClient interface {
	Recv() (*RunningApplications, error)
	grpc.ClientStream
}

type jungleTVMonitorRunningApplicationsClient struct {
	grpc.ClientStream
}

func (x *jungleTVMonitorRunningApplicationsClient) Recv() (*RunningApplications, error) {
	m := new(RunningApplications)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jungleTVClient) EvaluateExpressionOnApplication(ctx context.Context, in *EvaluateExpressionOnApplicationRequest, opts ...grpc.CallOption) (*EvaluateExpressionOnApplicationResponse, error) {
	out := new(EvaluateExpressionOnApplicationResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/EvaluateExpressionOnApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) ExportApplication(ctx context.Context, in *ExportApplicationRequest, opts ...grpc.CallOption) (*ExportApplicationResponse, error) {
	out := new(ExportApplicationResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/ExportApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) ImportApplication(ctx context.Context, in *ImportApplicationRequest, opts ...grpc.CallOption) (*ImportApplicationResponse, error) {
	out := new(ImportApplicationResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/ImportApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) TypeScriptTypeDefinitions(ctx context.Context, in *TypeScriptTypeDefinitionsRequest, opts ...grpc.CallOption) (*TypeScriptTypeDefinitionsResponse, error) {
	out := new(TypeScriptTypeDefinitionsResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/TypeScriptTypeDefinitions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) ResolveApplicationPage(ctx context.Context, in *ResolveApplicationPageRequest, opts ...grpc.CallOption) (*ResolveApplicationPageResponse, error) {
	out := new(ResolveApplicationPageResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/ResolveApplicationPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) ConsumeApplicationEvents(ctx context.Context, in *ConsumeApplicationEventsRequest, opts ...grpc.CallOption) (JungleTV_ConsumeApplicationEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &JungleTV_ServiceDesc.Streams[12], "/jungletv.JungleTV/ConsumeApplicationEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &jungleTVConsumeApplicationEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JungleTV_ConsumeApplicationEventsClient interface {
	Recv() (*ApplicationEventUpdate, error)
	grpc.ClientStream
}

type jungleTVConsumeApplicationEventsClient struct {
	grpc.ClientStream
}

func (x *jungleTVConsumeApplicationEventsClient) Recv() (*ApplicationEventUpdate, error) {
	m := new(ApplicationEventUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jungleTVClient) ApplicationServerMethod(ctx context.Context, in *ApplicationServerMethodRequest, opts ...grpc.CallOption) (*ApplicationServerMethodResponse, error) {
	out := new(ApplicationServerMethodResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/ApplicationServerMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jungleTVClient) TriggerApplicationEvent(ctx context.Context, in *TriggerApplicationEventRequest, opts ...grpc.CallOption) (*TriggerApplicationEventResponse, error) {
	out := new(TriggerApplicationEventResponse)
	err := c.cc.Invoke(ctx, "/jungletv.JungleTV/TriggerApplicationEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JungleTVServer is the server API for JungleTV service.
// All implementations must embed UnimplementedJungleTVServer
// for forward compatibility
type JungleTVServer interface {
	SignIn(*SignInRequest, JungleTV_SignInServer) error
	VerifySignInSignature(context.Context, *VerifySignInSignatureRequest) (*SignInResponse, error)
	EnqueueMedia(context.Context, *EnqueueMediaRequest) (*EnqueueMediaResponse, error)
	RemoveOwnQueueEntry(context.Context, *RemoveOwnQueueEntryRequest) (*RemoveOwnQueueEntryResponse, error)
	MoveQueueEntry(context.Context, *MoveQueueEntryRequest) (*MoveQueueEntryResponse, error)
	MonitorTicket(*MonitorTicketRequest, JungleTV_MonitorTicketServer) error
	ConsumeMedia(*ConsumeMediaRequest, JungleTV_ConsumeMediaServer) error
	MonitorQueue(*MonitorQueueRequest, JungleTV_MonitorQueueServer) error
	MonitorSkipAndTip(*MonitorSkipAndTipRequest, JungleTV_MonitorSkipAndTipServer) error
	RewardInfo(context.Context, *RewardInfoRequest) (*RewardInfoResponse, error)
	SubmitActivityChallenge(context.Context, *SubmitActivityChallengeRequest) (*SubmitActivityChallengeResponse, error)
	ProduceSegchaChallenge(context.Context, *ProduceSegchaChallengeRequest) (*ProduceSegchaChallengeResponse, error)
	ConsumeChat(*ConsumeChatRequest, JungleTV_ConsumeChatServer) error
	SendChatMessage(context.Context, *SendChatMessageRequest) (*SendChatMessageResponse, error)
	UserPermissionLevel(context.Context, *UserPermissionLevelRequest) (*UserPermissionLevelResponse, error)
	GetDocument(context.Context, *GetDocumentRequest) (*Document, error)
	SetChatNickname(context.Context, *SetChatNicknameRequest) (*SetChatNicknameResponse, error)
	Withdraw(context.Context, *WithdrawRequest) (*WithdrawResponse, error)
	Leaderboards(context.Context, *LeaderboardsRequest) (*LeaderboardsResponse, error)
	RewardHistory(context.Context, *RewardHistoryRequest) (*RewardHistoryResponse, error)
	WithdrawalHistory(context.Context, *WithdrawalHistoryRequest) (*WithdrawalHistoryResponse, error)
	OngoingRaffleInfo(context.Context, *OngoingRaffleInfoRequest) (*OngoingRaffleInfoResponse, error)
	RaffleDrawings(context.Context, *RaffleDrawingsRequest) (*RaffleDrawingsResponse, error)
	Connections(context.Context, *ConnectionsRequest) (*ConnectionsResponse, error)
	CreateConnection(context.Context, *CreateConnectionRequest) (*CreateConnectionResponse, error)
	RemoveConnection(context.Context, *RemoveConnectionRequest) (*RemoveConnectionResponse, error)
	UserProfile(context.Context, *UserProfileRequest) (*UserProfileResponse, error)
	UserStats(context.Context, *UserStatsRequest) (*UserStatsResponse, error)
	SetProfileBiography(context.Context, *SetProfileBiographyRequest) (*SetProfileBiographyResponse, error)
	SetProfileFeaturedMedia(context.Context, *SetProfileFeaturedMediaRequest) (*SetProfileFeaturedMediaResponse, error)
	PlayedMediaHistory(context.Context, *PlayedMediaHistoryRequest) (*PlayedMediaHistoryResponse, error)
	BlockUser(context.Context, *BlockUserRequest) (*BlockUserResponse, error)
	UnblockUser(context.Context, *UnblockUserRequest) (*UnblockUserResponse, error)
	BlockedUsers(context.Context, *BlockedUsersRequest) (*BlockedUsersResponse, error)
	PointsInfo(context.Context, *PointsInfoRequest) (*PointsInfoResponse, error)
	PointsTransactions(context.Context, *PointsTransactionsRequest) (*PointsTransactionsResponse, error)
	ChatGifSearch(context.Context, *ChatGifSearchRequest) (*ChatGifSearchResponse, error)
	ConvertBananoToPoints(*ConvertBananoToPointsRequest, JungleTV_ConvertBananoToPointsServer) error
	StartOrExtendSubscription(context.Context, *StartOrExtendSubscriptionRequest) (*StartOrExtendSubscriptionResponse, error)
	SoundCloudTrackDetails(context.Context, *SoundCloudTrackDetailsRequest) (*SoundCloudTrackDetailsResponse, error)
	IncreaseOrReduceSkipThreshold(context.Context, *IncreaseOrReduceSkipThresholdRequest) (*IncreaseOrReduceSkipThresholdResponse, error)
	CheckMediaEnqueuingPassword(context.Context, *CheckMediaEnqueuingPasswordRequest) (*CheckMediaEnqueuingPasswordResponse, error)
	MonitorMediaEnqueuingPermission(*MonitorMediaEnqueuingPermissionRequest, JungleTV_MonitorMediaEnqueuingPermissionServer) error
	InvalidateAuthTokens(context.Context, *InvalidateAuthTokensRequest) (*InvalidateAuthTokensResponse, error)
	AuthorizeApplication(*AuthorizeApplicationRequest, JungleTV_AuthorizeApplicationServer) error
	AuthorizationProcessData(context.Context, *AuthorizationProcessDataRequest) (*AuthorizationProcessDataResponse, error)
	ConsentOrDissentToAuthorization(context.Context, *ConsentOrDissentToAuthorizationRequest) (*ConsentOrDissentToAuthorizationResponse, error)
	// moderation endpoints
	ForciblyEnqueueTicket(context.Context, *ForciblyEnqueueTicketRequest) (*ForciblyEnqueueTicketResponse, error)
	RemoveQueueEntry(context.Context, *RemoveQueueEntryRequest) (*RemoveQueueEntryResponse, error)
	RemoveChatMessage(context.Context, *RemoveChatMessageRequest) (*RemoveChatMessageResponse, error)
	SetChatSettings(context.Context, *SetChatSettingsRequest) (*SetChatSettingsResponse, error)
	SetMediaEnqueuingEnabled(context.Context, *SetMediaEnqueuingEnabledRequest) (*SetMediaEnqueuingEnabledResponse, error)
	UserBans(context.Context, *UserBansRequest) (*UserBansResponse, error)
	BanUser(context.Context, *BanUserRequest) (*BanUserResponse, error)
	RemoveBan(context.Context, *RemoveBanRequest) (*RemoveBanResponse, error)
	UserVerifications(context.Context, *UserVerificationsRequest) (*UserVerificationsResponse, error)
	VerifyUser(context.Context, *VerifyUserRequest) (*VerifyUserResponse, error)
	RemoveUserVerification(context.Context, *RemoveUserVerificationRequest) (*RemoveUserVerificationResponse, error)
	UserChatMessages(context.Context, *UserChatMessagesRequest) (*UserChatMessagesResponse, error)
	DisallowedMedia(context.Context, *DisallowedMediaRequest) (*DisallowedMediaResponse, error)
	AddDisallowedMedia(context.Context, *AddDisallowedMediaRequest) (*AddDisallowedMediaResponse, error)
	RemoveDisallowedMedia(context.Context, *RemoveDisallowedMediaRequest) (*RemoveDisallowedMediaResponse, error)
	DisallowedMediaCollections(context.Context, *DisallowedMediaCollectionsRequest) (*DisallowedMediaCollectionsResponse, error)
	AddDisallowedMediaCollection(context.Context, *AddDisallowedMediaCollectionRequest) (*AddDisallowedMediaCollectionResponse, error)
	RemoveDisallowedMediaCollection(context.Context, *RemoveDisallowedMediaCollectionRequest) (*RemoveDisallowedMediaCollectionResponse, error)
	UpdateDocument(context.Context, *Document) (*UpdateDocumentResponse, error)
	Documents(context.Context, *DocumentsRequest) (*DocumentsResponse, error)
	SetUserChatNickname(context.Context, *SetUserChatNicknameRequest) (*SetUserChatNicknameResponse, error)
	SetPricesMultiplier(context.Context, *SetPricesMultiplierRequest) (*SetPricesMultiplierResponse, error)
	SetMinimumPricesMultiplier(context.Context, *SetMinimumPricesMultiplierRequest) (*SetMinimumPricesMultiplierResponse, error)
	SetCrowdfundedSkippingEnabled(context.Context, *SetCrowdfundedSkippingEnabledRequest) (*SetCrowdfundedSkippingEnabledResponse, error)
	SetSkipPriceMultiplier(context.Context, *SetSkipPriceMultiplierRequest) (*SetSkipPriceMultiplierResponse, error)
	ConfirmRaffleWinner(context.Context, *ConfirmRaffleWinnerRequest) (*ConfirmRaffleWinnerResponse, error)
	CompleteRaffle(context.Context, *CompleteRaffleRequest) (*CompleteRaffleResponse, error)
	RedrawRaffle(context.Context, *RedrawRaffleRequest) (*RedrawRaffleResponse, error)
	TriggerAnnouncementsNotification(context.Context, *TriggerAnnouncementsNotificationRequest) (*TriggerAnnouncementsNotificationResponse, error)
	SpectatorInfo(context.Context, *SpectatorInfoRequest) (*Spectator, error)
	ResetSpectatorStatus(context.Context, *ResetSpectatorStatusRequest) (*ResetSpectatorStatusResponse, error)
	MonitorModerationStatus(*MonitorModerationStatusRequest, JungleTV_MonitorModerationStatusServer) error
	SetOwnQueueEntryRemovalAllowed(context.Context, *SetOwnQueueEntryRemovalAllowedRequest) (*SetOwnQueueEntryRemovalAllowedResponse, error)
	SetQueueEntryReorderingAllowed(context.Context, *SetQueueEntryReorderingAllowedRequest) (*SetQueueEntryReorderingAllowedResponse, error)
	SetNewQueueEntriesAlwaysUnskippable(context.Context, *SetNewQueueEntriesAlwaysUnskippableRequest) (*SetNewQueueEntriesAlwaysUnskippableResponse, error)
	SetSkippingEnabled(context.Context, *SetSkippingEnabledRequest) (*SetSkippingEnabledResponse, error)
	SetQueueInsertCursor(context.Context, *SetQueueInsertCursorRequest) (*SetQueueInsertCursorResponse, error)
	ClearQueueInsertCursor(context.Context, *ClearQueueInsertCursorRequest) (*ClearQueueInsertCursorResponse, error)
	ClearUserProfile(context.Context, *ClearUserProfileRequest) (*ClearUserProfileResponse, error)
	MarkAsActivelyModerating(context.Context, *MarkAsActivelyModeratingRequest) (*MarkAsActivelyModeratingResponse, error)
	StopActivelyModerating(context.Context, *StopActivelyModeratingRequest) (*StopActivelyModeratingResponse, error)
	AdjustPointsBalance(context.Context, *AdjustPointsBalanceRequest) (*AdjustPointsBalanceResponse, error)
	AddVipUser(context.Context, *AddVipUserRequest) (*AddVipUserResponse, error)
	RemoveVipUser(context.Context, *RemoveVipUserRequest) (*RemoveVipUserResponse, error)
	TriggerClientReload(context.Context, *TriggerClientReloadRequest) (*TriggerClientReloadResponse, error)
	SetMulticurrencyPaymentsEnabled(context.Context, *SetMulticurrencyPaymentsEnabledRequest) (*SetMulticurrencyPaymentsEnabledResponse, error)
	InvalidateUserAuthTokens(context.Context, *InvalidateUserAuthTokensRequest) (*InvalidateUserAuthTokensResponse, error)
	// application editor endpoints
	Applications(context.Context, *ApplicationsRequest) (*ApplicationsResponse, error)
	GetApplication(context.Context, *GetApplicationRequest) (*Application, error)
	UpdateApplication(context.Context, *Application) (*UpdateApplicationResponse, error)
	CreateApplicationWithWalletPrefix(context.Context, *CreateApplicationWithWalletPrefixRequest) (*CreateApplicationWithWalletPrefixResponse, error)
	CloneApplication(context.Context, *CloneApplicationRequest) (*CloneApplicationResponse, error)
	DeleteApplication(context.Context, *DeleteApplicationRequest) (*DeleteApplicationResponse, error)
	ApplicationFiles(context.Context, *ApplicationFilesRequest) (*ApplicationFilesResponse, error)
	GetApplicationFile(context.Context, *GetApplicationFileRequest) (*ApplicationFile, error)
	UpdateApplicationFile(context.Context, *ApplicationFile) (*UpdateApplicationFileResponse, error)
	CloneApplicationFile(context.Context, *CloneApplicationFileRequest) (*CloneApplicationFileResponse, error)
	DeleteApplicationFile(context.Context, *DeleteApplicationFileRequest) (*DeleteApplicationFileResponse, error)
	LaunchApplication(context.Context, *LaunchApplicationRequest) (*LaunchApplicationResponse, error)
	StopApplication(context.Context, *StopApplicationRequest) (*StopApplicationResponse, error)
	ApplicationLog(context.Context, *ApplicationLogRequest) (*ApplicationLogResponse, error)
	ConsumeApplicationLog(*ConsumeApplicationLogRequest, JungleTV_ConsumeApplicationLogServer) error
	MonitorRunningApplications(*MonitorRunningApplicationsRequest, JungleTV_MonitorRunningApplicationsServer) error
	EvaluateExpressionOnApplication(context.Context, *EvaluateExpressionOnApplicationRequest) (*EvaluateExpressionOnApplicationResponse, error)
	ExportApplication(context.Context, *ExportApplicationRequest) (*ExportApplicationResponse, error)
	ImportApplication(context.Context, *ImportApplicationRequest) (*ImportApplicationResponse, error)
	TypeScriptTypeDefinitions(context.Context, *TypeScriptTypeDefinitionsRequest) (*TypeScriptTypeDefinitionsResponse, error)
	// application runtime endpoints
	ResolveApplicationPage(context.Context, *ResolveApplicationPageRequest) (*ResolveApplicationPageResponse, error)
	ConsumeApplicationEvents(*ConsumeApplicationEventsRequest, JungleTV_ConsumeApplicationEventsServer) error
	ApplicationServerMethod(context.Context, *ApplicationServerMethodRequest) (*ApplicationServerMethodResponse, error)
	TriggerApplicationEvent(context.Context, *TriggerApplicationEventRequest) (*TriggerApplicationEventResponse, error)
	mustEmbedUnimplementedJungleTVServer()
}

// UnimplementedJungleTVServer must be embedded to have forward compatible implementations.
type UnimplementedJungleTVServer struct {
}

func (UnimplementedJungleTVServer) SignIn(*SignInRequest, JungleTV_SignInServer) error {
	return status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedJungleTVServer) VerifySignInSignature(context.Context, *VerifySignInSignatureRequest) (*SignInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifySignInSignature not implemented")
}
func (UnimplementedJungleTVServer) EnqueueMedia(context.Context, *EnqueueMediaRequest) (*EnqueueMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnqueueMedia not implemented")
}
func (UnimplementedJungleTVServer) RemoveOwnQueueEntry(context.Context, *RemoveOwnQueueEntryRequest) (*RemoveOwnQueueEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOwnQueueEntry not implemented")
}
func (UnimplementedJungleTVServer) MoveQueueEntry(context.Context, *MoveQueueEntryRequest) (*MoveQueueEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveQueueEntry not implemented")
}
func (UnimplementedJungleTVServer) MonitorTicket(*MonitorTicketRequest, JungleTV_MonitorTicketServer) error {
	return status.Errorf(codes.Unimplemented, "method MonitorTicket not implemented")
}
func (UnimplementedJungleTVServer) ConsumeMedia(*ConsumeMediaRequest, JungleTV_ConsumeMediaServer) error {
	return status.Errorf(codes.Unimplemented, "method ConsumeMedia not implemented")
}
func (UnimplementedJungleTVServer) MonitorQueue(*MonitorQueueRequest, JungleTV_MonitorQueueServer) error {
	return status.Errorf(codes.Unimplemented, "method MonitorQueue not implemented")
}
func (UnimplementedJungleTVServer) MonitorSkipAndTip(*MonitorSkipAndTipRequest, JungleTV_MonitorSkipAndTipServer) error {
	return status.Errorf(codes.Unimplemented, "method MonitorSkipAndTip not implemented")
}
func (UnimplementedJungleTVServer) RewardInfo(context.Context, *RewardInfoRequest) (*RewardInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardInfo not implemented")
}
func (UnimplementedJungleTVServer) SubmitActivityChallenge(context.Context, *SubmitActivityChallengeRequest) (*SubmitActivityChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitActivityChallenge not implemented")
}
func (UnimplementedJungleTVServer) ProduceSegchaChallenge(context.Context, *ProduceSegchaChallengeRequest) (*ProduceSegchaChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProduceSegchaChallenge not implemented")
}
func (UnimplementedJungleTVServer) ConsumeChat(*ConsumeChatRequest, JungleTV_ConsumeChatServer) error {
	return status.Errorf(codes.Unimplemented, "method ConsumeChat not implemented")
}
func (UnimplementedJungleTVServer) SendChatMessage(context.Context, *SendChatMessageRequest) (*SendChatMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendChatMessage not implemented")
}
func (UnimplementedJungleTVServer) UserPermissionLevel(context.Context, *UserPermissionLevelRequest) (*UserPermissionLevelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPermissionLevel not implemented")
}
func (UnimplementedJungleTVServer) GetDocument(context.Context, *GetDocumentRequest) (*Document, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocument not implemented")
}
func (UnimplementedJungleTVServer) SetChatNickname(context.Context, *SetChatNicknameRequest) (*SetChatNicknameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetChatNickname not implemented")
}
func (UnimplementedJungleTVServer) Withdraw(context.Context, *WithdrawRequest) (*WithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdraw not implemented")
}
func (UnimplementedJungleTVServer) Leaderboards(context.Context, *LeaderboardsRequest) (*LeaderboardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leaderboards not implemented")
}
func (UnimplementedJungleTVServer) RewardHistory(context.Context, *RewardHistoryRequest) (*RewardHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardHistory not implemented")
}
func (UnimplementedJungleTVServer) WithdrawalHistory(context.Context, *WithdrawalHistoryRequest) (*WithdrawalHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawalHistory not implemented")
}
func (UnimplementedJungleTVServer) OngoingRaffleInfo(context.Context, *OngoingRaffleInfoRequest) (*OngoingRaffleInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OngoingRaffleInfo not implemented")
}
func (UnimplementedJungleTVServer) RaffleDrawings(context.Context, *RaffleDrawingsRequest) (*RaffleDrawingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RaffleDrawings not implemented")
}
func (UnimplementedJungleTVServer) Connections(context.Context, *ConnectionsRequest) (*ConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connections not implemented")
}
func (UnimplementedJungleTVServer) CreateConnection(context.Context, *CreateConnectionRequest) (*CreateConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConnection not implemented")
}
func (UnimplementedJungleTVServer) RemoveConnection(context.Context, *RemoveConnectionRequest) (*RemoveConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveConnection not implemented")
}
func (UnimplementedJungleTVServer) UserProfile(context.Context, *UserProfileRequest) (*UserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserProfile not implemented")
}
func (UnimplementedJungleTVServer) UserStats(context.Context, *UserStatsRequest) (*UserStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserStats not implemented")
}
func (UnimplementedJungleTVServer) SetProfileBiography(context.Context, *SetProfileBiographyRequest) (*SetProfileBiographyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetProfileBiography not implemented")
}
func (UnimplementedJungleTVServer) SetProfileFeaturedMedia(context.Context, *SetProfileFeaturedMediaRequest) (*SetProfileFeaturedMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetProfileFeaturedMedia not implemented")
}
func (UnimplementedJungleTVServer) PlayedMediaHistory(context.Context, *PlayedMediaHistoryRequest) (*PlayedMediaHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayedMediaHistory not implemented")
}
func (UnimplementedJungleTVServer) BlockUser(context.Context, *BlockUserRequest) (*BlockUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockUser not implemented")
}
func (UnimplementedJungleTVServer) UnblockUser(context.Context, *UnblockUserRequest) (*UnblockUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnblockUser not implemented")
}
func (UnimplementedJungleTVServer) BlockedUsers(context.Context, *BlockedUsersRequest) (*BlockedUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockedUsers not implemented")
}
func (UnimplementedJungleTVServer) PointsInfo(context.Context, *PointsInfoRequest) (*PointsInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PointsInfo not implemented")
}
func (UnimplementedJungleTVServer) PointsTransactions(context.Context, *PointsTransactionsRequest) (*PointsTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PointsTransactions not implemented")
}
func (UnimplementedJungleTVServer) ChatGifSearch(context.Context, *ChatGifSearchRequest) (*ChatGifSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatGifSearch not implemented")
}
func (UnimplementedJungleTVServer) ConvertBananoToPoints(*ConvertBananoToPointsRequest, JungleTV_ConvertBananoToPointsServer) error {
	return status.Errorf(codes.Unimplemented, "method ConvertBananoToPoints not implemented")
}
func (UnimplementedJungleTVServer) StartOrExtendSubscription(context.Context, *StartOrExtendSubscriptionRequest) (*StartOrExtendSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartOrExtendSubscription not implemented")
}
func (UnimplementedJungleTVServer) SoundCloudTrackDetails(context.Context, *SoundCloudTrackDetailsRequest) (*SoundCloudTrackDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SoundCloudTrackDetails not implemented")
}
func (UnimplementedJungleTVServer) IncreaseOrReduceSkipThreshold(context.Context, *IncreaseOrReduceSkipThresholdRequest) (*IncreaseOrReduceSkipThresholdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncreaseOrReduceSkipThreshold not implemented")
}
func (UnimplementedJungleTVServer) CheckMediaEnqueuingPassword(context.Context, *CheckMediaEnqueuingPasswordRequest) (*CheckMediaEnqueuingPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckMediaEnqueuingPassword not implemented")
}
func (UnimplementedJungleTVServer) MonitorMediaEnqueuingPermission(*MonitorMediaEnqueuingPermissionRequest, JungleTV_MonitorMediaEnqueuingPermissionServer) error {
	return status.Errorf(codes.Unimplemented, "method MonitorMediaEnqueuingPermission not implemented")
}
func (UnimplementedJungleTVServer) InvalidateAuthTokens(context.Context, *InvalidateAuthTokensRequest) (*InvalidateAuthTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateAuthTokens not implemented")
}
func (UnimplementedJungleTVServer) AuthorizeApplication(*AuthorizeApplicationRequest, JungleTV_AuthorizeApplicationServer) error {
	return status.Errorf(codes.Unimplemented, "method AuthorizeApplication not implemented")
}
func (UnimplementedJungleTVServer) AuthorizationProcessData(context.Context, *AuthorizationProcessDataRequest) (*AuthorizationProcessDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizationProcessData not implemented")
}
func (UnimplementedJungleTVServer) ConsentOrDissentToAuthorization(context.Context, *ConsentOrDissentToAuthorizationRequest) (*ConsentOrDissentToAuthorizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsentOrDissentToAuthorization not implemented")
}
func (UnimplementedJungleTVServer) ForciblyEnqueueTicket(context.Context, *ForciblyEnqueueTicketRequest) (*ForciblyEnqueueTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForciblyEnqueueTicket not implemented")
}
func (UnimplementedJungleTVServer) RemoveQueueEntry(context.Context, *RemoveQueueEntryRequest) (*RemoveQueueEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveQueueEntry not implemented")
}
func (UnimplementedJungleTVServer) RemoveChatMessage(context.Context, *RemoveChatMessageRequest) (*RemoveChatMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveChatMessage not implemented")
}
func (UnimplementedJungleTVServer) SetChatSettings(context.Context, *SetChatSettingsRequest) (*SetChatSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetChatSettings not implemented")
}
func (UnimplementedJungleTVServer) SetMediaEnqueuingEnabled(context.Context, *SetMediaEnqueuingEnabledRequest) (*SetMediaEnqueuingEnabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMediaEnqueuingEnabled not implemented")
}
func (UnimplementedJungleTVServer) UserBans(context.Context, *UserBansRequest) (*UserBansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserBans not implemented")
}
func (UnimplementedJungleTVServer) BanUser(context.Context, *BanUserRequest) (*BanUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BanUser not implemented")
}
func (UnimplementedJungleTVServer) RemoveBan(context.Context, *RemoveBanRequest) (*RemoveBanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBan not implemented")
}
func (UnimplementedJungleTVServer) UserVerifications(context.Context, *UserVerificationsRequest) (*UserVerificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserVerifications not implemented")
}
func (UnimplementedJungleTVServer) VerifyUser(context.Context, *VerifyUserRequest) (*VerifyUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyUser not implemented")
}
func (UnimplementedJungleTVServer) RemoveUserVerification(context.Context, *RemoveUserVerificationRequest) (*RemoveUserVerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserVerification not implemented")
}
func (UnimplementedJungleTVServer) UserChatMessages(context.Context, *UserChatMessagesRequest) (*UserChatMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserChatMessages not implemented")
}
func (UnimplementedJungleTVServer) DisallowedMedia(context.Context, *DisallowedMediaRequest) (*DisallowedMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisallowedMedia not implemented")
}
func (UnimplementedJungleTVServer) AddDisallowedMedia(context.Context, *AddDisallowedMediaRequest) (*AddDisallowedMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDisallowedMedia not implemented")
}
func (UnimplementedJungleTVServer) RemoveDisallowedMedia(context.Context, *RemoveDisallowedMediaRequest) (*RemoveDisallowedMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDisallowedMedia not implemented")
}
func (UnimplementedJungleTVServer) DisallowedMediaCollections(context.Context, *DisallowedMediaCollectionsRequest) (*DisallowedMediaCollectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisallowedMediaCollections not implemented")
}
func (UnimplementedJungleTVServer) AddDisallowedMediaCollection(context.Context, *AddDisallowedMediaCollectionRequest) (*AddDisallowedMediaCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDisallowedMediaCollection not implemented")
}
func (UnimplementedJungleTVServer) RemoveDisallowedMediaCollection(context.Context, *RemoveDisallowedMediaCollectionRequest) (*RemoveDisallowedMediaCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDisallowedMediaCollection not implemented")
}
func (UnimplementedJungleTVServer) UpdateDocument(context.Context, *Document) (*UpdateDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDocument not implemented")
}
func (UnimplementedJungleTVServer) Documents(context.Context, *DocumentsRequest) (*DocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Documents not implemented")
}
func (UnimplementedJungleTVServer) SetUserChatNickname(context.Context, *SetUserChatNicknameRequest) (*SetUserChatNicknameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserChatNickname not implemented")
}
func (UnimplementedJungleTVServer) SetPricesMultiplier(context.Context, *SetPricesMultiplierRequest) (*SetPricesMultiplierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPricesMultiplier not implemented")
}
func (UnimplementedJungleTVServer) SetMinimumPricesMultiplier(context.Context, *SetMinimumPricesMultiplierRequest) (*SetMinimumPricesMultiplierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMinimumPricesMultiplier not implemented")
}
func (UnimplementedJungleTVServer) SetCrowdfundedSkippingEnabled(context.Context, *SetCrowdfundedSkippingEnabledRequest) (*SetCrowdfundedSkippingEnabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCrowdfundedSkippingEnabled not implemented")
}
func (UnimplementedJungleTVServer) SetSkipPriceMultiplier(context.Context, *SetSkipPriceMultiplierRequest) (*SetSkipPriceMultiplierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSkipPriceMultiplier not implemented")
}
func (UnimplementedJungleTVServer) ConfirmRaffleWinner(context.Context, *ConfirmRaffleWinnerRequest) (*ConfirmRaffleWinnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmRaffleWinner not implemented")
}
func (UnimplementedJungleTVServer) CompleteRaffle(context.Context, *CompleteRaffleRequest) (*CompleteRaffleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteRaffle not implemented")
}
func (UnimplementedJungleTVServer) RedrawRaffle(context.Context, *RedrawRaffleRequest) (*RedrawRaffleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedrawRaffle not implemented")
}
func (UnimplementedJungleTVServer) TriggerAnnouncementsNotification(context.Context, *TriggerAnnouncementsNotificationRequest) (*TriggerAnnouncementsNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerAnnouncementsNotification not implemented")
}
func (UnimplementedJungleTVServer) SpectatorInfo(context.Context, *SpectatorInfoRequest) (*Spectator, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpectatorInfo not implemented")
}
func (UnimplementedJungleTVServer) ResetSpectatorStatus(context.Context, *ResetSpectatorStatusRequest) (*ResetSpectatorStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetSpectatorStatus not implemented")
}
func (UnimplementedJungleTVServer) MonitorModerationStatus(*MonitorModerationStatusRequest, JungleTV_MonitorModerationStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method MonitorModerationStatus not implemented")
}
func (UnimplementedJungleTVServer) SetOwnQueueEntryRemovalAllowed(context.Context, *SetOwnQueueEntryRemovalAllowedRequest) (*SetOwnQueueEntryRemovalAllowedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOwnQueueEntryRemovalAllowed not implemented")
}
func (UnimplementedJungleTVServer) SetQueueEntryReorderingAllowed(context.Context, *SetQueueEntryReorderingAllowedRequest) (*SetQueueEntryReorderingAllowedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetQueueEntryReorderingAllowed not implemented")
}
func (UnimplementedJungleTVServer) SetNewQueueEntriesAlwaysUnskippable(context.Context, *SetNewQueueEntriesAlwaysUnskippableRequest) (*SetNewQueueEntriesAlwaysUnskippableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNewQueueEntriesAlwaysUnskippable not implemented")
}
func (UnimplementedJungleTVServer) SetSkippingEnabled(context.Context, *SetSkippingEnabledRequest) (*SetSkippingEnabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSkippingEnabled not implemented")
}
func (UnimplementedJungleTVServer) SetQueueInsertCursor(context.Context, *SetQueueInsertCursorRequest) (*SetQueueInsertCursorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetQueueInsertCursor not implemented")
}
func (UnimplementedJungleTVServer) ClearQueueInsertCursor(context.Context, *ClearQueueInsertCursorRequest) (*ClearQueueInsertCursorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearQueueInsertCursor not implemented")
}
func (UnimplementedJungleTVServer) ClearUserProfile(context.Context, *ClearUserProfileRequest) (*ClearUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearUserProfile not implemented")
}
func (UnimplementedJungleTVServer) MarkAsActivelyModerating(context.Context, *MarkAsActivelyModeratingRequest) (*MarkAsActivelyModeratingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkAsActivelyModerating not implemented")
}
func (UnimplementedJungleTVServer) StopActivelyModerating(context.Context, *StopActivelyModeratingRequest) (*StopActivelyModeratingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopActivelyModerating not implemented")
}
func (UnimplementedJungleTVServer) AdjustPointsBalance(context.Context, *AdjustPointsBalanceRequest) (*AdjustPointsBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdjustPointsBalance not implemented")
}
func (UnimplementedJungleTVServer) AddVipUser(context.Context, *AddVipUserRequest) (*AddVipUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVipUser not implemented")
}
func (UnimplementedJungleTVServer) RemoveVipUser(context.Context, *RemoveVipUserRequest) (*RemoveVipUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveVipUser not implemented")
}
func (UnimplementedJungleTVServer) TriggerClientReload(context.Context, *TriggerClientReloadRequest) (*TriggerClientReloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerClientReload not implemented")
}
func (UnimplementedJungleTVServer) SetMulticurrencyPaymentsEnabled(context.Context, *SetMulticurrencyPaymentsEnabledRequest) (*SetMulticurrencyPaymentsEnabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMulticurrencyPaymentsEnabled not implemented")
}
func (UnimplementedJungleTVServer) InvalidateUserAuthTokens(context.Context, *InvalidateUserAuthTokensRequest) (*InvalidateUserAuthTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateUserAuthTokens not implemented")
}
func (UnimplementedJungleTVServer) Applications(context.Context, *ApplicationsRequest) (*ApplicationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Applications not implemented")
}
func (UnimplementedJungleTVServer) GetApplication(context.Context, *GetApplicationRequest) (*Application, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplication not implemented")
}
func (UnimplementedJungleTVServer) UpdateApplication(context.Context, *Application) (*UpdateApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApplication not implemented")
}
func (UnimplementedJungleTVServer) CreateApplicationWithWalletPrefix(context.Context, *CreateApplicationWithWalletPrefixRequest) (*CreateApplicationWithWalletPrefixResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApplicationWithWalletPrefix not implemented")
}
func (UnimplementedJungleTVServer) CloneApplication(context.Context, *CloneApplicationRequest) (*CloneApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloneApplication not implemented")
}
func (UnimplementedJungleTVServer) DeleteApplication(context.Context, *DeleteApplicationRequest) (*DeleteApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApplication not implemented")
}
func (UnimplementedJungleTVServer) ApplicationFiles(context.Context, *ApplicationFilesRequest) (*ApplicationFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplicationFiles not implemented")
}
func (UnimplementedJungleTVServer) GetApplicationFile(context.Context, *GetApplicationFileRequest) (*ApplicationFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicationFile not implemented")
}
func (UnimplementedJungleTVServer) UpdateApplicationFile(context.Context, *ApplicationFile) (*UpdateApplicationFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApplicationFile not implemented")
}
func (UnimplementedJungleTVServer) CloneApplicationFile(context.Context, *CloneApplicationFileRequest) (*CloneApplicationFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloneApplicationFile not implemented")
}
func (UnimplementedJungleTVServer) DeleteApplicationFile(context.Context, *DeleteApplicationFileRequest) (*DeleteApplicationFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApplicationFile not implemented")
}
func (UnimplementedJungleTVServer) LaunchApplication(context.Context, *LaunchApplicationRequest) (*LaunchApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LaunchApplication not implemented")
}
func (UnimplementedJungleTVServer) StopApplication(context.Context, *StopApplicationRequest) (*StopApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopApplication not implemented")
}
func (UnimplementedJungleTVServer) ApplicationLog(context.Context, *ApplicationLogRequest) (*ApplicationLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplicationLog not implemented")
}
func (UnimplementedJungleTVServer) ConsumeApplicationLog(*ConsumeApplicationLogRequest, JungleTV_ConsumeApplicationLogServer) error {
	return status.Errorf(codes.Unimplemented, "method ConsumeApplicationLog not implemented")
}
func (UnimplementedJungleTVServer) MonitorRunningApplications(*MonitorRunningApplicationsRequest, JungleTV_MonitorRunningApplicationsServer) error {
	return status.Errorf(codes.Unimplemented, "method MonitorRunningApplications not implemented")
}
func (UnimplementedJungleTVServer) EvaluateExpressionOnApplication(context.Context, *EvaluateExpressionOnApplicationRequest) (*EvaluateExpressionOnApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvaluateExpressionOnApplication not implemented")
}
func (UnimplementedJungleTVServer) ExportApplication(context.Context, *ExportApplicationRequest) (*ExportApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportApplication not implemented")
}
func (UnimplementedJungleTVServer) ImportApplication(context.Context, *ImportApplicationRequest) (*ImportApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportApplication not implemented")
}
func (UnimplementedJungleTVServer) TypeScriptTypeDefinitions(context.Context, *TypeScriptTypeDefinitionsRequest) (*TypeScriptTypeDefinitionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TypeScriptTypeDefinitions not implemented")
}
func (UnimplementedJungleTVServer) ResolveApplicationPage(context.Context, *ResolveApplicationPageRequest) (*ResolveApplicationPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveApplicationPage not implemented")
}
func (UnimplementedJungleTVServer) ConsumeApplicationEvents(*ConsumeApplicationEventsRequest, JungleTV_ConsumeApplicationEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method ConsumeApplicationEvents not implemented")
}
func (UnimplementedJungleTVServer) ApplicationServerMethod(context.Context, *ApplicationServerMethodRequest) (*ApplicationServerMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplicationServerMethod not implemented")
}
func (UnimplementedJungleTVServer) TriggerApplicationEvent(context.Context, *TriggerApplicationEventRequest) (*TriggerApplicationEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerApplicationEvent not implemented")
}
func (UnimplementedJungleTVServer) mustEmbedUnimplementedJungleTVServer() {}

// UnsafeJungleTVServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JungleTVServer will
// result in compilation errors.
type UnsafeJungleTVServer interface {
	mustEmbedUnimplementedJungleTVServer()
}

func RegisterJungleTVServer(s grpc.ServiceRegistrar, srv JungleTVServer) {
	s.RegisterService(&JungleTV_ServiceDesc, srv)
}

func _JungleTV_SignIn_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SignInRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JungleTVServer).SignIn(m, &jungleTVSignInServer{stream})
}

type JungleTV_SignInServer interface {
	Send(*SignInProgress) error
	grpc.ServerStream
}

type jungleTVSignInServer struct {
	grpc.ServerStream
}

func (x *jungleTVSignInServer) Send(m *SignInProgress) error {
	return x.ServerStream.SendMsg(m)
}

func _JungleTV_VerifySignInSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifySignInSignatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).VerifySignInSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/VerifySignInSignature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).VerifySignInSignature(ctx, req.(*VerifySignInSignatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_EnqueueMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnqueueMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).EnqueueMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/EnqueueMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).EnqueueMedia(ctx, req.(*EnqueueMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_RemoveOwnQueueEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveOwnQueueEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).RemoveOwnQueueEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/RemoveOwnQueueEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).RemoveOwnQueueEntry(ctx, req.(*RemoveOwnQueueEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_MoveQueueEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveQueueEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).MoveQueueEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/MoveQueueEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).MoveQueueEntry(ctx, req.(*MoveQueueEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_MonitorTicket_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MonitorTicketRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JungleTVServer).MonitorTicket(m, &jungleTVMonitorTicketServer{stream})
}

type JungleTV_MonitorTicketServer interface {
	Send(*EnqueueMediaTicket) error
	grpc.ServerStream
}

type jungleTVMonitorTicketServer struct {
	grpc.ServerStream
}

func (x *jungleTVMonitorTicketServer) Send(m *EnqueueMediaTicket) error {
	return x.ServerStream.SendMsg(m)
}

func _JungleTV_ConsumeMedia_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConsumeMediaRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JungleTVServer).ConsumeMedia(m, &jungleTVConsumeMediaServer{stream})
}

type JungleTV_ConsumeMediaServer interface {
	Send(*MediaConsumptionCheckpoint) error
	grpc.ServerStream
}

type jungleTVConsumeMediaServer struct {
	grpc.ServerStream
}

func (x *jungleTVConsumeMediaServer) Send(m *MediaConsumptionCheckpoint) error {
	return x.ServerStream.SendMsg(m)
}

func _JungleTV_MonitorQueue_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MonitorQueueRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JungleTVServer).MonitorQueue(m, &jungleTVMonitorQueueServer{stream})
}

type JungleTV_MonitorQueueServer interface {
	Send(*Queue) error
	grpc.ServerStream
}

type jungleTVMonitorQueueServer struct {
	grpc.ServerStream
}

func (x *jungleTVMonitorQueueServer) Send(m *Queue) error {
	return x.ServerStream.SendMsg(m)
}

func _JungleTV_MonitorSkipAndTip_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MonitorSkipAndTipRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JungleTVServer).MonitorSkipAndTip(m, &jungleTVMonitorSkipAndTipServer{stream})
}

type JungleTV_MonitorSkipAndTipServer interface {
	Send(*SkipAndTipStatus) error
	grpc.ServerStream
}

type jungleTVMonitorSkipAndTipServer struct {
	grpc.ServerStream
}

func (x *jungleTVMonitorSkipAndTipServer) Send(m *SkipAndTipStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _JungleTV_RewardInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RewardInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).RewardInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/RewardInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).RewardInfo(ctx, req.(*RewardInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_SubmitActivityChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitActivityChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).SubmitActivityChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/SubmitActivityChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).SubmitActivityChallenge(ctx, req.(*SubmitActivityChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_ProduceSegchaChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProduceSegchaChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).ProduceSegchaChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/ProduceSegchaChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).ProduceSegchaChallenge(ctx, req.(*ProduceSegchaChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_ConsumeChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConsumeChatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JungleTVServer).ConsumeChat(m, &jungleTVConsumeChatServer{stream})
}

type JungleTV_ConsumeChatServer interface {
	Send(*ChatUpdate) error
	grpc.ServerStream
}

type jungleTVConsumeChatServer struct {
	grpc.ServerStream
}

func (x *jungleTVConsumeChatServer) Send(m *ChatUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _JungleTV_SendChatMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendChatMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).SendChatMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/SendChatMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).SendChatMessage(ctx, req.(*SendChatMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_UserPermissionLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPermissionLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).UserPermissionLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/UserPermissionLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).UserPermissionLevel(ctx, req.(*UserPermissionLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_GetDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).GetDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/GetDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).GetDocument(ctx, req.(*GetDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_SetChatNickname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetChatNicknameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).SetChatNickname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/SetChatNickname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).SetChatNickname(ctx, req.(*SetChatNicknameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_Withdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).Withdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/Withdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).Withdraw(ctx, req.(*WithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_Leaderboards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaderboardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).Leaderboards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/Leaderboards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).Leaderboards(ctx, req.(*LeaderboardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_RewardHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RewardHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).RewardHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/RewardHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).RewardHistory(ctx, req.(*RewardHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_WithdrawalHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawalHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).WithdrawalHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/WithdrawalHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).WithdrawalHistory(ctx, req.(*WithdrawalHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_OngoingRaffleInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OngoingRaffleInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).OngoingRaffleInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/OngoingRaffleInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).OngoingRaffleInfo(ctx, req.(*OngoingRaffleInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_RaffleDrawings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaffleDrawingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).RaffleDrawings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/RaffleDrawings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).RaffleDrawings(ctx, req.(*RaffleDrawingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_Connections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).Connections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/Connections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).Connections(ctx, req.(*ConnectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_CreateConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).CreateConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/CreateConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).CreateConnection(ctx, req.(*CreateConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_RemoveConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).RemoveConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/RemoveConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).RemoveConnection(ctx, req.(*RemoveConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_UserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).UserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/UserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).UserProfile(ctx, req.(*UserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_UserStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).UserStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/UserStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).UserStats(ctx, req.(*UserStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_SetProfileBiography_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetProfileBiographyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).SetProfileBiography(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/SetProfileBiography",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).SetProfileBiography(ctx, req.(*SetProfileBiographyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_SetProfileFeaturedMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetProfileFeaturedMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).SetProfileFeaturedMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/SetProfileFeaturedMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).SetProfileFeaturedMedia(ctx, req.(*SetProfileFeaturedMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_PlayedMediaHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayedMediaHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).PlayedMediaHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/PlayedMediaHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).PlayedMediaHistory(ctx, req.(*PlayedMediaHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_BlockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).BlockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/BlockUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).BlockUser(ctx, req.(*BlockUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_UnblockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnblockUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).UnblockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/UnblockUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).UnblockUser(ctx, req.(*UnblockUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_BlockedUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockedUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).BlockedUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/BlockedUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).BlockedUsers(ctx, req.(*BlockedUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_PointsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PointsInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).PointsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/PointsInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).PointsInfo(ctx, req.(*PointsInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_PointsTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PointsTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).PointsTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/PointsTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).PointsTransactions(ctx, req.(*PointsTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_ChatGifSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatGifSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).ChatGifSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/ChatGifSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).ChatGifSearch(ctx, req.(*ChatGifSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_ConvertBananoToPoints_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConvertBananoToPointsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JungleTVServer).ConvertBananoToPoints(m, &jungleTVConvertBananoToPointsServer{stream})
}

type JungleTV_ConvertBananoToPointsServer interface {
	Send(*ConvertBananoToPointsStatus) error
	grpc.ServerStream
}

type jungleTVConvertBananoToPointsServer struct {
	grpc.ServerStream
}

func (x *jungleTVConvertBananoToPointsServer) Send(m *ConvertBananoToPointsStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _JungleTV_StartOrExtendSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartOrExtendSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).StartOrExtendSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/StartOrExtendSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).StartOrExtendSubscription(ctx, req.(*StartOrExtendSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_SoundCloudTrackDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SoundCloudTrackDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).SoundCloudTrackDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/SoundCloudTrackDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).SoundCloudTrackDetails(ctx, req.(*SoundCloudTrackDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_IncreaseOrReduceSkipThreshold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncreaseOrReduceSkipThresholdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).IncreaseOrReduceSkipThreshold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/IncreaseOrReduceSkipThreshold",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).IncreaseOrReduceSkipThreshold(ctx, req.(*IncreaseOrReduceSkipThresholdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_CheckMediaEnqueuingPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckMediaEnqueuingPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).CheckMediaEnqueuingPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/CheckMediaEnqueuingPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).CheckMediaEnqueuingPassword(ctx, req.(*CheckMediaEnqueuingPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_MonitorMediaEnqueuingPermission_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MonitorMediaEnqueuingPermissionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JungleTVServer).MonitorMediaEnqueuingPermission(m, &jungleTVMonitorMediaEnqueuingPermissionServer{stream})
}

type JungleTV_MonitorMediaEnqueuingPermissionServer interface {
	Send(*MediaEnqueuingPermissionStatus) error
	grpc.ServerStream
}

type jungleTVMonitorMediaEnqueuingPermissionServer struct {
	grpc.ServerStream
}

func (x *jungleTVMonitorMediaEnqueuingPermissionServer) Send(m *MediaEnqueuingPermissionStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _JungleTV_InvalidateAuthTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidateAuthTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).InvalidateAuthTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/InvalidateAuthTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).InvalidateAuthTokens(ctx, req.(*InvalidateAuthTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_AuthorizeApplication_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AuthorizeApplicationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JungleTVServer).AuthorizeApplication(m, &jungleTVAuthorizeApplicationServer{stream})
}

type JungleTV_AuthorizeApplicationServer interface {
	Send(*AuthorizeApplicationEvent) error
	grpc.ServerStream
}

type jungleTVAuthorizeApplicationServer struct {
	grpc.ServerStream
}

func (x *jungleTVAuthorizeApplicationServer) Send(m *AuthorizeApplicationEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _JungleTV_AuthorizationProcessData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizationProcessDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).AuthorizationProcessData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/AuthorizationProcessData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).AuthorizationProcessData(ctx, req.(*AuthorizationProcessDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_ConsentOrDissentToAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsentOrDissentToAuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).ConsentOrDissentToAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/ConsentOrDissentToAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).ConsentOrDissentToAuthorization(ctx, req.(*ConsentOrDissentToAuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_ForciblyEnqueueTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForciblyEnqueueTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).ForciblyEnqueueTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/ForciblyEnqueueTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).ForciblyEnqueueTicket(ctx, req.(*ForciblyEnqueueTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_RemoveQueueEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveQueueEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).RemoveQueueEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/RemoveQueueEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).RemoveQueueEntry(ctx, req.(*RemoveQueueEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_RemoveChatMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveChatMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).RemoveChatMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/RemoveChatMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).RemoveChatMessage(ctx, req.(*RemoveChatMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_SetChatSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetChatSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).SetChatSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/SetChatSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).SetChatSettings(ctx, req.(*SetChatSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_SetMediaEnqueuingEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMediaEnqueuingEnabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).SetMediaEnqueuingEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/SetMediaEnqueuingEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).SetMediaEnqueuingEnabled(ctx, req.(*SetMediaEnqueuingEnabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_UserBans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserBansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).UserBans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/UserBans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).UserBans(ctx, req.(*UserBansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_BanUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BanUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).BanUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/BanUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).BanUser(ctx, req.(*BanUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_RemoveBan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveBanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).RemoveBan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/RemoveBan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).RemoveBan(ctx, req.(*RemoveBanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_UserVerifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserVerificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).UserVerifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/UserVerifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).UserVerifications(ctx, req.(*UserVerificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_VerifyUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).VerifyUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/VerifyUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).VerifyUser(ctx, req.(*VerifyUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_RemoveUserVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).RemoveUserVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/RemoveUserVerification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).RemoveUserVerification(ctx, req.(*RemoveUserVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_UserChatMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserChatMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).UserChatMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/UserChatMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).UserChatMessages(ctx, req.(*UserChatMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_DisallowedMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisallowedMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).DisallowedMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/DisallowedMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).DisallowedMedia(ctx, req.(*DisallowedMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_AddDisallowedMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDisallowedMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).AddDisallowedMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/AddDisallowedMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).AddDisallowedMedia(ctx, req.(*AddDisallowedMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_RemoveDisallowedMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDisallowedMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).RemoveDisallowedMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/RemoveDisallowedMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).RemoveDisallowedMedia(ctx, req.(*RemoveDisallowedMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_DisallowedMediaCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisallowedMediaCollectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).DisallowedMediaCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/DisallowedMediaCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).DisallowedMediaCollections(ctx, req.(*DisallowedMediaCollectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_AddDisallowedMediaCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDisallowedMediaCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).AddDisallowedMediaCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/AddDisallowedMediaCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).AddDisallowedMediaCollection(ctx, req.(*AddDisallowedMediaCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_RemoveDisallowedMediaCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDisallowedMediaCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).RemoveDisallowedMediaCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/RemoveDisallowedMediaCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).RemoveDisallowedMediaCollection(ctx, req.(*RemoveDisallowedMediaCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_UpdateDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Document)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).UpdateDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/UpdateDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).UpdateDocument(ctx, req.(*Document))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_Documents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).Documents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/Documents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).Documents(ctx, req.(*DocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_SetUserChatNickname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserChatNicknameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).SetUserChatNickname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/SetUserChatNickname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).SetUserChatNickname(ctx, req.(*SetUserChatNicknameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_SetPricesMultiplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPricesMultiplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).SetPricesMultiplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/SetPricesMultiplier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).SetPricesMultiplier(ctx, req.(*SetPricesMultiplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_SetMinimumPricesMultiplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMinimumPricesMultiplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).SetMinimumPricesMultiplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/SetMinimumPricesMultiplier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).SetMinimumPricesMultiplier(ctx, req.(*SetMinimumPricesMultiplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_SetCrowdfundedSkippingEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCrowdfundedSkippingEnabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).SetCrowdfundedSkippingEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/SetCrowdfundedSkippingEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).SetCrowdfundedSkippingEnabled(ctx, req.(*SetCrowdfundedSkippingEnabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_SetSkipPriceMultiplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSkipPriceMultiplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).SetSkipPriceMultiplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/SetSkipPriceMultiplier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).SetSkipPriceMultiplier(ctx, req.(*SetSkipPriceMultiplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_ConfirmRaffleWinner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmRaffleWinnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).ConfirmRaffleWinner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/ConfirmRaffleWinner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).ConfirmRaffleWinner(ctx, req.(*ConfirmRaffleWinnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_CompleteRaffle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteRaffleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).CompleteRaffle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/CompleteRaffle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).CompleteRaffle(ctx, req.(*CompleteRaffleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_RedrawRaffle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedrawRaffleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).RedrawRaffle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/RedrawRaffle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).RedrawRaffle(ctx, req.(*RedrawRaffleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_TriggerAnnouncementsNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerAnnouncementsNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).TriggerAnnouncementsNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/TriggerAnnouncementsNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).TriggerAnnouncementsNotification(ctx, req.(*TriggerAnnouncementsNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_SpectatorInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpectatorInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).SpectatorInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/SpectatorInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).SpectatorInfo(ctx, req.(*SpectatorInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_ResetSpectatorStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetSpectatorStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).ResetSpectatorStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/ResetSpectatorStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).ResetSpectatorStatus(ctx, req.(*ResetSpectatorStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_MonitorModerationStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MonitorModerationStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JungleTVServer).MonitorModerationStatus(m, &jungleTVMonitorModerationStatusServer{stream})
}

type JungleTV_MonitorModerationStatusServer interface {
	Send(*ModerationStatusOverview) error
	grpc.ServerStream
}

type jungleTVMonitorModerationStatusServer struct {
	grpc.ServerStream
}

func (x *jungleTVMonitorModerationStatusServer) Send(m *ModerationStatusOverview) error {
	return x.ServerStream.SendMsg(m)
}

func _JungleTV_SetOwnQueueEntryRemovalAllowed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOwnQueueEntryRemovalAllowedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).SetOwnQueueEntryRemovalAllowed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/SetOwnQueueEntryRemovalAllowed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).SetOwnQueueEntryRemovalAllowed(ctx, req.(*SetOwnQueueEntryRemovalAllowedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_SetQueueEntryReorderingAllowed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetQueueEntryReorderingAllowedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).SetQueueEntryReorderingAllowed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/SetQueueEntryReorderingAllowed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).SetQueueEntryReorderingAllowed(ctx, req.(*SetQueueEntryReorderingAllowedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_SetNewQueueEntriesAlwaysUnskippable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNewQueueEntriesAlwaysUnskippableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).SetNewQueueEntriesAlwaysUnskippable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/SetNewQueueEntriesAlwaysUnskippable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).SetNewQueueEntriesAlwaysUnskippable(ctx, req.(*SetNewQueueEntriesAlwaysUnskippableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_SetSkippingEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSkippingEnabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).SetSkippingEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/SetSkippingEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).SetSkippingEnabled(ctx, req.(*SetSkippingEnabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_SetQueueInsertCursor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetQueueInsertCursorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).SetQueueInsertCursor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/SetQueueInsertCursor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).SetQueueInsertCursor(ctx, req.(*SetQueueInsertCursorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_ClearQueueInsertCursor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearQueueInsertCursorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).ClearQueueInsertCursor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/ClearQueueInsertCursor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).ClearQueueInsertCursor(ctx, req.(*ClearQueueInsertCursorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_ClearUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).ClearUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/ClearUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).ClearUserProfile(ctx, req.(*ClearUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_MarkAsActivelyModerating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkAsActivelyModeratingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).MarkAsActivelyModerating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/MarkAsActivelyModerating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).MarkAsActivelyModerating(ctx, req.(*MarkAsActivelyModeratingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_StopActivelyModerating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopActivelyModeratingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).StopActivelyModerating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/StopActivelyModerating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).StopActivelyModerating(ctx, req.(*StopActivelyModeratingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_AdjustPointsBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdjustPointsBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).AdjustPointsBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/AdjustPointsBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).AdjustPointsBalance(ctx, req.(*AdjustPointsBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_AddVipUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVipUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).AddVipUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/AddVipUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).AddVipUser(ctx, req.(*AddVipUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_RemoveVipUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveVipUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).RemoveVipUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/RemoveVipUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).RemoveVipUser(ctx, req.(*RemoveVipUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_TriggerClientReload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerClientReloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).TriggerClientReload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/TriggerClientReload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).TriggerClientReload(ctx, req.(*TriggerClientReloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_SetMulticurrencyPaymentsEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMulticurrencyPaymentsEnabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).SetMulticurrencyPaymentsEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/SetMulticurrencyPaymentsEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).SetMulticurrencyPaymentsEnabled(ctx, req.(*SetMulticurrencyPaymentsEnabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_InvalidateUserAuthTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidateUserAuthTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).InvalidateUserAuthTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/InvalidateUserAuthTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).InvalidateUserAuthTokens(ctx, req.(*InvalidateUserAuthTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_Applications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).Applications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/Applications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).Applications(ctx, req.(*ApplicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_GetApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).GetApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/GetApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).GetApplication(ctx, req.(*GetApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_UpdateApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Application)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).UpdateApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/UpdateApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).UpdateApplication(ctx, req.(*Application))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_CreateApplicationWithWalletPrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApplicationWithWalletPrefixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).CreateApplicationWithWalletPrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/CreateApplicationWithWalletPrefix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).CreateApplicationWithWalletPrefix(ctx, req.(*CreateApplicationWithWalletPrefixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_CloneApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloneApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).CloneApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/CloneApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).CloneApplication(ctx, req.(*CloneApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_DeleteApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).DeleteApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/DeleteApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).DeleteApplication(ctx, req.(*DeleteApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_ApplicationFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).ApplicationFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/ApplicationFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).ApplicationFiles(ctx, req.(*ApplicationFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_GetApplicationFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).GetApplicationFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/GetApplicationFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).GetApplicationFile(ctx, req.(*GetApplicationFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_UpdateApplicationFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).UpdateApplicationFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/UpdateApplicationFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).UpdateApplicationFile(ctx, req.(*ApplicationFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_CloneApplicationFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloneApplicationFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).CloneApplicationFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/CloneApplicationFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).CloneApplicationFile(ctx, req.(*CloneApplicationFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_DeleteApplicationFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApplicationFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).DeleteApplicationFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/DeleteApplicationFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).DeleteApplicationFile(ctx, req.(*DeleteApplicationFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_LaunchApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LaunchApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).LaunchApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/LaunchApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).LaunchApplication(ctx, req.(*LaunchApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_StopApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).StopApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/StopApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).StopApplication(ctx, req.(*StopApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_ApplicationLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).ApplicationLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/ApplicationLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).ApplicationLog(ctx, req.(*ApplicationLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_ConsumeApplicationLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConsumeApplicationLogRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JungleTVServer).ConsumeApplicationLog(m, &jungleTVConsumeApplicationLogServer{stream})
}

type JungleTV_ConsumeApplicationLogServer interface {
	Send(*ApplicationLogEntryContainer) error
	grpc.ServerStream
}

type jungleTVConsumeApplicationLogServer struct {
	grpc.ServerStream
}

func (x *jungleTVConsumeApplicationLogServer) Send(m *ApplicationLogEntryContainer) error {
	return x.ServerStream.SendMsg(m)
}

func _JungleTV_MonitorRunningApplications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MonitorRunningApplicationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JungleTVServer).MonitorRunningApplications(m, &jungleTVMonitorRunningApplicationsServer{stream})
}

type JungleTV_MonitorRunningApplicationsServer interface {
	Send(*RunningApplications) error
	grpc.ServerStream
}

type jungleTVMonitorRunningApplicationsServer struct {
	grpc.ServerStream
}

func (x *jungleTVMonitorRunningApplicationsServer) Send(m *RunningApplications) error {
	return x.ServerStream.SendMsg(m)
}

func _JungleTV_EvaluateExpressionOnApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluateExpressionOnApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).EvaluateExpressionOnApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/EvaluateExpressionOnApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).EvaluateExpressionOnApplication(ctx, req.(*EvaluateExpressionOnApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_ExportApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).ExportApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/ExportApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).ExportApplication(ctx, req.(*ExportApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_ImportApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).ImportApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/ImportApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).ImportApplication(ctx, req.(*ImportApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_TypeScriptTypeDefinitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TypeScriptTypeDefinitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).TypeScriptTypeDefinitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/TypeScriptTypeDefinitions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).TypeScriptTypeDefinitions(ctx, req.(*TypeScriptTypeDefinitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_ResolveApplicationPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveApplicationPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).ResolveApplicationPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/ResolveApplicationPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).ResolveApplicationPage(ctx, req.(*ResolveApplicationPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_ConsumeApplicationEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConsumeApplicationEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JungleTVServer).ConsumeApplicationEvents(m, &jungleTVConsumeApplicationEventsServer{stream})
}

type JungleTV_ConsumeApplicationEventsServer interface {
	Send(*ApplicationEventUpdate) error
	grpc.ServerStream
}

type jungleTVConsumeApplicationEventsServer struct {
	grpc.ServerStream
}

func (x *jungleTVConsumeApplicationEventsServer) Send(m *ApplicationEventUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _JungleTV_ApplicationServerMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationServerMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).ApplicationServerMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/ApplicationServerMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).ApplicationServerMethod(ctx, req.(*ApplicationServerMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JungleTV_TriggerApplicationEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerApplicationEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JungleTVServer).TriggerApplicationEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jungletv.JungleTV/TriggerApplicationEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JungleTVServer).TriggerApplicationEvent(ctx, req.(*TriggerApplicationEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JungleTV_ServiceDesc is the grpc.ServiceDesc for JungleTV service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JungleTV_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jungletv.JungleTV",
	HandlerType: (*JungleTVServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifySignInSignature",
			Handler:    _JungleTV_VerifySignInSignature_Handler,
		},
		{
			MethodName: "EnqueueMedia",
			Handler:    _JungleTV_EnqueueMedia_Handler,
		},
		{
			MethodName: "RemoveOwnQueueEntry",
			Handler:    _JungleTV_RemoveOwnQueueEntry_Handler,
		},
		{
			MethodName: "MoveQueueEntry",
			Handler:    _JungleTV_MoveQueueEntry_Handler,
		},
		{
			MethodName: "RewardInfo",
			Handler:    _JungleTV_RewardInfo_Handler,
		},
		{
			MethodName: "SubmitActivityChallenge",
			Handler:    _JungleTV_SubmitActivityChallenge_Handler,
		},
		{
			MethodName: "ProduceSegchaChallenge",
			Handler:    _JungleTV_ProduceSegchaChallenge_Handler,
		},
		{
			MethodName: "SendChatMessage",
			Handler:    _JungleTV_SendChatMessage_Handler,
		},
		{
			MethodName: "UserPermissionLevel",
			Handler:    _JungleTV_UserPermissionLevel_Handler,
		},
		{
			MethodName: "GetDocument",
			Handler:    _JungleTV_GetDocument_Handler,
		},
		{
			MethodName: "SetChatNickname",
			Handler:    _JungleTV_SetChatNickname_Handler,
		},
		{
			MethodName: "Withdraw",
			Handler:    _JungleTV_Withdraw_Handler,
		},
		{
			MethodName: "Leaderboards",
			Handler:    _JungleTV_Leaderboards_Handler,
		},
		{
			MethodName: "RewardHistory",
			Handler:    _JungleTV_RewardHistory_Handler,
		},
		{
			MethodName: "WithdrawalHistory",
			Handler:    _JungleTV_WithdrawalHistory_Handler,
		},
		{
			MethodName: "OngoingRaffleInfo",
			Handler:    _JungleTV_OngoingRaffleInfo_Handler,
		},
		{
			MethodName: "RaffleDrawings",
			Handler:    _JungleTV_RaffleDrawings_Handler,
		},
		{
			MethodName: "Connections",
			Handler:    _JungleTV_Connections_Handler,
		},
		{
			MethodName: "CreateConnection",
			Handler:    _JungleTV_CreateConnection_Handler,
		},
		{
			MethodName: "RemoveConnection",
			Handler:    _JungleTV_RemoveConnection_Handler,
		},
		{
			MethodName: "UserProfile",
			Handler:    _JungleTV_UserProfile_Handler,
		},
		{
			MethodName: "UserStats",
			Handler:    _JungleTV_UserStats_Handler,
		},
		{
			MethodName: "SetProfileBiography",
			Handler:    _JungleTV_SetProfileBiography_Handler,
		},
		{
			MethodName: "SetProfileFeaturedMedia",
			Handler:    _JungleTV_SetProfileFeaturedMedia_Handler,
		},
		{
			MethodName: "PlayedMediaHistory",
			Handler:    _JungleTV_PlayedMediaHistory_Handler,
		},
		{
			MethodName: "BlockUser",
			Handler:    _JungleTV_BlockUser_Handler,
		},
		{
			MethodName: "UnblockUser",
			Handler:    _JungleTV_UnblockUser_Handler,
		},
		{
			MethodName: "BlockedUsers",
			Handler:    _JungleTV_BlockedUsers_Handler,
		},
		{
			MethodName: "PointsInfo",
			Handler:    _JungleTV_PointsInfo_Handler,
		},
		{
			MethodName: "PointsTransactions",
			Handler:    _JungleTV_PointsTransactions_Handler,
		},
		{
			MethodName: "ChatGifSearch",
			Handler:    _JungleTV_ChatGifSearch_Handler,
		},
		{
			MethodName: "StartOrExtendSubscription",
			Handler:    _JungleTV_StartOrExtendSubscription_Handler,
		},
		{
			MethodName: "SoundCloudTrackDetails",
			Handler:    _JungleTV_SoundCloudTrackDetails_Handler,
		},
		{
			MethodName: "IncreaseOrReduceSkipThreshold",
			Handler:    _JungleTV_IncreaseOrReduceSkipThreshold_Handler,
		},
		{
			MethodName: "CheckMediaEnqueuingPassword",
			Handler:    _JungleTV_CheckMediaEnqueuingPassword_Handler,
		},
		{
			MethodName: "InvalidateAuthTokens",
			Handler:    _JungleTV_InvalidateAuthTokens_Handler,
		},
		{
			MethodName: "AuthorizationProcessData",
			Handler:    _JungleTV_AuthorizationProcessData_Handler,
		},
		{
			MethodName: "ConsentOrDissentToAuthorization",
			Handler:    _JungleTV_ConsentOrDissentToAuthorization_Handler,
		},
		{
			MethodName: "ForciblyEnqueueTicket",
			Handler:    _JungleTV_ForciblyEnqueueTicket_Handler,
		},
		{
			MethodName: "RemoveQueueEntry",
			Handler:    _JungleTV_RemoveQueueEntry_Handler,
		},
		{
			MethodName: "RemoveChatMessage",
			Handler:    _JungleTV_RemoveChatMessage_Handler,
		},
		{
			MethodName: "SetChatSettings",
			Handler:    _JungleTV_SetChatSettings_Handler,
		},
		{
			MethodName: "SetMediaEnqueuingEnabled",
			Handler:    _JungleTV_SetMediaEnqueuingEnabled_Handler,
		},
		{
			MethodName: "UserBans",
			Handler:    _JungleTV_UserBans_Handler,
		},
		{
			MethodName: "BanUser",
			Handler:    _JungleTV_BanUser_Handler,
		},
		{
			MethodName: "RemoveBan",
			Handler:    _JungleTV_RemoveBan_Handler,
		},
		{
			MethodName: "UserVerifications",
			Handler:    _JungleTV_UserVerifications_Handler,
		},
		{
			MethodName: "VerifyUser",
			Handler:    _JungleTV_VerifyUser_Handler,
		},
		{
			MethodName: "RemoveUserVerification",
			Handler:    _JungleTV_RemoveUserVerification_Handler,
		},
		{
			MethodName: "UserChatMessages",
			Handler:    _JungleTV_UserChatMessages_Handler,
		},
		{
			MethodName: "DisallowedMedia",
			Handler:    _JungleTV_DisallowedMedia_Handler,
		},
		{
			MethodName: "AddDisallowedMedia",
			Handler:    _JungleTV_AddDisallowedMedia_Handler,
		},
		{
			MethodName: "RemoveDisallowedMedia",
			Handler:    _JungleTV_RemoveDisallowedMedia_Handler,
		},
		{
			MethodName: "DisallowedMediaCollections",
			Handler:    _JungleTV_DisallowedMediaCollections_Handler,
		},
		{
			MethodName: "AddDisallowedMediaCollection",
			Handler:    _JungleTV_AddDisallowedMediaCollection_Handler,
		},
		{
			MethodName: "RemoveDisallowedMediaCollection",
			Handler:    _JungleTV_RemoveDisallowedMediaCollection_Handler,
		},
		{
			MethodName: "UpdateDocument",
			Handler:    _JungleTV_UpdateDocument_Handler,
		},
		{
			MethodName: "Documents",
			Handler:    _JungleTV_Documents_Handler,
		},
		{
			MethodName: "SetUserChatNickname",
			Handler:    _JungleTV_SetUserChatNickname_Handler,
		},
		{
			MethodName: "SetPricesMultiplier",
			Handler:    _JungleTV_SetPricesMultiplier_Handler,
		},
		{
			MethodName: "SetMinimumPricesMultiplier",
			Handler:    _JungleTV_SetMinimumPricesMultiplier_Handler,
		},
		{
			MethodName: "SetCrowdfundedSkippingEnabled",
			Handler:    _JungleTV_SetCrowdfundedSkippingEnabled_Handler,
		},
		{
			MethodName: "SetSkipPriceMultiplier",
			Handler:    _JungleTV_SetSkipPriceMultiplier_Handler,
		},
		{
			MethodName: "ConfirmRaffleWinner",
			Handler:    _JungleTV_ConfirmRaffleWinner_Handler,
		},
		{
			MethodName: "CompleteRaffle",
			Handler:    _JungleTV_CompleteRaffle_Handler,
		},
		{
			MethodName: "RedrawRaffle",
			Handler:    _JungleTV_RedrawRaffle_Handler,
		},
		{
			MethodName: "TriggerAnnouncementsNotification",
			Handler:    _JungleTV_TriggerAnnouncementsNotification_Handler,
		},
		{
			MethodName: "SpectatorInfo",
			Handler:    _JungleTV_SpectatorInfo_Handler,
		},
		{
			MethodName: "ResetSpectatorStatus",
			Handler:    _JungleTV_ResetSpectatorStatus_Handler,
		},
		{
			MethodName: "SetOwnQueueEntryRemovalAllowed",
			Handler:    _JungleTV_SetOwnQueueEntryRemovalAllowed_Handler,
		},
		{
			MethodName: "SetQueueEntryReorderingAllowed",
			Handler:    _JungleTV_SetQueueEntryReorderingAllowed_Handler,
		},
		{
			MethodName: "SetNewQueueEntriesAlwaysUnskippable",
			Handler:    _JungleTV_SetNewQueueEntriesAlwaysUnskippable_Handler,
		},
		{
			MethodName: "SetSkippingEnabled",
			Handler:    _JungleTV_SetSkippingEnabled_Handler,
		},
		{
			MethodName: "SetQueueInsertCursor",
			Handler:    _JungleTV_SetQueueInsertCursor_Handler,
		},
		{
			MethodName: "ClearQueueInsertCursor",
			Handler:    _JungleTV_ClearQueueInsertCursor_Handler,
		},
		{
			MethodName: "ClearUserProfile",
			Handler:    _JungleTV_ClearUserProfile_Handler,
		},
		{
			MethodName: "MarkAsActivelyModerating",
			Handler:    _JungleTV_MarkAsActivelyModerating_Handler,
		},
		{
			MethodName: "StopActivelyModerating",
			Handler:    _JungleTV_StopActivelyModerating_Handler,
		},
		{
			MethodName: "AdjustPointsBalance",
			Handler:    _JungleTV_AdjustPointsBalance_Handler,
		},
		{
			MethodName: "AddVipUser",
			Handler:    _JungleTV_AddVipUser_Handler,
		},
		{
			MethodName: "RemoveVipUser",
			Handler:    _JungleTV_RemoveVipUser_Handler,
		},
		{
			MethodName: "TriggerClientReload",
			Handler:    _JungleTV_TriggerClientReload_Handler,
		},
		{
			MethodName: "SetMulticurrencyPaymentsEnabled",
			Handler:    _JungleTV_SetMulticurrencyPaymentsEnabled_Handler,
		},
		{
			MethodName: "InvalidateUserAuthTokens",
			Handler:    _JungleTV_InvalidateUserAuthTokens_Handler,
		},
		{
			MethodName: "Applications",
			Handler:    _JungleTV_Applications_Handler,
		},
		{
			MethodName: "GetApplication",
			Handler:    _JungleTV_GetApplication_Handler,
		},
		{
			MethodName: "UpdateApplication",
			Handler:    _JungleTV_UpdateApplication_Handler,
		},
		{
			MethodName: "CreateApplicationWithWalletPrefix",
			Handler:    _JungleTV_CreateApplicationWithWalletPrefix_Handler,
		},
		{
			MethodName: "CloneApplication",
			Handler:    _JungleTV_CloneApplication_Handler,
		},
		{
			MethodName: "DeleteApplication",
			Handler:    _JungleTV_DeleteApplication_Handler,
		},
		{
			MethodName: "ApplicationFiles",
			Handler:    _JungleTV_ApplicationFiles_Handler,
		},
		{
			MethodName: "GetApplicationFile",
			Handler:    _JungleTV_GetApplicationFile_Handler,
		},
		{
			MethodName: "UpdateApplicationFile",
			Handler:    _JungleTV_UpdateApplicationFile_Handler,
		},
		{
			MethodName: "CloneApplicationFile",
			Handler:    _JungleTV_CloneApplicationFile_Handler,
		},
		{
			MethodName: "DeleteApplicationFile",
			Handler:    _JungleTV_DeleteApplicationFile_Handler,
		},
		{
			MethodName: "LaunchApplication",
			Handler:    _JungleTV_LaunchApplication_Handler,
		},
		{
			MethodName: "StopApplication",
			Handler:    _JungleTV_StopApplication_Handler,
		},
		{
			MethodName: "ApplicationLog",
			Handler:    _JungleTV_ApplicationLog_Handler,
		},
		{
			MethodName: "EvaluateExpressionOnApplication",
			Handler:    _JungleTV_EvaluateExpressionOnApplication_Handler,
		},
		{
			MethodName: "ExportApplication",
			Handler:    _JungleTV_ExportApplication_Handler,
		},
		{
			MethodName: "ImportApplication",
			Handler:    _JungleTV_ImportApplication_Handler,
		},
		{
			MethodName: "TypeScriptTypeDefinitions",
			Handler:    _JungleTV_TypeScriptTypeDefinitions_Handler,
		},
		{
			MethodName: "ResolveApplicationPage",
			Handler:    _JungleTV_ResolveApplicationPage_Handler,
		},
		{
			MethodName: "ApplicationServerMethod",
			Handler:    _JungleTV_ApplicationServerMethod_Handler,
		},
		{
			MethodName: "TriggerApplicationEvent",
			Handler:    _JungleTV_TriggerApplicationEvent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SignIn",
			Handler:       _JungleTV_SignIn_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MonitorTicket",
			Handler:       _JungleTV_MonitorTicket_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ConsumeMedia",
			Handler:       _JungleTV_ConsumeMedia_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MonitorQueue",
			Handler:       _JungleTV_MonitorQueue_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MonitorSkipAndTip",
			Handler:       _JungleTV_MonitorSkipAndTip_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ConsumeChat",
			Handler:       _JungleTV_ConsumeChat_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ConvertBananoToPoints",
			Handler:       _JungleTV_ConvertBananoToPoints_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MonitorMediaEnqueuingPermission",
			Handler:       _JungleTV_MonitorMediaEnqueuingPermission_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AuthorizeApplication",
			Handler:       _JungleTV_AuthorizeApplication_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MonitorModerationStatus",
			Handler:       _JungleTV_MonitorModerationStatus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ConsumeApplicationLog",
			Handler:       _JungleTV_ConsumeApplicationLog_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MonitorRunningApplications",
			Handler:       _JungleTV_MonitorRunningApplications_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ConsumeApplicationEvents",
			Handler:       _JungleTV_ConsumeApplicationEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "jungletv.proto",
}
