// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.25.1
// source: jungletv.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EnqueueMediaTicketStatus int32

const (
	EnqueueMediaTicketStatus_ACTIVE                     EnqueueMediaTicketStatus = 0
	EnqueueMediaTicketStatus_PAID                       EnqueueMediaTicketStatus = 1
	EnqueueMediaTicketStatus_EXPIRED                    EnqueueMediaTicketStatus = 2
	EnqueueMediaTicketStatus_FAILED_INSUFFICIENT_POINTS EnqueueMediaTicketStatus = 3
)

// Enum value maps for EnqueueMediaTicketStatus.
var (
	EnqueueMediaTicketStatus_name = map[int32]string{
		0: "ACTIVE",
		1: "PAID",
		2: "EXPIRED",
		3: "FAILED_INSUFFICIENT_POINTS",
	}
	EnqueueMediaTicketStatus_value = map[string]int32{
		"ACTIVE":                     0,
		"PAID":                       1,
		"EXPIRED":                    2,
		"FAILED_INSUFFICIENT_POINTS": 3,
	}
)

func (x EnqueueMediaTicketStatus) Enum() *EnqueueMediaTicketStatus {
	p := new(EnqueueMediaTicketStatus)
	*p = x
	return p
}

func (x EnqueueMediaTicketStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnqueueMediaTicketStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_jungletv_proto_enumTypes[0].Descriptor()
}

func (EnqueueMediaTicketStatus) Type() protoreflect.EnumType {
	return &file_jungletv_proto_enumTypes[0]
}

func (x EnqueueMediaTicketStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnqueueMediaTicketStatus.Descriptor instead.
func (EnqueueMediaTicketStatus) EnumDescriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{0}
}

type QueueEntryMovementDirection int32

const (
	QueueEntryMovementDirection_QUEUE_ENTRY_MOVEMENT_DIRECTION_UNKNOWN QueueEntryMovementDirection = 0
	QueueEntryMovementDirection_QUEUE_ENTRY_MOVEMENT_DIRECTION_DOWN    QueueEntryMovementDirection = 1
	QueueEntryMovementDirection_QUEUE_ENTRY_MOVEMENT_DIRECTION_UP      QueueEntryMovementDirection = 2
)

// Enum value maps for QueueEntryMovementDirection.
var (
	QueueEntryMovementDirection_name = map[int32]string{
		0: "QUEUE_ENTRY_MOVEMENT_DIRECTION_UNKNOWN",
		1: "QUEUE_ENTRY_MOVEMENT_DIRECTION_DOWN",
		2: "QUEUE_ENTRY_MOVEMENT_DIRECTION_UP",
	}
	QueueEntryMovementDirection_value = map[string]int32{
		"QUEUE_ENTRY_MOVEMENT_DIRECTION_UNKNOWN": 0,
		"QUEUE_ENTRY_MOVEMENT_DIRECTION_DOWN":    1,
		"QUEUE_ENTRY_MOVEMENT_DIRECTION_UP":      2,
	}
)

func (x QueueEntryMovementDirection) Enum() *QueueEntryMovementDirection {
	p := new(QueueEntryMovementDirection)
	*p = x
	return p
}

func (x QueueEntryMovementDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueueEntryMovementDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_jungletv_proto_enumTypes[1].Descriptor()
}

func (QueueEntryMovementDirection) Type() protoreflect.EnumType {
	return &file_jungletv_proto_enumTypes[1]
}

func (x QueueEntryMovementDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueueEntryMovementDirection.Descriptor instead.
func (QueueEntryMovementDirection) EnumDescriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{1}
}

type SkipStatus int32

const (
	SkipStatus_SKIP_STATUS_ALLOWED               SkipStatus = 0
	SkipStatus_SKIP_STATUS_UNSKIPPABLE           SkipStatus = 1
	SkipStatus_SKIP_STATUS_END_OF_MEDIA_PERIOD   SkipStatus = 2
	SkipStatus_SKIP_STATUS_NO_MEDIA              SkipStatus = 3
	SkipStatus_SKIP_STATUS_UNAVAILABLE           SkipStatus = 4
	SkipStatus_SKIP_STATUS_DISABLED              SkipStatus = 5
	SkipStatus_SKIP_STATUS_START_OF_MEDIA_PERIOD SkipStatus = 6
)

// Enum value maps for SkipStatus.
var (
	SkipStatus_name = map[int32]string{
		0: "SKIP_STATUS_ALLOWED",
		1: "SKIP_STATUS_UNSKIPPABLE",
		2: "SKIP_STATUS_END_OF_MEDIA_PERIOD",
		3: "SKIP_STATUS_NO_MEDIA",
		4: "SKIP_STATUS_UNAVAILABLE",
		5: "SKIP_STATUS_DISABLED",
		6: "SKIP_STATUS_START_OF_MEDIA_PERIOD",
	}
	SkipStatus_value = map[string]int32{
		"SKIP_STATUS_ALLOWED":               0,
		"SKIP_STATUS_UNSKIPPABLE":           1,
		"SKIP_STATUS_END_OF_MEDIA_PERIOD":   2,
		"SKIP_STATUS_NO_MEDIA":              3,
		"SKIP_STATUS_UNAVAILABLE":           4,
		"SKIP_STATUS_DISABLED":              5,
		"SKIP_STATUS_START_OF_MEDIA_PERIOD": 6,
	}
)

func (x SkipStatus) Enum() *SkipStatus {
	p := new(SkipStatus)
	*p = x
	return p
}

func (x SkipStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SkipStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_jungletv_proto_enumTypes[2].Descriptor()
}

func (SkipStatus) Type() protoreflect.EnumType {
	return &file_jungletv_proto_enumTypes[2]
}

func (x SkipStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SkipStatus.Descriptor instead.
func (SkipStatus) EnumDescriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{2}
}

type ForcedTicketEnqueueType int32

const (
	ForcedTicketEnqueueType_ENQUEUE   ForcedTicketEnqueueType = 0
	ForcedTicketEnqueueType_PLAY_NEXT ForcedTicketEnqueueType = 1
	ForcedTicketEnqueueType_PLAY_NOW  ForcedTicketEnqueueType = 2
)

// Enum value maps for ForcedTicketEnqueueType.
var (
	ForcedTicketEnqueueType_name = map[int32]string{
		0: "ENQUEUE",
		1: "PLAY_NEXT",
		2: "PLAY_NOW",
	}
	ForcedTicketEnqueueType_value = map[string]int32{
		"ENQUEUE":   0,
		"PLAY_NEXT": 1,
		"PLAY_NOW":  2,
	}
)

func (x ForcedTicketEnqueueType) Enum() *ForcedTicketEnqueueType {
	p := new(ForcedTicketEnqueueType)
	*p = x
	return p
}

func (x ForcedTicketEnqueueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ForcedTicketEnqueueType) Descriptor() protoreflect.EnumDescriptor {
	return file_jungletv_proto_enumTypes[3].Descriptor()
}

func (ForcedTicketEnqueueType) Type() protoreflect.EnumType {
	return &file_jungletv_proto_enumTypes[3]
}

func (x ForcedTicketEnqueueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ForcedTicketEnqueueType.Descriptor instead.
func (ForcedTicketEnqueueType) EnumDescriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{3}
}

type ChatDisabledReason int32

const (
	ChatDisabledReason_UNSPECIFIED           ChatDisabledReason = 0
	ChatDisabledReason_MODERATOR_NOT_PRESENT ChatDisabledReason = 1
)

// Enum value maps for ChatDisabledReason.
var (
	ChatDisabledReason_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "MODERATOR_NOT_PRESENT",
	}
	ChatDisabledReason_value = map[string]int32{
		"UNSPECIFIED":           0,
		"MODERATOR_NOT_PRESENT": 1,
	}
)

func (x ChatDisabledReason) Enum() *ChatDisabledReason {
	p := new(ChatDisabledReason)
	*p = x
	return p
}

func (x ChatDisabledReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatDisabledReason) Descriptor() protoreflect.EnumDescriptor {
	return file_jungletv_proto_enumTypes[4].Descriptor()
}

func (ChatDisabledReason) Type() protoreflect.EnumType {
	return &file_jungletv_proto_enumTypes[4]
}

func (x ChatDisabledReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatDisabledReason.Descriptor instead.
func (ChatDisabledReason) EnumDescriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{4}
}

type AllowedMediaEnqueuingType int32

const (
	AllowedMediaEnqueuingType_DISABLED          AllowedMediaEnqueuingType = 0
	AllowedMediaEnqueuingType_STAFF_ONLY        AllowedMediaEnqueuingType = 1
	AllowedMediaEnqueuingType_ENABLED           AllowedMediaEnqueuingType = 2
	AllowedMediaEnqueuingType_PASSWORD_REQUIRED AllowedMediaEnqueuingType = 3
)

// Enum value maps for AllowedMediaEnqueuingType.
var (
	AllowedMediaEnqueuingType_name = map[int32]string{
		0: "DISABLED",
		1: "STAFF_ONLY",
		2: "ENABLED",
		3: "PASSWORD_REQUIRED",
	}
	AllowedMediaEnqueuingType_value = map[string]int32{
		"DISABLED":          0,
		"STAFF_ONLY":        1,
		"ENABLED":           2,
		"PASSWORD_REQUIRED": 3,
	}
)

func (x AllowedMediaEnqueuingType) Enum() *AllowedMediaEnqueuingType {
	p := new(AllowedMediaEnqueuingType)
	*p = x
	return p
}

func (x AllowedMediaEnqueuingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllowedMediaEnqueuingType) Descriptor() protoreflect.EnumDescriptor {
	return file_jungletv_proto_enumTypes[5].Descriptor()
}

func (AllowedMediaEnqueuingType) Type() protoreflect.EnumType {
	return &file_jungletv_proto_enumTypes[5]
}

func (x AllowedMediaEnqueuingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllowedMediaEnqueuingType.Descriptor instead.
func (AllowedMediaEnqueuingType) EnumDescriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{5}
}

type PermissionLevel int32

const (
	PermissionLevel_UNAUTHENTICATED PermissionLevel = 0
	PermissionLevel_USER            PermissionLevel = 1
	PermissionLevel_APPEDITOR       PermissionLevel = 2
	PermissionLevel_ADMIN           PermissionLevel = 3
)

// Enum value maps for PermissionLevel.
var (
	PermissionLevel_name = map[int32]string{
		0: "UNAUTHENTICATED",
		1: "USER",
		2: "APPEDITOR",
		3: "ADMIN",
	}
	PermissionLevel_value = map[string]int32{
		"UNAUTHENTICATED": 0,
		"USER":            1,
		"APPEDITOR":       2,
		"ADMIN":           3,
	}
)

func (x PermissionLevel) Enum() *PermissionLevel {
	p := new(PermissionLevel)
	*p = x
	return p
}

func (x PermissionLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PermissionLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_jungletv_proto_enumTypes[6].Descriptor()
}

func (PermissionLevel) Type() protoreflect.EnumType {
	return &file_jungletv_proto_enumTypes[6]
}

func (x PermissionLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PermissionLevel.Descriptor instead.
func (PermissionLevel) EnumDescriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{6}
}

type DisallowedMediaType int32

const (
	DisallowedMediaType_UNKNOWN_DISALLOWED_MEDIA_TYPE          DisallowedMediaType = 0
	DisallowedMediaType_DISALLOWED_MEDIA_TYPE_YOUTUBE_VIDEO    DisallowedMediaType = 1
	DisallowedMediaType_DISALLOWED_MEDIA_TYPE_SOUNDCLOUD_TRACK DisallowedMediaType = 2
)

// Enum value maps for DisallowedMediaType.
var (
	DisallowedMediaType_name = map[int32]string{
		0: "UNKNOWN_DISALLOWED_MEDIA_TYPE",
		1: "DISALLOWED_MEDIA_TYPE_YOUTUBE_VIDEO",
		2: "DISALLOWED_MEDIA_TYPE_SOUNDCLOUD_TRACK",
	}
	DisallowedMediaType_value = map[string]int32{
		"UNKNOWN_DISALLOWED_MEDIA_TYPE":          0,
		"DISALLOWED_MEDIA_TYPE_YOUTUBE_VIDEO":    1,
		"DISALLOWED_MEDIA_TYPE_SOUNDCLOUD_TRACK": 2,
	}
)

func (x DisallowedMediaType) Enum() *DisallowedMediaType {
	p := new(DisallowedMediaType)
	*p = x
	return p
}

func (x DisallowedMediaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DisallowedMediaType) Descriptor() protoreflect.EnumDescriptor {
	return file_jungletv_proto_enumTypes[7].Descriptor()
}

func (DisallowedMediaType) Type() protoreflect.EnumType {
	return &file_jungletv_proto_enumTypes[7]
}

func (x DisallowedMediaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DisallowedMediaType.Descriptor instead.
func (DisallowedMediaType) EnumDescriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{7}
}

type DisallowedMediaCollectionType int32

const (
	DisallowedMediaCollectionType_UNKNOWN_DISALLOWED_MEDIA_COLLECTION_TYPE         DisallowedMediaCollectionType = 0
	DisallowedMediaCollectionType_DISALLOWED_MEDIA_COLLECTION_TYPE_YOUTUBE_CHANNEL DisallowedMediaCollectionType = 1
	DisallowedMediaCollectionType_DISALLOWED_MEDIA_COLLECTION_TYPE_SOUNDCLOUD_USER DisallowedMediaCollectionType = 2
)

// Enum value maps for DisallowedMediaCollectionType.
var (
	DisallowedMediaCollectionType_name = map[int32]string{
		0: "UNKNOWN_DISALLOWED_MEDIA_COLLECTION_TYPE",
		1: "DISALLOWED_MEDIA_COLLECTION_TYPE_YOUTUBE_CHANNEL",
		2: "DISALLOWED_MEDIA_COLLECTION_TYPE_SOUNDCLOUD_USER",
	}
	DisallowedMediaCollectionType_value = map[string]int32{
		"UNKNOWN_DISALLOWED_MEDIA_COLLECTION_TYPE":         0,
		"DISALLOWED_MEDIA_COLLECTION_TYPE_YOUTUBE_CHANNEL": 1,
		"DISALLOWED_MEDIA_COLLECTION_TYPE_SOUNDCLOUD_USER": 2,
	}
)

func (x DisallowedMediaCollectionType) Enum() *DisallowedMediaCollectionType {
	p := new(DisallowedMediaCollectionType)
	*p = x
	return p
}

func (x DisallowedMediaCollectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DisallowedMediaCollectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_jungletv_proto_enumTypes[8].Descriptor()
}

func (DisallowedMediaCollectionType) Type() protoreflect.EnumType {
	return &file_jungletv_proto_enumTypes[8]
}

func (x DisallowedMediaCollectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DisallowedMediaCollectionType.Descriptor instead.
func (DisallowedMediaCollectionType) EnumDescriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{8}
}

type LeaderboardPeriod int32

const (
	LeaderboardPeriod_UNKNOWN_LEADERBOARD_PERIOD LeaderboardPeriod = 0
	LeaderboardPeriod_LAST_24_HOURS              LeaderboardPeriod = 1
	LeaderboardPeriod_LAST_7_DAYS                LeaderboardPeriod = 2
	LeaderboardPeriod_LAST_30_DAYS               LeaderboardPeriod = 3
)

// Enum value maps for LeaderboardPeriod.
var (
	LeaderboardPeriod_name = map[int32]string{
		0: "UNKNOWN_LEADERBOARD_PERIOD",
		1: "LAST_24_HOURS",
		2: "LAST_7_DAYS",
		3: "LAST_30_DAYS",
	}
	LeaderboardPeriod_value = map[string]int32{
		"UNKNOWN_LEADERBOARD_PERIOD": 0,
		"LAST_24_HOURS":              1,
		"LAST_7_DAYS":                2,
		"LAST_30_DAYS":               3,
	}
)

func (x LeaderboardPeriod) Enum() *LeaderboardPeriod {
	p := new(LeaderboardPeriod)
	*p = x
	return p
}

func (x LeaderboardPeriod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LeaderboardPeriod) Descriptor() protoreflect.EnumDescriptor {
	return file_jungletv_proto_enumTypes[9].Descriptor()
}

func (LeaderboardPeriod) Type() protoreflect.EnumType {
	return &file_jungletv_proto_enumTypes[9]
}

func (x LeaderboardPeriod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LeaderboardPeriod.Descriptor instead.
func (LeaderboardPeriod) EnumDescriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{9}
}

type RaffleDrawingStatus int32

const (
	RaffleDrawingStatus_UNKNOWN_RAFFLE_DRAWING_STATUS   RaffleDrawingStatus = 0
	RaffleDrawingStatus_RAFFLE_DRAWING_STATUS_ONGOING   RaffleDrawingStatus = 1
	RaffleDrawingStatus_RAFFLE_DRAWING_STATUS_PENDING   RaffleDrawingStatus = 2
	RaffleDrawingStatus_RAFFLE_DRAWING_STATUS_CONFIRMED RaffleDrawingStatus = 3
	RaffleDrawingStatus_RAFFLE_DRAWING_STATUS_VOIDED    RaffleDrawingStatus = 4
	RaffleDrawingStatus_RAFFLE_DRAWING_STATUS_COMPLETE  RaffleDrawingStatus = 5
)

// Enum value maps for RaffleDrawingStatus.
var (
	RaffleDrawingStatus_name = map[int32]string{
		0: "UNKNOWN_RAFFLE_DRAWING_STATUS",
		1: "RAFFLE_DRAWING_STATUS_ONGOING",
		2: "RAFFLE_DRAWING_STATUS_PENDING",
		3: "RAFFLE_DRAWING_STATUS_CONFIRMED",
		4: "RAFFLE_DRAWING_STATUS_VOIDED",
		5: "RAFFLE_DRAWING_STATUS_COMPLETE",
	}
	RaffleDrawingStatus_value = map[string]int32{
		"UNKNOWN_RAFFLE_DRAWING_STATUS":   0,
		"RAFFLE_DRAWING_STATUS_ONGOING":   1,
		"RAFFLE_DRAWING_STATUS_PENDING":   2,
		"RAFFLE_DRAWING_STATUS_CONFIRMED": 3,
		"RAFFLE_DRAWING_STATUS_VOIDED":    4,
		"RAFFLE_DRAWING_STATUS_COMPLETE":  5,
	}
)

func (x RaffleDrawingStatus) Enum() *RaffleDrawingStatus {
	p := new(RaffleDrawingStatus)
	*p = x
	return p
}

func (x RaffleDrawingStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RaffleDrawingStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_jungletv_proto_enumTypes[10].Descriptor()
}

func (RaffleDrawingStatus) Type() protoreflect.EnumType {
	return &file_jungletv_proto_enumTypes[10]
}

func (x RaffleDrawingStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RaffleDrawingStatus.Descriptor instead.
func (RaffleDrawingStatus) EnumDescriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{10}
}

type ConnectionService int32

const (
	ConnectionService_UNKNOWN_CONNECTION_SERVICE ConnectionService = 0
	ConnectionService_CRYPTOMONKEYS              ConnectionService = 1
)

// Enum value maps for ConnectionService.
var (
	ConnectionService_name = map[int32]string{
		0: "UNKNOWN_CONNECTION_SERVICE",
		1: "CRYPTOMONKEYS",
	}
	ConnectionService_value = map[string]int32{
		"UNKNOWN_CONNECTION_SERVICE": 0,
		"CRYPTOMONKEYS":              1,
	}
)

func (x ConnectionService) Enum() *ConnectionService {
	p := new(ConnectionService)
	*p = x
	return p
}

func (x ConnectionService) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectionService) Descriptor() protoreflect.EnumDescriptor {
	return file_jungletv_proto_enumTypes[11].Descriptor()
}

func (ConnectionService) Type() protoreflect.EnumType {
	return &file_jungletv_proto_enumTypes[11]
}

func (x ConnectionService) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectionService.Descriptor instead.
func (ConnectionService) EnumDescriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{11}
}

type PointsTransactionType int32

const (
	PointsTransactionType_UNKNOWN_POINTS_TRANSACTION_TYPE                        PointsTransactionType = 0
	PointsTransactionType_POINTS_TRANSACTION_TYPE_ACTIVITY_CHALLENGE_REWARD      PointsTransactionType = 1
	PointsTransactionType_POINTS_TRANSACTION_TYPE_CHAT_ACTIVITY_REWARD           PointsTransactionType = 2
	PointsTransactionType_POINTS_TRANSACTION_TYPE_MEDIA_ENQUEUED_REWARD          PointsTransactionType = 3
	PointsTransactionType_POINTS_TRANSACTION_TYPE_CHAT_GIF_ATTACHMENT            PointsTransactionType = 4
	PointsTransactionType_POINTS_TRANSACTION_TYPE_MANUAL_ADJUSTMENT              PointsTransactionType = 5
	PointsTransactionType_POINTS_TRANSACTION_TYPE_MEDIA_ENQUEUED_REWARD_REVERSAL PointsTransactionType = 6
	PointsTransactionType_POINTS_TRANSACTION_TYPE_CONVERSION_FROM_BANANO         PointsTransactionType = 7
	PointsTransactionType_POINTS_TRANSACTION_TYPE_QUEUE_ENTRY_REORDERING         PointsTransactionType = 8
	PointsTransactionType_POINTS_TRANSACTION_TYPE_MONTHLY_SUBSCRIPTION           PointsTransactionType = 9
	PointsTransactionType_POINTS_TRANSACTION_TYPE_SKIP_THRESHOLD_REDUCTION       PointsTransactionType = 10
	PointsTransactionType_POINTS_TRANSACTION_TYPE_SKIP_THRESHOLD_INCREASE        PointsTransactionType = 11
	PointsTransactionType_POINTS_TRANSACTION_TYPE_CONCEALED_ENTRY_ENQUEUING      PointsTransactionType = 12
	PointsTransactionType_POINTS_TRANSACTION_TYPE_APPLICATION_DEFINED            PointsTransactionType = 13
)

// Enum value maps for PointsTransactionType.
var (
	PointsTransactionType_name = map[int32]string{
		0:  "UNKNOWN_POINTS_TRANSACTION_TYPE",
		1:  "POINTS_TRANSACTION_TYPE_ACTIVITY_CHALLENGE_REWARD",
		2:  "POINTS_TRANSACTION_TYPE_CHAT_ACTIVITY_REWARD",
		3:  "POINTS_TRANSACTION_TYPE_MEDIA_ENQUEUED_REWARD",
		4:  "POINTS_TRANSACTION_TYPE_CHAT_GIF_ATTACHMENT",
		5:  "POINTS_TRANSACTION_TYPE_MANUAL_ADJUSTMENT",
		6:  "POINTS_TRANSACTION_TYPE_MEDIA_ENQUEUED_REWARD_REVERSAL",
		7:  "POINTS_TRANSACTION_TYPE_CONVERSION_FROM_BANANO",
		8:  "POINTS_TRANSACTION_TYPE_QUEUE_ENTRY_REORDERING",
		9:  "POINTS_TRANSACTION_TYPE_MONTHLY_SUBSCRIPTION",
		10: "POINTS_TRANSACTION_TYPE_SKIP_THRESHOLD_REDUCTION",
		11: "POINTS_TRANSACTION_TYPE_SKIP_THRESHOLD_INCREASE",
		12: "POINTS_TRANSACTION_TYPE_CONCEALED_ENTRY_ENQUEUING",
		13: "POINTS_TRANSACTION_TYPE_APPLICATION_DEFINED",
	}
	PointsTransactionType_value = map[string]int32{
		"UNKNOWN_POINTS_TRANSACTION_TYPE":                        0,
		"POINTS_TRANSACTION_TYPE_ACTIVITY_CHALLENGE_REWARD":      1,
		"POINTS_TRANSACTION_TYPE_CHAT_ACTIVITY_REWARD":           2,
		"POINTS_TRANSACTION_TYPE_MEDIA_ENQUEUED_REWARD":          3,
		"POINTS_TRANSACTION_TYPE_CHAT_GIF_ATTACHMENT":            4,
		"POINTS_TRANSACTION_TYPE_MANUAL_ADJUSTMENT":              5,
		"POINTS_TRANSACTION_TYPE_MEDIA_ENQUEUED_REWARD_REVERSAL": 6,
		"POINTS_TRANSACTION_TYPE_CONVERSION_FROM_BANANO":         7,
		"POINTS_TRANSACTION_TYPE_QUEUE_ENTRY_REORDERING":         8,
		"POINTS_TRANSACTION_TYPE_MONTHLY_SUBSCRIPTION":           9,
		"POINTS_TRANSACTION_TYPE_SKIP_THRESHOLD_REDUCTION":       10,
		"POINTS_TRANSACTION_TYPE_SKIP_THRESHOLD_INCREASE":        11,
		"POINTS_TRANSACTION_TYPE_CONCEALED_ENTRY_ENQUEUING":      12,
		"POINTS_TRANSACTION_TYPE_APPLICATION_DEFINED":            13,
	}
)

func (x PointsTransactionType) Enum() *PointsTransactionType {
	p := new(PointsTransactionType)
	*p = x
	return p
}

func (x PointsTransactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PointsTransactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_jungletv_proto_enumTypes[12].Descriptor()
}

func (PointsTransactionType) Type() protoreflect.EnumType {
	return &file_jungletv_proto_enumTypes[12]
}

func (x PointsTransactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PointsTransactionType.Descriptor instead.
func (PointsTransactionType) EnumDescriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{12}
}

type VipUserAppearance int32

const (
	VipUserAppearance_UNKNOWN_VIP_USER_APPEARANCE       VipUserAppearance = 0
	VipUserAppearance_VIP_USER_APPEARANCE_NORMAL        VipUserAppearance = 1
	VipUserAppearance_VIP_USER_APPEARANCE_MODERATOR     VipUserAppearance = 2
	VipUserAppearance_VIP_USER_APPEARANCE_VIP           VipUserAppearance = 3
	VipUserAppearance_VIP_USER_APPEARANCE_VIP_MODERATOR VipUserAppearance = 4
)

// Enum value maps for VipUserAppearance.
var (
	VipUserAppearance_name = map[int32]string{
		0: "UNKNOWN_VIP_USER_APPEARANCE",
		1: "VIP_USER_APPEARANCE_NORMAL",
		2: "VIP_USER_APPEARANCE_MODERATOR",
		3: "VIP_USER_APPEARANCE_VIP",
		4: "VIP_USER_APPEARANCE_VIP_MODERATOR",
	}
	VipUserAppearance_value = map[string]int32{
		"UNKNOWN_VIP_USER_APPEARANCE":       0,
		"VIP_USER_APPEARANCE_NORMAL":        1,
		"VIP_USER_APPEARANCE_MODERATOR":     2,
		"VIP_USER_APPEARANCE_VIP":           3,
		"VIP_USER_APPEARANCE_VIP_MODERATOR": 4,
	}
)

func (x VipUserAppearance) Enum() *VipUserAppearance {
	p := new(VipUserAppearance)
	*p = x
	return p
}

func (x VipUserAppearance) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VipUserAppearance) Descriptor() protoreflect.EnumDescriptor {
	return file_jungletv_proto_enumTypes[13].Descriptor()
}

func (VipUserAppearance) Type() protoreflect.EnumType {
	return &file_jungletv_proto_enumTypes[13]
}

func (x VipUserAppearance) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VipUserAppearance.Descriptor instead.
func (VipUserAppearance) EnumDescriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{13}
}

type SignInRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardsAddress   string            `protobuf:"bytes,1,opt,name=rewards_address,json=rewardsAddress,proto3" json:"rewards_address,omitempty"`
	ViaSignature     bool              `protobuf:"varint,2,opt,name=via_signature,json=viaSignature,proto3" json:"via_signature,omitempty"`
	OngoingProcessId *string           `protobuf:"bytes,3,opt,name=ongoing_process_id,json=ongoingProcessId,proto3,oneof" json:"ongoing_process_id,omitempty"`
	LabSignInOptions *LabSignInOptions `protobuf:"bytes,4,opt,name=lab_sign_in_options,json=labSignInOptions,proto3,oneof" json:"lab_sign_in_options,omitempty"`
}

func (x *SignInRequest) Reset() {
	*x = SignInRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignInRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignInRequest) ProtoMessage() {}

func (x *SignInRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignInRequest.ProtoReflect.Descriptor instead.
func (*SignInRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{0}
}

func (x *SignInRequest) GetRewardsAddress() string {
	if x != nil {
		return x.RewardsAddress
	}
	return ""
}

func (x *SignInRequest) GetViaSignature() bool {
	if x != nil {
		return x.ViaSignature
	}
	return false
}

func (x *SignInRequest) GetOngoingProcessId() string {
	if x != nil && x.OngoingProcessId != nil {
		return *x.OngoingProcessId
	}
	return ""
}

func (x *SignInRequest) GetLabSignInOptions() *LabSignInOptions {
	if x != nil {
		return x.LabSignInOptions
	}
	return nil
}

type LabSignInOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesiredPermissionLevel PermissionLevel `protobuf:"varint,1,opt,name=desired_permission_level,json=desiredPermissionLevel,proto3,enum=jungletv.PermissionLevel" json:"desired_permission_level,omitempty"`
	Credential             *string         `protobuf:"bytes,2,opt,name=credential,proto3,oneof" json:"credential,omitempty"`
}

func (x *LabSignInOptions) Reset() {
	*x = LabSignInOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabSignInOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabSignInOptions) ProtoMessage() {}

func (x *LabSignInOptions) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabSignInOptions.ProtoReflect.Descriptor instead.
func (*LabSignInOptions) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{1}
}

func (x *LabSignInOptions) GetDesiredPermissionLevel() PermissionLevel {
	if x != nil {
		return x.DesiredPermissionLevel
	}
	return PermissionLevel_UNAUTHENTICATED
}

func (x *LabSignInOptions) GetCredential() string {
	if x != nil && x.Credential != nil {
		return *x.Credential
	}
	return ""
}

type SignInProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Step:
	//	*SignInProgress_Verification
	//	*SignInProgress_Response
	//	*SignInProgress_Expired
	//	*SignInProgress_AccountUnopened
	//	*SignInProgress_MessageToSign
	Step isSignInProgress_Step `protobuf_oneof:"step"`
}

func (x *SignInProgress) Reset() {
	*x = SignInProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignInProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignInProgress) ProtoMessage() {}

func (x *SignInProgress) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignInProgress.ProtoReflect.Descriptor instead.
func (*SignInProgress) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{2}
}

func (m *SignInProgress) GetStep() isSignInProgress_Step {
	if m != nil {
		return m.Step
	}
	return nil
}

func (x *SignInProgress) GetVerification() *SignInVerification {
	if x, ok := x.GetStep().(*SignInProgress_Verification); ok {
		return x.Verification
	}
	return nil
}

func (x *SignInProgress) GetResponse() *SignInResponse {
	if x, ok := x.GetStep().(*SignInProgress_Response); ok {
		return x.Response
	}
	return nil
}

func (x *SignInProgress) GetExpired() *SignInVerificationExpired {
	if x, ok := x.GetStep().(*SignInProgress_Expired); ok {
		return x.Expired
	}
	return nil
}

func (x *SignInProgress) GetAccountUnopened() *SignInAccountUnopened {
	if x, ok := x.GetStep().(*SignInProgress_AccountUnopened); ok {
		return x.AccountUnopened
	}
	return nil
}

func (x *SignInProgress) GetMessageToSign() *SignInMessageToSign {
	if x, ok := x.GetStep().(*SignInProgress_MessageToSign); ok {
		return x.MessageToSign
	}
	return nil
}

type isSignInProgress_Step interface {
	isSignInProgress_Step()
}

type SignInProgress_Verification struct {
	Verification *SignInVerification `protobuf:"bytes,1,opt,name=verification,proto3,oneof"`
}

type SignInProgress_Response struct {
	Response *SignInResponse `protobuf:"bytes,2,opt,name=response,proto3,oneof"`
}

type SignInProgress_Expired struct {
	Expired *SignInVerificationExpired `protobuf:"bytes,3,opt,name=expired,proto3,oneof"`
}

type SignInProgress_AccountUnopened struct {
	AccountUnopened *SignInAccountUnopened `protobuf:"bytes,4,opt,name=account_unopened,json=accountUnopened,proto3,oneof"`
}

type SignInProgress_MessageToSign struct {
	MessageToSign *SignInMessageToSign `protobuf:"bytes,5,opt,name=message_to_sign,json=messageToSign,proto3,oneof"`
}

func (*SignInProgress_Verification) isSignInProgress_Step() {}

func (*SignInProgress_Response) isSignInProgress_Step() {}

func (*SignInProgress_Expired) isSignInProgress_Step() {}

func (*SignInProgress_AccountUnopened) isSignInProgress_Step() {}

func (*SignInProgress_MessageToSign) isSignInProgress_Step() {}

type SignInVerification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessId                         string                 `protobuf:"bytes,1,opt,name=process_id,json=processId,proto3" json:"process_id,omitempty"`
	VerificationRepresentativeAddress string                 `protobuf:"bytes,2,opt,name=verification_representative_address,json=verificationRepresentativeAddress,proto3" json:"verification_representative_address,omitempty"`
	Expiration                        *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=expiration,proto3" json:"expiration,omitempty"`
}

func (x *SignInVerification) Reset() {
	*x = SignInVerification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignInVerification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignInVerification) ProtoMessage() {}

func (x *SignInVerification) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignInVerification.ProtoReflect.Descriptor instead.
func (*SignInVerification) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{3}
}

func (x *SignInVerification) GetProcessId() string {
	if x != nil {
		return x.ProcessId
	}
	return ""
}

func (x *SignInVerification) GetVerificationRepresentativeAddress() string {
	if x != nil {
		return x.VerificationRepresentativeAddress
	}
	return ""
}

func (x *SignInVerification) GetExpiration() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiration
	}
	return nil
}

type SignInAccountUnopened struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SignInAccountUnopened) Reset() {
	*x = SignInAccountUnopened{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignInAccountUnopened) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignInAccountUnopened) ProtoMessage() {}

func (x *SignInAccountUnopened) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignInAccountUnopened.ProtoReflect.Descriptor instead.
func (*SignInAccountUnopened) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{4}
}

type SignInResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthToken       string                 `protobuf:"bytes,1,opt,name=auth_token,json=authToken,proto3" json:"auth_token,omitempty"`
	TokenExpiration *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=token_expiration,json=tokenExpiration,proto3" json:"token_expiration,omitempty"`
}

func (x *SignInResponse) Reset() {
	*x = SignInResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignInResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignInResponse) ProtoMessage() {}

func (x *SignInResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignInResponse.ProtoReflect.Descriptor instead.
func (*SignInResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{5}
}

func (x *SignInResponse) GetAuthToken() string {
	if x != nil {
		return x.AuthToken
	}
	return ""
}

func (x *SignInResponse) GetTokenExpiration() *timestamppb.Timestamp {
	if x != nil {
		return x.TokenExpiration
	}
	return nil
}

type SignInVerificationExpired struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SignInVerificationExpired) Reset() {
	*x = SignInVerificationExpired{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignInVerificationExpired) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignInVerificationExpired) ProtoMessage() {}

func (x *SignInVerificationExpired) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignInVerificationExpired.ProtoReflect.Descriptor instead.
func (*SignInVerificationExpired) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{6}
}

type SignInMessageToSign struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessId     string                 `protobuf:"bytes,1,opt,name=process_id,json=processId,proto3" json:"process_id,omitempty"`
	SubmissionUrl string                 `protobuf:"bytes,2,opt,name=submission_url,json=submissionUrl,proto3" json:"submission_url,omitempty"`
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Expiration    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=expiration,proto3" json:"expiration,omitempty"`
}

func (x *SignInMessageToSign) Reset() {
	*x = SignInMessageToSign{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignInMessageToSign) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignInMessageToSign) ProtoMessage() {}

func (x *SignInMessageToSign) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignInMessageToSign.ProtoReflect.Descriptor instead.
func (*SignInMessageToSign) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{7}
}

func (x *SignInMessageToSign) GetProcessId() string {
	if x != nil {
		return x.ProcessId
	}
	return ""
}

func (x *SignInMessageToSign) GetSubmissionUrl() string {
	if x != nil {
		return x.SubmissionUrl
	}
	return ""
}

func (x *SignInMessageToSign) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SignInMessageToSign) GetExpiration() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiration
	}
	return nil
}

type VerifySignInSignatureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessId    string `protobuf:"bytes,1,opt,name=process_id,json=processId,proto3" json:"process_id,omitempty"`
	SignatureHex string `protobuf:"bytes,2,opt,name=signature_hex,json=signatureHex,proto3" json:"signature_hex,omitempty"`
}

func (x *VerifySignInSignatureRequest) Reset() {
	*x = VerifySignInSignatureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifySignInSignatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifySignInSignatureRequest) ProtoMessage() {}

func (x *VerifySignInSignatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifySignInSignatureRequest.ProtoReflect.Descriptor instead.
func (*VerifySignInSignatureRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{8}
}

func (x *VerifySignInSignatureRequest) GetProcessId() string {
	if x != nil {
		return x.ProcessId
	}
	return ""
}

func (x *VerifySignInSignatureRequest) GetSignatureHex() string {
	if x != nil {
		return x.SignatureHex
	}
	return ""
}

type EnqueueYouTubeVideoData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	StartOffset *durationpb.Duration `protobuf:"bytes,2,opt,name=start_offset,json=startOffset,proto3,oneof" json:"start_offset,omitempty"`
	EndOffset   *durationpb.Duration `protobuf:"bytes,3,opt,name=end_offset,json=endOffset,proto3,oneof" json:"end_offset,omitempty"`
}

func (x *EnqueueYouTubeVideoData) Reset() {
	*x = EnqueueYouTubeVideoData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnqueueYouTubeVideoData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnqueueYouTubeVideoData) ProtoMessage() {}

func (x *EnqueueYouTubeVideoData) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnqueueYouTubeVideoData.ProtoReflect.Descriptor instead.
func (*EnqueueYouTubeVideoData) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{9}
}

func (x *EnqueueYouTubeVideoData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EnqueueYouTubeVideoData) GetStartOffset() *durationpb.Duration {
	if x != nil {
		return x.StartOffset
	}
	return nil
}

func (x *EnqueueYouTubeVideoData) GetEndOffset() *durationpb.Duration {
	if x != nil {
		return x.EndOffset
	}
	return nil
}

type EnqueueSoundCloudTrackData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Permalink   string               `protobuf:"bytes,1,opt,name=permalink,proto3" json:"permalink,omitempty"`
	StartOffset *durationpb.Duration `protobuf:"bytes,2,opt,name=start_offset,json=startOffset,proto3,oneof" json:"start_offset,omitempty"`
	EndOffset   *durationpb.Duration `protobuf:"bytes,3,opt,name=end_offset,json=endOffset,proto3,oneof" json:"end_offset,omitempty"`
}

func (x *EnqueueSoundCloudTrackData) Reset() {
	*x = EnqueueSoundCloudTrackData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnqueueSoundCloudTrackData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnqueueSoundCloudTrackData) ProtoMessage() {}

func (x *EnqueueSoundCloudTrackData) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnqueueSoundCloudTrackData.ProtoReflect.Descriptor instead.
func (*EnqueueSoundCloudTrackData) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{10}
}

func (x *EnqueueSoundCloudTrackData) GetPermalink() string {
	if x != nil {
		return x.Permalink
	}
	return ""
}

func (x *EnqueueSoundCloudTrackData) GetStartOffset() *durationpb.Duration {
	if x != nil {
		return x.StartOffset
	}
	return nil
}

func (x *EnqueueSoundCloudTrackData) GetEndOffset() *durationpb.Duration {
	if x != nil {
		return x.EndOffset
	}
	return nil
}

type EnqueueDocumentData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentId  string                   `protobuf:"bytes,1,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	Duration    *durationpb.Duration     `protobuf:"bytes,2,opt,name=duration,proto3,oneof" json:"duration,omitempty"`
	Title       string                   `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	EnqueueType *ForcedTicketEnqueueType `protobuf:"varint,4,opt,name=enqueue_type,json=enqueueType,proto3,enum=jungletv.ForcedTicketEnqueueType,oneof" json:"enqueue_type,omitempty"`
}

func (x *EnqueueDocumentData) Reset() {
	*x = EnqueueDocumentData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnqueueDocumentData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnqueueDocumentData) ProtoMessage() {}

func (x *EnqueueDocumentData) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnqueueDocumentData.ProtoReflect.Descriptor instead.
func (*EnqueueDocumentData) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{11}
}

func (x *EnqueueDocumentData) GetDocumentId() string {
	if x != nil {
		return x.DocumentId
	}
	return ""
}

func (x *EnqueueDocumentData) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *EnqueueDocumentData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *EnqueueDocumentData) GetEnqueueType() ForcedTicketEnqueueType {
	if x != nil && x.EnqueueType != nil {
		return *x.EnqueueType
	}
	return ForcedTicketEnqueueType_ENQUEUE
}

// EnqueueStubData allows us to prepare and confirm that polymorphism is working properly
type EnqueueStubData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EnqueueStubData) Reset() {
	*x = EnqueueStubData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnqueueStubData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnqueueStubData) ProtoMessage() {}

func (x *EnqueueStubData) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnqueueStubData.ProtoReflect.Descriptor instead.
func (*EnqueueStubData) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{12}
}

type EnqueueMediaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Unskippable bool    `protobuf:"varint,1,opt,name=unskippable,proto3" json:"unskippable,omitempty"`
	Concealed   bool    `protobuf:"varint,2,opt,name=concealed,proto3" json:"concealed,omitempty"`
	Anonymous   bool    `protobuf:"varint,3,opt,name=anonymous,proto3" json:"anonymous,omitempty"`
	Password    *string `protobuf:"bytes,4,opt,name=password,proto3,oneof" json:"password,omitempty"`
	// Types that are assignable to MediaInfo:
	//	*EnqueueMediaRequest_StubData
	//	*EnqueueMediaRequest_YoutubeVideoData
	//	*EnqueueMediaRequest_SoundcloudTrackData
	//	*EnqueueMediaRequest_DocumentData
	MediaInfo isEnqueueMediaRequest_MediaInfo `protobuf_oneof:"media_info"`
}

func (x *EnqueueMediaRequest) Reset() {
	*x = EnqueueMediaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnqueueMediaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnqueueMediaRequest) ProtoMessage() {}

func (x *EnqueueMediaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnqueueMediaRequest.ProtoReflect.Descriptor instead.
func (*EnqueueMediaRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{13}
}

func (x *EnqueueMediaRequest) GetUnskippable() bool {
	if x != nil {
		return x.Unskippable
	}
	return false
}

func (x *EnqueueMediaRequest) GetConcealed() bool {
	if x != nil {
		return x.Concealed
	}
	return false
}

func (x *EnqueueMediaRequest) GetAnonymous() bool {
	if x != nil {
		return x.Anonymous
	}
	return false
}

func (x *EnqueueMediaRequest) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (m *EnqueueMediaRequest) GetMediaInfo() isEnqueueMediaRequest_MediaInfo {
	if m != nil {
		return m.MediaInfo
	}
	return nil
}

func (x *EnqueueMediaRequest) GetStubData() *EnqueueStubData {
	if x, ok := x.GetMediaInfo().(*EnqueueMediaRequest_StubData); ok {
		return x.StubData
	}
	return nil
}

func (x *EnqueueMediaRequest) GetYoutubeVideoData() *EnqueueYouTubeVideoData {
	if x, ok := x.GetMediaInfo().(*EnqueueMediaRequest_YoutubeVideoData); ok {
		return x.YoutubeVideoData
	}
	return nil
}

func (x *EnqueueMediaRequest) GetSoundcloudTrackData() *EnqueueSoundCloudTrackData {
	if x, ok := x.GetMediaInfo().(*EnqueueMediaRequest_SoundcloudTrackData); ok {
		return x.SoundcloudTrackData
	}
	return nil
}

func (x *EnqueueMediaRequest) GetDocumentData() *EnqueueDocumentData {
	if x, ok := x.GetMediaInfo().(*EnqueueMediaRequest_DocumentData); ok {
		return x.DocumentData
	}
	return nil
}

type isEnqueueMediaRequest_MediaInfo interface {
	isEnqueueMediaRequest_MediaInfo()
}

type EnqueueMediaRequest_StubData struct {
	StubData *EnqueueStubData `protobuf:"bytes,5,opt,name=stub_data,json=stubData,proto3,oneof"`
}

type EnqueueMediaRequest_YoutubeVideoData struct {
	YoutubeVideoData *EnqueueYouTubeVideoData `protobuf:"bytes,6,opt,name=youtube_video_data,json=youtubeVideoData,proto3,oneof"`
}

type EnqueueMediaRequest_SoundcloudTrackData struct {
	SoundcloudTrackData *EnqueueSoundCloudTrackData `protobuf:"bytes,7,opt,name=soundcloud_track_data,json=soundcloudTrackData,proto3,oneof"`
}

type EnqueueMediaRequest_DocumentData struct {
	DocumentData *EnqueueDocumentData `protobuf:"bytes,8,opt,name=document_data,json=documentData,proto3,oneof"`
}

func (*EnqueueMediaRequest_StubData) isEnqueueMediaRequest_MediaInfo() {}

func (*EnqueueMediaRequest_YoutubeVideoData) isEnqueueMediaRequest_MediaInfo() {}

func (*EnqueueMediaRequest_SoundcloudTrackData) isEnqueueMediaRequest_MediaInfo() {}

func (*EnqueueMediaRequest_DocumentData) isEnqueueMediaRequest_MediaInfo() {}

type EnqueueMediaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to EnqueueResponse:
	//	*EnqueueMediaResponse_Ticket
	//	*EnqueueMediaResponse_Failure
	EnqueueResponse isEnqueueMediaResponse_EnqueueResponse `protobuf_oneof:"enqueue_response"`
}

func (x *EnqueueMediaResponse) Reset() {
	*x = EnqueueMediaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnqueueMediaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnqueueMediaResponse) ProtoMessage() {}

func (x *EnqueueMediaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnqueueMediaResponse.ProtoReflect.Descriptor instead.
func (*EnqueueMediaResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{14}
}

func (m *EnqueueMediaResponse) GetEnqueueResponse() isEnqueueMediaResponse_EnqueueResponse {
	if m != nil {
		return m.EnqueueResponse
	}
	return nil
}

func (x *EnqueueMediaResponse) GetTicket() *EnqueueMediaTicket {
	if x, ok := x.GetEnqueueResponse().(*EnqueueMediaResponse_Ticket); ok {
		return x.Ticket
	}
	return nil
}

func (x *EnqueueMediaResponse) GetFailure() *EnqueueMediaFailure {
	if x, ok := x.GetEnqueueResponse().(*EnqueueMediaResponse_Failure); ok {
		return x.Failure
	}
	return nil
}

type isEnqueueMediaResponse_EnqueueResponse interface {
	isEnqueueMediaResponse_EnqueueResponse()
}

type EnqueueMediaResponse_Ticket struct {
	Ticket *EnqueueMediaTicket `protobuf:"bytes,1,opt,name=ticket,proto3,oneof"`
}

type EnqueueMediaResponse_Failure struct {
	Failure *EnqueueMediaFailure `protobuf:"bytes,2,opt,name=failure,proto3,oneof"`
}

func (*EnqueueMediaResponse_Ticket) isEnqueueMediaResponse_EnqueueResponse() {}

func (*EnqueueMediaResponse_Failure) isEnqueueMediaResponse_EnqueueResponse() {}

type EnqueueMediaFailure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailureReason string `protobuf:"bytes,1,opt,name=failure_reason,json=failureReason,proto3" json:"failure_reason,omitempty"`
}

func (x *EnqueueMediaFailure) Reset() {
	*x = EnqueueMediaFailure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnqueueMediaFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnqueueMediaFailure) ProtoMessage() {}

func (x *EnqueueMediaFailure) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnqueueMediaFailure.ProtoReflect.Descriptor instead.
func (*EnqueueMediaFailure) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{15}
}

func (x *EnqueueMediaFailure) GetFailureReason() string {
	if x != nil {
		return x.FailureReason
	}
	return ""
}

type EnqueueMediaTicket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                            string                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status                        EnqueueMediaTicketStatus    `protobuf:"varint,2,opt,name=status,proto3,enum=jungletv.EnqueueMediaTicketStatus" json:"status,omitempty"`
	PaymentAddress                string                      `protobuf:"bytes,3,opt,name=payment_address,json=paymentAddress,proto3" json:"payment_address,omitempty"`
	EnqueuePrice                  string                      `protobuf:"bytes,4,opt,name=enqueue_price,json=enqueuePrice,proto3" json:"enqueue_price,omitempty"`
	PlayNextPrice                 string                      `protobuf:"bytes,5,opt,name=play_next_price,json=playNextPrice,proto3" json:"play_next_price,omitempty"`
	PlayNowPrice                  string                      `protobuf:"bytes,6,opt,name=play_now_price,json=playNowPrice,proto3" json:"play_now_price,omitempty"`
	Expiration                    *timestamppb.Timestamp      `protobuf:"bytes,7,opt,name=expiration,proto3" json:"expiration,omitempty"`
	Unskippable                   bool                        `protobuf:"varint,8,opt,name=unskippable,proto3" json:"unskippable,omitempty"`
	Concealed                     bool                        `protobuf:"varint,9,opt,name=concealed,proto3" json:"concealed,omitempty"`
	CurrentlyPlayingIsUnskippable bool                        `protobuf:"varint,10,opt,name=currently_playing_is_unskippable,json=currentlyPlayingIsUnskippable,proto3" json:"currently_playing_is_unskippable,omitempty"`
	Length                        *durationpb.Duration        `protobuf:"bytes,11,opt,name=length,proto3" json:"length,omitempty"`
	Offset                        *durationpb.Duration        `protobuf:"bytes,12,opt,name=offset,proto3" json:"offset,omitempty"`
	ExtraCurrencyPaymentData      []*ExtraCurrencyPaymentData `protobuf:"bytes,13,rep,name=extra_currency_payment_data,json=extraCurrencyPaymentData,proto3" json:"extra_currency_payment_data,omitempty"`
	// Types that are assignable to MediaInfo:
	//	*EnqueueMediaTicket_YoutubeVideoData
	//	*EnqueueMediaTicket_SoundcloudTrackData
	//	*EnqueueMediaTicket_DocumentData
	MediaInfo isEnqueueMediaTicket_MediaInfo `protobuf_oneof:"media_info"`
}

func (x *EnqueueMediaTicket) Reset() {
	*x = EnqueueMediaTicket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnqueueMediaTicket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnqueueMediaTicket) ProtoMessage() {}

func (x *EnqueueMediaTicket) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnqueueMediaTicket.ProtoReflect.Descriptor instead.
func (*EnqueueMediaTicket) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{16}
}

func (x *EnqueueMediaTicket) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EnqueueMediaTicket) GetStatus() EnqueueMediaTicketStatus {
	if x != nil {
		return x.Status
	}
	return EnqueueMediaTicketStatus_ACTIVE
}

func (x *EnqueueMediaTicket) GetPaymentAddress() string {
	if x != nil {
		return x.PaymentAddress
	}
	return ""
}

func (x *EnqueueMediaTicket) GetEnqueuePrice() string {
	if x != nil {
		return x.EnqueuePrice
	}
	return ""
}

func (x *EnqueueMediaTicket) GetPlayNextPrice() string {
	if x != nil {
		return x.PlayNextPrice
	}
	return ""
}

func (x *EnqueueMediaTicket) GetPlayNowPrice() string {
	if x != nil {
		return x.PlayNowPrice
	}
	return ""
}

func (x *EnqueueMediaTicket) GetExpiration() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiration
	}
	return nil
}

func (x *EnqueueMediaTicket) GetUnskippable() bool {
	if x != nil {
		return x.Unskippable
	}
	return false
}

func (x *EnqueueMediaTicket) GetConcealed() bool {
	if x != nil {
		return x.Concealed
	}
	return false
}

func (x *EnqueueMediaTicket) GetCurrentlyPlayingIsUnskippable() bool {
	if x != nil {
		return x.CurrentlyPlayingIsUnskippable
	}
	return false
}

func (x *EnqueueMediaTicket) GetLength() *durationpb.Duration {
	if x != nil {
		return x.Length
	}
	return nil
}

func (x *EnqueueMediaTicket) GetOffset() *durationpb.Duration {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *EnqueueMediaTicket) GetExtraCurrencyPaymentData() []*ExtraCurrencyPaymentData {
	if x != nil {
		return x.ExtraCurrencyPaymentData
	}
	return nil
}

func (m *EnqueueMediaTicket) GetMediaInfo() isEnqueueMediaTicket_MediaInfo {
	if m != nil {
		return m.MediaInfo
	}
	return nil
}

func (x *EnqueueMediaTicket) GetYoutubeVideoData() *QueueYouTubeVideoData {
	if x, ok := x.GetMediaInfo().(*EnqueueMediaTicket_YoutubeVideoData); ok {
		return x.YoutubeVideoData
	}
	return nil
}

func (x *EnqueueMediaTicket) GetSoundcloudTrackData() *QueueSoundCloudTrackData {
	if x, ok := x.GetMediaInfo().(*EnqueueMediaTicket_SoundcloudTrackData); ok {
		return x.SoundcloudTrackData
	}
	return nil
}

func (x *EnqueueMediaTicket) GetDocumentData() *QueueDocumentData {
	if x, ok := x.GetMediaInfo().(*EnqueueMediaTicket_DocumentData); ok {
		return x.DocumentData
	}
	return nil
}

type isEnqueueMediaTicket_MediaInfo interface {
	isEnqueueMediaTicket_MediaInfo()
}

type EnqueueMediaTicket_YoutubeVideoData struct {
	YoutubeVideoData *QueueYouTubeVideoData `protobuf:"bytes,14,opt,name=youtube_video_data,json=youtubeVideoData,proto3,oneof"`
}

type EnqueueMediaTicket_SoundcloudTrackData struct {
	SoundcloudTrackData *QueueSoundCloudTrackData `protobuf:"bytes,15,opt,name=soundcloud_track_data,json=soundcloudTrackData,proto3,oneof"`
}

type EnqueueMediaTicket_DocumentData struct {
	DocumentData *QueueDocumentData `protobuf:"bytes,16,opt,name=document_data,json=documentData,proto3,oneof"`
}

func (*EnqueueMediaTicket_YoutubeVideoData) isEnqueueMediaTicket_MediaInfo() {}

func (*EnqueueMediaTicket_SoundcloudTrackData) isEnqueueMediaTicket_MediaInfo() {}

func (*EnqueueMediaTicket_DocumentData) isEnqueueMediaTicket_MediaInfo() {}

type ExtraCurrencyPaymentData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrencyTicker string `protobuf:"bytes,1,opt,name=currency_ticker,json=currencyTicker,proto3" json:"currency_ticker,omitempty"`
	SwapOrderId    string `protobuf:"bytes,2,opt,name=swap_order_id,json=swapOrderId,proto3" json:"swap_order_id,omitempty"`
	PaymentAddress string `protobuf:"bytes,3,opt,name=payment_address,json=paymentAddress,proto3" json:"payment_address,omitempty"`
	EnqueuePrice   string `protobuf:"bytes,4,opt,name=enqueue_price,json=enqueuePrice,proto3" json:"enqueue_price,omitempty"`
	PlayNextPrice  string `protobuf:"bytes,5,opt,name=play_next_price,json=playNextPrice,proto3" json:"play_next_price,omitempty"`
	PlayNowPrice   string `protobuf:"bytes,6,opt,name=play_now_price,json=playNowPrice,proto3" json:"play_now_price,omitempty"`
}

func (x *ExtraCurrencyPaymentData) Reset() {
	*x = ExtraCurrencyPaymentData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtraCurrencyPaymentData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtraCurrencyPaymentData) ProtoMessage() {}

func (x *ExtraCurrencyPaymentData) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtraCurrencyPaymentData.ProtoReflect.Descriptor instead.
func (*ExtraCurrencyPaymentData) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{17}
}

func (x *ExtraCurrencyPaymentData) GetCurrencyTicker() string {
	if x != nil {
		return x.CurrencyTicker
	}
	return ""
}

func (x *ExtraCurrencyPaymentData) GetSwapOrderId() string {
	if x != nil {
		return x.SwapOrderId
	}
	return ""
}

func (x *ExtraCurrencyPaymentData) GetPaymentAddress() string {
	if x != nil {
		return x.PaymentAddress
	}
	return ""
}

func (x *ExtraCurrencyPaymentData) GetEnqueuePrice() string {
	if x != nil {
		return x.EnqueuePrice
	}
	return ""
}

func (x *ExtraCurrencyPaymentData) GetPlayNextPrice() string {
	if x != nil {
		return x.PlayNextPrice
	}
	return ""
}

func (x *ExtraCurrencyPaymentData) GetPlayNowPrice() string {
	if x != nil {
		return x.PlayNowPrice
	}
	return ""
}

type MonitorTicketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TicketId string `protobuf:"bytes,1,opt,name=ticket_id,json=ticketId,proto3" json:"ticket_id,omitempty"`
}

func (x *MonitorTicketRequest) Reset() {
	*x = MonitorTicketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorTicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorTicketRequest) ProtoMessage() {}

func (x *MonitorTicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorTicketRequest.ProtoReflect.Descriptor instead.
func (*MonitorTicketRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{18}
}

func (x *MonitorTicketRequest) GetTicketId() string {
	if x != nil {
		return x.TicketId
	}
	return ""
}

type RemoveOwnQueueEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RemoveOwnQueueEntryRequest) Reset() {
	*x = RemoveOwnQueueEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveOwnQueueEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveOwnQueueEntryRequest) ProtoMessage() {}

func (x *RemoveOwnQueueEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveOwnQueueEntryRequest.ProtoReflect.Descriptor instead.
func (*RemoveOwnQueueEntryRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{19}
}

func (x *RemoveOwnQueueEntryRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RemoveOwnQueueEntryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveOwnQueueEntryResponse) Reset() {
	*x = RemoveOwnQueueEntryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveOwnQueueEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveOwnQueueEntryResponse) ProtoMessage() {}

func (x *RemoveOwnQueueEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveOwnQueueEntryResponse.ProtoReflect.Descriptor instead.
func (*RemoveOwnQueueEntryResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{20}
}

type MoveQueueEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Direction QueueEntryMovementDirection `protobuf:"varint,2,opt,name=direction,proto3,enum=jungletv.QueueEntryMovementDirection" json:"direction,omitempty"`
}

func (x *MoveQueueEntryRequest) Reset() {
	*x = MoveQueueEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveQueueEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveQueueEntryRequest) ProtoMessage() {}

func (x *MoveQueueEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveQueueEntryRequest.ProtoReflect.Descriptor instead.
func (*MoveQueueEntryRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{21}
}

func (x *MoveQueueEntryRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MoveQueueEntryRequest) GetDirection() QueueEntryMovementDirection {
	if x != nil {
		return x.Direction
	}
	return QueueEntryMovementDirection_QUEUE_ENTRY_MOVEMENT_DIRECTION_UNKNOWN
}

type MoveQueueEntryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MoveQueueEntryResponse) Reset() {
	*x = MoveQueueEntryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveQueueEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveQueueEntryResponse) ProtoMessage() {}

func (x *MoveQueueEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveQueueEntryResponse.ProtoReflect.Descriptor instead.
func (*MoveQueueEntryResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{22}
}

type ConsumeMediaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConsumeMediaRequest) Reset() {
	*x = ConsumeMediaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsumeMediaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumeMediaRequest) ProtoMessage() {}

func (x *ConsumeMediaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumeMediaRequest.ProtoReflect.Descriptor instead.
func (*ConsumeMediaRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{23}
}

// NowPlayingStubData allows us to prepare and confirm that polymorphism is working properly
type NowPlayingStubData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NowPlayingStubData) Reset() {
	*x = NowPlayingStubData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NowPlayingStubData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NowPlayingStubData) ProtoMessage() {}

func (x *NowPlayingStubData) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NowPlayingStubData.ProtoReflect.Descriptor instead.
func (*NowPlayingStubData) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{24}
}

type NowPlayingYouTubeVideoData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NowPlayingYouTubeVideoData) Reset() {
	*x = NowPlayingYouTubeVideoData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NowPlayingYouTubeVideoData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NowPlayingYouTubeVideoData) ProtoMessage() {}

func (x *NowPlayingYouTubeVideoData) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NowPlayingYouTubeVideoData.ProtoReflect.Descriptor instead.
func (*NowPlayingYouTubeVideoData) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{25}
}

func (x *NowPlayingYouTubeVideoData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type NowPlayingSoundCloudTrackData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NowPlayingSoundCloudTrackData) Reset() {
	*x = NowPlayingSoundCloudTrackData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NowPlayingSoundCloudTrackData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NowPlayingSoundCloudTrackData) ProtoMessage() {}

func (x *NowPlayingSoundCloudTrackData) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NowPlayingSoundCloudTrackData.ProtoReflect.Descriptor instead.
func (*NowPlayingSoundCloudTrackData) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{26}
}

func (x *NowPlayingSoundCloudTrackData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type NowPlayingDocumentData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Document  *Document              `protobuf:"bytes,3,opt,name=document,proto3,oneof" json:"document,omitempty"`
}

func (x *NowPlayingDocumentData) Reset() {
	*x = NowPlayingDocumentData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NowPlayingDocumentData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NowPlayingDocumentData) ProtoMessage() {}

func (x *NowPlayingDocumentData) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NowPlayingDocumentData.ProtoReflect.Descriptor instead.
func (*NowPlayingDocumentData) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{27}
}

func (x *NowPlayingDocumentData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NowPlayingDocumentData) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *NowPlayingDocumentData) GetDocument() *Document {
	if x != nil {
		return x.Document
	}
	return nil
}

type NowPlayingApplicationPageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationId string                          `protobuf:"bytes,1,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	PageId        string                          `protobuf:"bytes,2,opt,name=page_id,json=pageId,proto3" json:"page_id,omitempty"`
	PageInfo      *ResolveApplicationPageResponse `protobuf:"bytes,3,opt,name=page_info,json=pageInfo,proto3" json:"page_info,omitempty"`
}

func (x *NowPlayingApplicationPageData) Reset() {
	*x = NowPlayingApplicationPageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NowPlayingApplicationPageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NowPlayingApplicationPageData) ProtoMessage() {}

func (x *NowPlayingApplicationPageData) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NowPlayingApplicationPageData.ProtoReflect.Descriptor instead.
func (*NowPlayingApplicationPageData) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{28}
}

func (x *NowPlayingApplicationPageData) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *NowPlayingApplicationPageData) GetPageId() string {
	if x != nil {
		return x.PageId
	}
	return ""
}

func (x *NowPlayingApplicationPageData) GetPageInfo() *ResolveApplicationPageResponse {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

type MediaConsumptionCheckpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaPresent      bool                 `protobuf:"varint,1,opt,name=media_present,json=mediaPresent,proto3" json:"media_present,omitempty"`
	CurrentPosition   *durationpb.Duration `protobuf:"bytes,2,opt,name=current_position,json=currentPosition,proto3" json:"current_position,omitempty"`
	LiveBroadcast     bool                 `protobuf:"varint,3,opt,name=live_broadcast,json=liveBroadcast,proto3" json:"live_broadcast,omitempty"`
	RequestedBy       *User                `protobuf:"bytes,4,opt,name=requested_by,json=requestedBy,proto3" json:"requested_by,omitempty"`
	RequestCost       string               `protobuf:"bytes,5,opt,name=request_cost,json=requestCost,proto3" json:"request_cost,omitempty"`
	CurrentlyWatching uint32               `protobuf:"varint,6,opt,name=currently_watching,json=currentlyWatching,proto3" json:"currently_watching,omitempty"`
	Reward            *string              `protobuf:"bytes,7,opt,name=reward,proto3,oneof" json:"reward,omitempty"`
	RewardBalance     *string              `protobuf:"bytes,8,opt,name=reward_balance,json=rewardBalance,proto3,oneof" json:"reward_balance,omitempty"`
	ActivityChallenge *ActivityChallenge   `protobuf:"bytes,9,opt,name=activity_challenge,json=activityChallenge,proto3,oneof" json:"activity_challenge,omitempty"`
	// Types that are assignable to MediaInfo:
	//	*MediaConsumptionCheckpoint_StubData
	//	*MediaConsumptionCheckpoint_YoutubeVideoData
	//	*MediaConsumptionCheckpoint_SoundcloudTrackData
	//	*MediaConsumptionCheckpoint_DocumentData
	//	*MediaConsumptionCheckpoint_ApplicationPageData
	MediaInfo            isMediaConsumptionCheckpoint_MediaInfo `protobuf_oneof:"media_info"`
	LatestAnnouncement   *uint32                                `protobuf:"varint,15,opt,name=latest_announcement,json=latestAnnouncement,proto3,oneof" json:"latest_announcement,omitempty"`
	HasChatMention       *bool                                  `protobuf:"varint,16,opt,name=has_chat_mention,json=hasChatMention,proto3,oneof" json:"has_chat_mention,omitempty"`
	MediaTitle           *string                                `protobuf:"bytes,17,opt,name=media_title,json=mediaTitle,proto3,oneof" json:"media_title,omitempty"`
	ConfigurationChanges []*ConfigurationChange                 `protobuf:"bytes,18,rep,name=configuration_changes,json=configurationChanges,proto3" json:"configuration_changes,omitempty"`
}

func (x *MediaConsumptionCheckpoint) Reset() {
	*x = MediaConsumptionCheckpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaConsumptionCheckpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaConsumptionCheckpoint) ProtoMessage() {}

func (x *MediaConsumptionCheckpoint) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaConsumptionCheckpoint.ProtoReflect.Descriptor instead.
func (*MediaConsumptionCheckpoint) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{29}
}

func (x *MediaConsumptionCheckpoint) GetMediaPresent() bool {
	if x != nil {
		return x.MediaPresent
	}
	return false
}

func (x *MediaConsumptionCheckpoint) GetCurrentPosition() *durationpb.Duration {
	if x != nil {
		return x.CurrentPosition
	}
	return nil
}

func (x *MediaConsumptionCheckpoint) GetLiveBroadcast() bool {
	if x != nil {
		return x.LiveBroadcast
	}
	return false
}

func (x *MediaConsumptionCheckpoint) GetRequestedBy() *User {
	if x != nil {
		return x.RequestedBy
	}
	return nil
}

func (x *MediaConsumptionCheckpoint) GetRequestCost() string {
	if x != nil {
		return x.RequestCost
	}
	return ""
}

func (x *MediaConsumptionCheckpoint) GetCurrentlyWatching() uint32 {
	if x != nil {
		return x.CurrentlyWatching
	}
	return 0
}

func (x *MediaConsumptionCheckpoint) GetReward() string {
	if x != nil && x.Reward != nil {
		return *x.Reward
	}
	return ""
}

func (x *MediaConsumptionCheckpoint) GetRewardBalance() string {
	if x != nil && x.RewardBalance != nil {
		return *x.RewardBalance
	}
	return ""
}

func (x *MediaConsumptionCheckpoint) GetActivityChallenge() *ActivityChallenge {
	if x != nil {
		return x.ActivityChallenge
	}
	return nil
}

func (m *MediaConsumptionCheckpoint) GetMediaInfo() isMediaConsumptionCheckpoint_MediaInfo {
	if m != nil {
		return m.MediaInfo
	}
	return nil
}

func (x *MediaConsumptionCheckpoint) GetStubData() *NowPlayingStubData {
	if x, ok := x.GetMediaInfo().(*MediaConsumptionCheckpoint_StubData); ok {
		return x.StubData
	}
	return nil
}

func (x *MediaConsumptionCheckpoint) GetYoutubeVideoData() *NowPlayingYouTubeVideoData {
	if x, ok := x.GetMediaInfo().(*MediaConsumptionCheckpoint_YoutubeVideoData); ok {
		return x.YoutubeVideoData
	}
	return nil
}

func (x *MediaConsumptionCheckpoint) GetSoundcloudTrackData() *NowPlayingSoundCloudTrackData {
	if x, ok := x.GetMediaInfo().(*MediaConsumptionCheckpoint_SoundcloudTrackData); ok {
		return x.SoundcloudTrackData
	}
	return nil
}

func (x *MediaConsumptionCheckpoint) GetDocumentData() *NowPlayingDocumentData {
	if x, ok := x.GetMediaInfo().(*MediaConsumptionCheckpoint_DocumentData); ok {
		return x.DocumentData
	}
	return nil
}

func (x *MediaConsumptionCheckpoint) GetApplicationPageData() *NowPlayingApplicationPageData {
	if x, ok := x.GetMediaInfo().(*MediaConsumptionCheckpoint_ApplicationPageData); ok {
		return x.ApplicationPageData
	}
	return nil
}

func (x *MediaConsumptionCheckpoint) GetLatestAnnouncement() uint32 {
	if x != nil && x.LatestAnnouncement != nil {
		return *x.LatestAnnouncement
	}
	return 0
}

func (x *MediaConsumptionCheckpoint) GetHasChatMention() bool {
	if x != nil && x.HasChatMention != nil {
		return *x.HasChatMention
	}
	return false
}

func (x *MediaConsumptionCheckpoint) GetMediaTitle() string {
	if x != nil && x.MediaTitle != nil {
		return *x.MediaTitle
	}
	return ""
}

func (x *MediaConsumptionCheckpoint) GetConfigurationChanges() []*ConfigurationChange {
	if x != nil {
		return x.ConfigurationChanges
	}
	return nil
}

type isMediaConsumptionCheckpoint_MediaInfo interface {
	isMediaConsumptionCheckpoint_MediaInfo()
}

type MediaConsumptionCheckpoint_StubData struct {
	StubData *NowPlayingStubData `protobuf:"bytes,10,opt,name=stub_data,json=stubData,proto3,oneof"`
}

type MediaConsumptionCheckpoint_YoutubeVideoData struct {
	YoutubeVideoData *NowPlayingYouTubeVideoData `protobuf:"bytes,11,opt,name=youtube_video_data,json=youtubeVideoData,proto3,oneof"`
}

type MediaConsumptionCheckpoint_SoundcloudTrackData struct {
	SoundcloudTrackData *NowPlayingSoundCloudTrackData `protobuf:"bytes,12,opt,name=soundcloud_track_data,json=soundcloudTrackData,proto3,oneof"`
}

type MediaConsumptionCheckpoint_DocumentData struct {
	DocumentData *NowPlayingDocumentData `protobuf:"bytes,13,opt,name=document_data,json=documentData,proto3,oneof"`
}

type MediaConsumptionCheckpoint_ApplicationPageData struct {
	ApplicationPageData *NowPlayingApplicationPageData `protobuf:"bytes,14,opt,name=application_page_data,json=applicationPageData,proto3,oneof"`
}

func (*MediaConsumptionCheckpoint_StubData) isMediaConsumptionCheckpoint_MediaInfo() {}

func (*MediaConsumptionCheckpoint_YoutubeVideoData) isMediaConsumptionCheckpoint_MediaInfo() {}

func (*MediaConsumptionCheckpoint_SoundcloudTrackData) isMediaConsumptionCheckpoint_MediaInfo() {}

func (*MediaConsumptionCheckpoint_DocumentData) isMediaConsumptionCheckpoint_MediaInfo() {}

func (*MediaConsumptionCheckpoint_ApplicationPageData) isMediaConsumptionCheckpoint_MediaInfo() {}

type ActivityChallenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Types        []string               `protobuf:"bytes,2,rep,name=types,proto3" json:"types,omitempty"`
	ChallengedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=challenged_at,json=challengedAt,proto3" json:"challenged_at,omitempty"`
}

func (x *ActivityChallenge) Reset() {
	*x = ActivityChallenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityChallenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityChallenge) ProtoMessage() {}

func (x *ActivityChallenge) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityChallenge.ProtoReflect.Descriptor instead.
func (*ActivityChallenge) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{30}
}

func (x *ActivityChallenge) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ActivityChallenge) GetTypes() []string {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *ActivityChallenge) GetChallengedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ChallengedAt
	}
	return nil
}

type ConfigurationChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ConfigurationChange:
	//	*ConfigurationChange_ApplicationName
	//	*ConfigurationChange_LogoUrl
	//	*ConfigurationChange_FaviconUrl
	//	*ConfigurationChange_OpenSidebarTab
	//	*ConfigurationChange_CloseSidebarTab
	ConfigurationChange isConfigurationChange_ConfigurationChange `protobuf_oneof:"configuration_change"`
}

func (x *ConfigurationChange) Reset() {
	*x = ConfigurationChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationChange) ProtoMessage() {}

func (x *ConfigurationChange) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationChange.ProtoReflect.Descriptor instead.
func (*ConfigurationChange) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{31}
}

func (m *ConfigurationChange) GetConfigurationChange() isConfigurationChange_ConfigurationChange {
	if m != nil {
		return m.ConfigurationChange
	}
	return nil
}

func (x *ConfigurationChange) GetApplicationName() string {
	if x, ok := x.GetConfigurationChange().(*ConfigurationChange_ApplicationName); ok {
		return x.ApplicationName
	}
	return ""
}

func (x *ConfigurationChange) GetLogoUrl() string {
	if x, ok := x.GetConfigurationChange().(*ConfigurationChange_LogoUrl); ok {
		return x.LogoUrl
	}
	return ""
}

func (x *ConfigurationChange) GetFaviconUrl() string {
	if x, ok := x.GetConfigurationChange().(*ConfigurationChange_FaviconUrl); ok {
		return x.FaviconUrl
	}
	return ""
}

func (x *ConfigurationChange) GetOpenSidebarTab() *ConfigurationChangeSidebarTabOpen {
	if x, ok := x.GetConfigurationChange().(*ConfigurationChange_OpenSidebarTab); ok {
		return x.OpenSidebarTab
	}
	return nil
}

func (x *ConfigurationChange) GetCloseSidebarTab() string {
	if x, ok := x.GetConfigurationChange().(*ConfigurationChange_CloseSidebarTab); ok {
		return x.CloseSidebarTab
	}
	return ""
}

type isConfigurationChange_ConfigurationChange interface {
	isConfigurationChange_ConfigurationChange()
}

type ConfigurationChange_ApplicationName struct {
	ApplicationName string `protobuf:"bytes,1,opt,name=application_name,json=applicationName,proto3,oneof"`
}

type ConfigurationChange_LogoUrl struct {
	LogoUrl string `protobuf:"bytes,2,opt,name=logo_url,json=logoUrl,proto3,oneof"`
}

type ConfigurationChange_FaviconUrl struct {
	FaviconUrl string `protobuf:"bytes,3,opt,name=favicon_url,json=faviconUrl,proto3,oneof"`
}

type ConfigurationChange_OpenSidebarTab struct {
	OpenSidebarTab *ConfigurationChangeSidebarTabOpen `protobuf:"bytes,4,opt,name=open_sidebar_tab,json=openSidebarTab,proto3,oneof"`
}

type ConfigurationChange_CloseSidebarTab struct {
	CloseSidebarTab string `protobuf:"bytes,5,opt,name=close_sidebar_tab,json=closeSidebarTab,proto3,oneof"`
}

func (*ConfigurationChange_ApplicationName) isConfigurationChange_ConfigurationChange() {}

func (*ConfigurationChange_LogoUrl) isConfigurationChange_ConfigurationChange() {}

func (*ConfigurationChange_FaviconUrl) isConfigurationChange_ConfigurationChange() {}

func (*ConfigurationChange_OpenSidebarTab) isConfigurationChange_ConfigurationChange() {}

func (*ConfigurationChange_CloseSidebarTab) isConfigurationChange_ConfigurationChange() {}

type ConfigurationChangeSidebarTabOpen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TabId         string `protobuf:"bytes,1,opt,name=tab_id,json=tabId,proto3" json:"tab_id,omitempty"`
	ApplicationId string `protobuf:"bytes,2,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	PageId        string `protobuf:"bytes,3,opt,name=page_id,json=pageId,proto3" json:"page_id,omitempty"`
	TabTitle      string `protobuf:"bytes,4,opt,name=tab_title,json=tabTitle,proto3" json:"tab_title,omitempty"`
	BeforeTabId   string `protobuf:"bytes,5,opt,name=before_tab_id,json=beforeTabId,proto3" json:"before_tab_id,omitempty"`
}

func (x *ConfigurationChangeSidebarTabOpen) Reset() {
	*x = ConfigurationChangeSidebarTabOpen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationChangeSidebarTabOpen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationChangeSidebarTabOpen) ProtoMessage() {}

func (x *ConfigurationChangeSidebarTabOpen) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationChangeSidebarTabOpen.ProtoReflect.Descriptor instead.
func (*ConfigurationChangeSidebarTabOpen) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{32}
}

func (x *ConfigurationChangeSidebarTabOpen) GetTabId() string {
	if x != nil {
		return x.TabId
	}
	return ""
}

func (x *ConfigurationChangeSidebarTabOpen) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *ConfigurationChangeSidebarTabOpen) GetPageId() string {
	if x != nil {
		return x.PageId
	}
	return ""
}

func (x *ConfigurationChangeSidebarTabOpen) GetTabTitle() string {
	if x != nil {
		return x.TabTitle
	}
	return ""
}

func (x *ConfigurationChangeSidebarTabOpen) GetBeforeTabId() string {
	if x != nil {
		return x.BeforeTabId
	}
	return ""
}

type MonitorQueueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MonitorQueueRequest) Reset() {
	*x = MonitorQueueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorQueueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorQueueRequest) ProtoMessage() {}

func (x *MonitorQueueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorQueueRequest.ProtoReflect.Descriptor instead.
func (*MonitorQueueRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{33}
}

type Queue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries                []*QueueEntry          `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
	IsHeartbeat            bool                   `protobuf:"varint,2,opt,name=is_heartbeat,json=isHeartbeat,proto3" json:"is_heartbeat,omitempty"`
	OwnEntryRemovalEnabled bool                   `protobuf:"varint,3,opt,name=own_entry_removal_enabled,json=ownEntryRemovalEnabled,proto3" json:"own_entry_removal_enabled,omitempty"`
	InsertCursor           *string                `protobuf:"bytes,4,opt,name=insert_cursor,json=insertCursor,proto3,oneof" json:"insert_cursor,omitempty"`
	PlayingSince           *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=playing_since,json=playingSince,proto3,oneof" json:"playing_since,omitempty"`
}

func (x *Queue) Reset() {
	*x = Queue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Queue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Queue) ProtoMessage() {}

func (x *Queue) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Queue.ProtoReflect.Descriptor instead.
func (*Queue) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{34}
}

func (x *Queue) GetEntries() []*QueueEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *Queue) GetIsHeartbeat() bool {
	if x != nil {
		return x.IsHeartbeat
	}
	return false
}

func (x *Queue) GetOwnEntryRemovalEnabled() bool {
	if x != nil {
		return x.OwnEntryRemovalEnabled
	}
	return false
}

func (x *Queue) GetInsertCursor() string {
	if x != nil && x.InsertCursor != nil {
		return *x.InsertCursor
	}
	return ""
}

func (x *Queue) GetPlayingSince() *timestamppb.Timestamp {
	if x != nil {
		return x.PlayingSince
	}
	return nil
}

type QueueYouTubeVideoData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title         string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	ThumbnailUrl  string `protobuf:"bytes,3,opt,name=thumbnail_url,json=thumbnailUrl,proto3" json:"thumbnail_url,omitempty"`
	ChannelTitle  string `protobuf:"bytes,4,opt,name=channel_title,json=channelTitle,proto3" json:"channel_title,omitempty"`
	LiveBroadcast bool   `protobuf:"varint,5,opt,name=live_broadcast,json=liveBroadcast,proto3" json:"live_broadcast,omitempty"`
}

func (x *QueueYouTubeVideoData) Reset() {
	*x = QueueYouTubeVideoData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueYouTubeVideoData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueYouTubeVideoData) ProtoMessage() {}

func (x *QueueYouTubeVideoData) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueYouTubeVideoData.ProtoReflect.Descriptor instead.
func (*QueueYouTubeVideoData) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{35}
}

func (x *QueueYouTubeVideoData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QueueYouTubeVideoData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *QueueYouTubeVideoData) GetThumbnailUrl() string {
	if x != nil {
		return x.ThumbnailUrl
	}
	return ""
}

func (x *QueueYouTubeVideoData) GetChannelTitle() string {
	if x != nil {
		return x.ChannelTitle
	}
	return ""
}

func (x *QueueYouTubeVideoData) GetLiveBroadcast() bool {
	if x != nil {
		return x.LiveBroadcast
	}
	return false
}

type QueueSoundCloudTrackData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title        string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	ThumbnailUrl string `protobuf:"bytes,3,opt,name=thumbnail_url,json=thumbnailUrl,proto3" json:"thumbnail_url,omitempty"`
	Uploader     string `protobuf:"bytes,4,opt,name=uploader,proto3" json:"uploader,omitempty"`
	Artist       string `protobuf:"bytes,5,opt,name=artist,proto3" json:"artist,omitempty"`
	Permalink    string `protobuf:"bytes,6,opt,name=permalink,proto3" json:"permalink,omitempty"`
}

func (x *QueueSoundCloudTrackData) Reset() {
	*x = QueueSoundCloudTrackData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueSoundCloudTrackData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueSoundCloudTrackData) ProtoMessage() {}

func (x *QueueSoundCloudTrackData) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueSoundCloudTrackData.ProtoReflect.Descriptor instead.
func (*QueueSoundCloudTrackData) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{36}
}

func (x *QueueSoundCloudTrackData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QueueSoundCloudTrackData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *QueueSoundCloudTrackData) GetThumbnailUrl() string {
	if x != nil {
		return x.ThumbnailUrl
	}
	return ""
}

func (x *QueueSoundCloudTrackData) GetUploader() string {
	if x != nil {
		return x.Uploader
	}
	return ""
}

func (x *QueueSoundCloudTrackData) GetArtist() string {
	if x != nil {
		return x.Artist
	}
	return ""
}

func (x *QueueSoundCloudTrackData) GetPermalink() string {
	if x != nil {
		return x.Permalink
	}
	return ""
}

type QueueDocumentData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *QueueDocumentData) Reset() {
	*x = QueueDocumentData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueDocumentData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueDocumentData) ProtoMessage() {}

func (x *QueueDocumentData) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueDocumentData.ProtoReflect.Descriptor instead.
func (*QueueDocumentData) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{37}
}

func (x *QueueDocumentData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QueueDocumentData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type QueueApplicationPageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationId      string                 `protobuf:"bytes,1,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	ApplicationVersion *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=application_version,json=applicationVersion,proto3" json:"application_version,omitempty"`
	PageId             string                 `protobuf:"bytes,3,opt,name=page_id,json=pageId,proto3" json:"page_id,omitempty"`
	Title              string                 `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	ThumbnailFileName  string                 `protobuf:"bytes,5,opt,name=thumbnail_file_name,json=thumbnailFileName,proto3" json:"thumbnail_file_name,omitempty"`
}

func (x *QueueApplicationPageData) Reset() {
	*x = QueueApplicationPageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueApplicationPageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueApplicationPageData) ProtoMessage() {}

func (x *QueueApplicationPageData) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueApplicationPageData.ProtoReflect.Descriptor instead.
func (*QueueApplicationPageData) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{38}
}

func (x *QueueApplicationPageData) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *QueueApplicationPageData) GetApplicationVersion() *timestamppb.Timestamp {
	if x != nil {
		return x.ApplicationVersion
	}
	return nil
}

func (x *QueueApplicationPageData) GetPageId() string {
	if x != nil {
		return x.PageId
	}
	return ""
}

func (x *QueueApplicationPageData) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *QueueApplicationPageData) GetThumbnailFileName() string {
	if x != nil {
		return x.ThumbnailFileName
	}
	return ""
}

type QueueConcealedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QueueConcealedData) Reset() {
	*x = QueueConcealedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueConcealedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueConcealedData) ProtoMessage() {}

func (x *QueueConcealedData) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueConcealedData.ProtoReflect.Descriptor instead.
func (*QueueConcealedData) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{39}
}

type QueueEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RequestedBy *User                  `protobuf:"bytes,2,opt,name=requested_by,json=requestedBy,proto3" json:"requested_by,omitempty"`
	RequestCost string                 `protobuf:"bytes,3,opt,name=request_cost,json=requestCost,proto3" json:"request_cost,omitempty"`
	RequestedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=requested_at,json=requestedAt,proto3" json:"requested_at,omitempty"`
	Length      *durationpb.Duration   `protobuf:"bytes,5,opt,name=length,proto3,oneof" json:"length,omitempty"`
	Offset      *durationpb.Duration   `protobuf:"bytes,6,opt,name=offset,proto3" json:"offset,omitempty"`
	Unskippable bool                   `protobuf:"varint,7,opt,name=unskippable,proto3" json:"unskippable,omitempty"`
	Concealed   bool                   `protobuf:"varint,8,opt,name=concealed,proto3" json:"concealed,omitempty"`
	CanMoveUp   bool                   `protobuf:"varint,9,opt,name=can_move_up,json=canMoveUp,proto3" json:"can_move_up,omitempty"`
	CanMoveDown bool                   `protobuf:"varint,10,opt,name=can_move_down,json=canMoveDown,proto3" json:"can_move_down,omitempty"`
	// Types that are assignable to MediaInfo:
	//	*QueueEntry_YoutubeVideoData
	//	*QueueEntry_SoundcloudTrackData
	//	*QueueEntry_DocumentData
	//	*QueueEntry_ApplicationPageData
	//	*QueueEntry_ConcealedData
	MediaInfo isQueueEntry_MediaInfo `protobuf_oneof:"media_info"`
}

func (x *QueueEntry) Reset() {
	*x = QueueEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueEntry) ProtoMessage() {}

func (x *QueueEntry) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueEntry.ProtoReflect.Descriptor instead.
func (*QueueEntry) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{40}
}

func (x *QueueEntry) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QueueEntry) GetRequestedBy() *User {
	if x != nil {
		return x.RequestedBy
	}
	return nil
}

func (x *QueueEntry) GetRequestCost() string {
	if x != nil {
		return x.RequestCost
	}
	return ""
}

func (x *QueueEntry) GetRequestedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RequestedAt
	}
	return nil
}

func (x *QueueEntry) GetLength() *durationpb.Duration {
	if x != nil {
		return x.Length
	}
	return nil
}

func (x *QueueEntry) GetOffset() *durationpb.Duration {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *QueueEntry) GetUnskippable() bool {
	if x != nil {
		return x.Unskippable
	}
	return false
}

func (x *QueueEntry) GetConcealed() bool {
	if x != nil {
		return x.Concealed
	}
	return false
}

func (x *QueueEntry) GetCanMoveUp() bool {
	if x != nil {
		return x.CanMoveUp
	}
	return false
}

func (x *QueueEntry) GetCanMoveDown() bool {
	if x != nil {
		return x.CanMoveDown
	}
	return false
}

func (m *QueueEntry) GetMediaInfo() isQueueEntry_MediaInfo {
	if m != nil {
		return m.MediaInfo
	}
	return nil
}

func (x *QueueEntry) GetYoutubeVideoData() *QueueYouTubeVideoData {
	if x, ok := x.GetMediaInfo().(*QueueEntry_YoutubeVideoData); ok {
		return x.YoutubeVideoData
	}
	return nil
}

func (x *QueueEntry) GetSoundcloudTrackData() *QueueSoundCloudTrackData {
	if x, ok := x.GetMediaInfo().(*QueueEntry_SoundcloudTrackData); ok {
		return x.SoundcloudTrackData
	}
	return nil
}

func (x *QueueEntry) GetDocumentData() *QueueDocumentData {
	if x, ok := x.GetMediaInfo().(*QueueEntry_DocumentData); ok {
		return x.DocumentData
	}
	return nil
}

func (x *QueueEntry) GetApplicationPageData() *QueueApplicationPageData {
	if x, ok := x.GetMediaInfo().(*QueueEntry_ApplicationPageData); ok {
		return x.ApplicationPageData
	}
	return nil
}

func (x *QueueEntry) GetConcealedData() *QueueConcealedData {
	if x, ok := x.GetMediaInfo().(*QueueEntry_ConcealedData); ok {
		return x.ConcealedData
	}
	return nil
}

type isQueueEntry_MediaInfo interface {
	isQueueEntry_MediaInfo()
}

type QueueEntry_YoutubeVideoData struct {
	YoutubeVideoData *QueueYouTubeVideoData `protobuf:"bytes,11,opt,name=youtube_video_data,json=youtubeVideoData,proto3,oneof"`
}

type QueueEntry_SoundcloudTrackData struct {
	SoundcloudTrackData *QueueSoundCloudTrackData `protobuf:"bytes,12,opt,name=soundcloud_track_data,json=soundcloudTrackData,proto3,oneof"`
}

type QueueEntry_DocumentData struct {
	DocumentData *QueueDocumentData `protobuf:"bytes,13,opt,name=document_data,json=documentData,proto3,oneof"`
}

type QueueEntry_ApplicationPageData struct {
	ApplicationPageData *QueueApplicationPageData `protobuf:"bytes,14,opt,name=application_page_data,json=applicationPageData,proto3,oneof"`
}

type QueueEntry_ConcealedData struct {
	ConcealedData *QueueConcealedData `protobuf:"bytes,15,opt,name=concealed_data,json=concealedData,proto3,oneof"`
}

func (*QueueEntry_YoutubeVideoData) isQueueEntry_MediaInfo() {}

func (*QueueEntry_SoundcloudTrackData) isQueueEntry_MediaInfo() {}

func (*QueueEntry_DocumentData) isQueueEntry_MediaInfo() {}

func (*QueueEntry_ApplicationPageData) isQueueEntry_MediaInfo() {}

func (*QueueEntry_ConcealedData) isQueueEntry_MediaInfo() {}

type MonitorSkipAndTipRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MonitorSkipAndTipRequest) Reset() {
	*x = MonitorSkipAndTipRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorSkipAndTipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorSkipAndTipRequest) ProtoMessage() {}

func (x *MonitorSkipAndTipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorSkipAndTipRequest.ProtoReflect.Descriptor instead.
func (*MonitorSkipAndTipRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{41}
}

type SkipAndTipStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkipStatus             SkipStatus `protobuf:"varint,1,opt,name=skip_status,json=skipStatus,proto3,enum=jungletv.SkipStatus" json:"skip_status,omitempty"`
	SkipAddress            string     `protobuf:"bytes,2,opt,name=skip_address,json=skipAddress,proto3" json:"skip_address,omitempty"`
	SkipBalance            string     `protobuf:"bytes,3,opt,name=skip_balance,json=skipBalance,proto3" json:"skip_balance,omitempty"`
	SkipThreshold          string     `protobuf:"bytes,4,opt,name=skip_threshold,json=skipThreshold,proto3" json:"skip_threshold,omitempty"`
	SkipThresholdLowerable bool       `protobuf:"varint,5,opt,name=skip_threshold_lowerable,json=skipThresholdLowerable,proto3" json:"skip_threshold_lowerable,omitempty"`
	RainAddress            string     `protobuf:"bytes,6,opt,name=rain_address,json=rainAddress,proto3" json:"rain_address,omitempty"`
	RainBalance            string     `protobuf:"bytes,7,opt,name=rain_balance,json=rainBalance,proto3" json:"rain_balance,omitempty"`
}

func (x *SkipAndTipStatus) Reset() {
	*x = SkipAndTipStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkipAndTipStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkipAndTipStatus) ProtoMessage() {}

func (x *SkipAndTipStatus) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkipAndTipStatus.ProtoReflect.Descriptor instead.
func (*SkipAndTipStatus) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{42}
}

func (x *SkipAndTipStatus) GetSkipStatus() SkipStatus {
	if x != nil {
		return x.SkipStatus
	}
	return SkipStatus_SKIP_STATUS_ALLOWED
}

func (x *SkipAndTipStatus) GetSkipAddress() string {
	if x != nil {
		return x.SkipAddress
	}
	return ""
}

func (x *SkipAndTipStatus) GetSkipBalance() string {
	if x != nil {
		return x.SkipBalance
	}
	return ""
}

func (x *SkipAndTipStatus) GetSkipThreshold() string {
	if x != nil {
		return x.SkipThreshold
	}
	return ""
}

func (x *SkipAndTipStatus) GetSkipThresholdLowerable() bool {
	if x != nil {
		return x.SkipThresholdLowerable
	}
	return false
}

func (x *SkipAndTipStatus) GetRainAddress() string {
	if x != nil {
		return x.RainAddress
	}
	return ""
}

func (x *SkipAndTipStatus) GetRainBalance() string {
	if x != nil {
		return x.RainBalance
	}
	return ""
}

type RewardInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RewardInfoRequest) Reset() {
	*x = RewardInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardInfoRequest) ProtoMessage() {}

func (x *RewardInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardInfoRequest.ProtoReflect.Descriptor instead.
func (*RewardInfoRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{43}
}

type RewardInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardsAddress            string `protobuf:"bytes,1,opt,name=rewards_address,json=rewardsAddress,proto3" json:"rewards_address,omitempty"`
	RewardBalance             string `protobuf:"bytes,2,opt,name=reward_balance,json=rewardBalance,proto3" json:"reward_balance,omitempty"`
	WithdrawalPending         bool   `protobuf:"varint,3,opt,name=withdrawal_pending,json=withdrawalPending,proto3" json:"withdrawal_pending,omitempty"`
	BadRepresentative         bool   `protobuf:"varint,4,opt,name=bad_representative,json=badRepresentative,proto3" json:"bad_representative,omitempty"`
	WithdrawalPositionInQueue *int32 `protobuf:"varint,5,opt,name=withdrawal_position_in_queue,json=withdrawalPositionInQueue,proto3,oneof" json:"withdrawal_position_in_queue,omitempty"`
	WithdrawalsInQueue        *int32 `protobuf:"varint,6,opt,name=withdrawals_in_queue,json=withdrawalsInQueue,proto3,oneof" json:"withdrawals_in_queue,omitempty"`
}

func (x *RewardInfoResponse) Reset() {
	*x = RewardInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardInfoResponse) ProtoMessage() {}

func (x *RewardInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardInfoResponse.ProtoReflect.Descriptor instead.
func (*RewardInfoResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{44}
}

func (x *RewardInfoResponse) GetRewardsAddress() string {
	if x != nil {
		return x.RewardsAddress
	}
	return ""
}

func (x *RewardInfoResponse) GetRewardBalance() string {
	if x != nil {
		return x.RewardBalance
	}
	return ""
}

func (x *RewardInfoResponse) GetWithdrawalPending() bool {
	if x != nil {
		return x.WithdrawalPending
	}
	return false
}

func (x *RewardInfoResponse) GetBadRepresentative() bool {
	if x != nil {
		return x.BadRepresentative
	}
	return false
}

func (x *RewardInfoResponse) GetWithdrawalPositionInQueue() int32 {
	if x != nil && x.WithdrawalPositionInQueue != nil {
		return *x.WithdrawalPositionInQueue
	}
	return 0
}

func (x *RewardInfoResponse) GetWithdrawalsInQueue() int32 {
	if x != nil && x.WithdrawalsInQueue != nil {
		return *x.WithdrawalsInQueue
	}
	return 0
}

type RemoveQueueEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RemoveQueueEntryRequest) Reset() {
	*x = RemoveQueueEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveQueueEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveQueueEntryRequest) ProtoMessage() {}

func (x *RemoveQueueEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveQueueEntryRequest.ProtoReflect.Descriptor instead.
func (*RemoveQueueEntryRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{45}
}

func (x *RemoveQueueEntryRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RemoveQueueEntryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveQueueEntryResponse) Reset() {
	*x = RemoveQueueEntryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveQueueEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveQueueEntryResponse) ProtoMessage() {}

func (x *RemoveQueueEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveQueueEntryResponse.ProtoReflect.Descriptor instead.
func (*RemoveQueueEntryResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{46}
}

type ForciblyEnqueueTicketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EnqueueType ForcedTicketEnqueueType `protobuf:"varint,2,opt,name=enqueue_type,json=enqueueType,proto3,enum=jungletv.ForcedTicketEnqueueType" json:"enqueue_type,omitempty"`
}

func (x *ForciblyEnqueueTicketRequest) Reset() {
	*x = ForciblyEnqueueTicketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForciblyEnqueueTicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForciblyEnqueueTicketRequest) ProtoMessage() {}

func (x *ForciblyEnqueueTicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForciblyEnqueueTicketRequest.ProtoReflect.Descriptor instead.
func (*ForciblyEnqueueTicketRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{47}
}

func (x *ForciblyEnqueueTicketRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ForciblyEnqueueTicketRequest) GetEnqueueType() ForcedTicketEnqueueType {
	if x != nil {
		return x.EnqueueType
	}
	return ForcedTicketEnqueueType_ENQUEUE
}

type ForciblyEnqueueTicketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ForciblyEnqueueTicketResponse) Reset() {
	*x = ForciblyEnqueueTicketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForciblyEnqueueTicketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForciblyEnqueueTicketResponse) ProtoMessage() {}

func (x *ForciblyEnqueueTicketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForciblyEnqueueTicketResponse.ProtoReflect.Descriptor instead.
func (*ForciblyEnqueueTicketResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{48}
}

type SubmitActivityChallengeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Challenge     string   `protobuf:"bytes,1,opt,name=challenge,proto3" json:"challenge,omitempty"`
	Responses     []string `protobuf:"bytes,2,rep,name=responses,proto3" json:"responses,omitempty"`
	Trusted       bool     `protobuf:"varint,3,opt,name=trusted,proto3" json:"trusted,omitempty"`
	ClientVersion string   `protobuf:"bytes,4,opt,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`
}

func (x *SubmitActivityChallengeRequest) Reset() {
	*x = SubmitActivityChallengeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitActivityChallengeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitActivityChallengeRequest) ProtoMessage() {}

func (x *SubmitActivityChallengeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitActivityChallengeRequest.ProtoReflect.Descriptor instead.
func (*SubmitActivityChallengeRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{49}
}

func (x *SubmitActivityChallengeRequest) GetChallenge() string {
	if x != nil {
		return x.Challenge
	}
	return ""
}

func (x *SubmitActivityChallengeRequest) GetResponses() []string {
	if x != nil {
		return x.Responses
	}
	return nil
}

func (x *SubmitActivityChallengeRequest) GetTrusted() bool {
	if x != nil {
		return x.Trusted
	}
	return false
}

func (x *SubmitActivityChallengeRequest) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

type SubmitActivityChallengeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkippedClientIntegrityChecks bool `protobuf:"varint,1,opt,name=skipped_client_integrity_checks,json=skippedClientIntegrityChecks,proto3" json:"skipped_client_integrity_checks,omitempty"`
}

func (x *SubmitActivityChallengeResponse) Reset() {
	*x = SubmitActivityChallengeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitActivityChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitActivityChallengeResponse) ProtoMessage() {}

func (x *SubmitActivityChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitActivityChallengeResponse.ProtoReflect.Descriptor instead.
func (*SubmitActivityChallengeResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{50}
}

func (x *SubmitActivityChallengeResponse) GetSkippedClientIntegrityChecks() bool {
	if x != nil {
		return x.SkippedClientIntegrityChecks
	}
	return false
}

type ConsumeChatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitialHistorySize uint32 `protobuf:"varint,1,opt,name=initial_history_size,json=initialHistorySize,proto3" json:"initial_history_size,omitempty"`
}

func (x *ConsumeChatRequest) Reset() {
	*x = ConsumeChatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsumeChatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumeChatRequest) ProtoMessage() {}

func (x *ConsumeChatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumeChatRequest.ProtoReflect.Descriptor instead.
func (*ConsumeChatRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{51}
}

func (x *ConsumeChatRequest) GetInitialHistorySize() uint32 {
	if x != nil {
		return x.InitialHistorySize
	}
	return 0
}

type ChatUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*ChatUpdateEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *ChatUpdate) Reset() {
	*x = ChatUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatUpdate) ProtoMessage() {}

func (x *ChatUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatUpdate.ProtoReflect.Descriptor instead.
func (*ChatUpdate) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{52}
}

func (x *ChatUpdate) GetEvents() []*ChatUpdateEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type ChatUpdateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//	*ChatUpdateEvent_Disabled
	//	*ChatUpdateEvent_Enabled
	//	*ChatUpdateEvent_MessageCreated
	//	*ChatUpdateEvent_MessageDeleted
	//	*ChatUpdateEvent_Heartbeat
	//	*ChatUpdateEvent_BlockedUserCreated
	//	*ChatUpdateEvent_BlockedUserDeleted
	//	*ChatUpdateEvent_EmoteCreated
	Event isChatUpdateEvent_Event `protobuf_oneof:"event"`
}

func (x *ChatUpdateEvent) Reset() {
	*x = ChatUpdateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatUpdateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatUpdateEvent) ProtoMessage() {}

func (x *ChatUpdateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatUpdateEvent.ProtoReflect.Descriptor instead.
func (*ChatUpdateEvent) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{53}
}

func (m *ChatUpdateEvent) GetEvent() isChatUpdateEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *ChatUpdateEvent) GetDisabled() *ChatDisabledEvent {
	if x, ok := x.GetEvent().(*ChatUpdateEvent_Disabled); ok {
		return x.Disabled
	}
	return nil
}

func (x *ChatUpdateEvent) GetEnabled() *ChatEnabledEvent {
	if x, ok := x.GetEvent().(*ChatUpdateEvent_Enabled); ok {
		return x.Enabled
	}
	return nil
}

func (x *ChatUpdateEvent) GetMessageCreated() *ChatMessageCreatedEvent {
	if x, ok := x.GetEvent().(*ChatUpdateEvent_MessageCreated); ok {
		return x.MessageCreated
	}
	return nil
}

func (x *ChatUpdateEvent) GetMessageDeleted() *ChatMessageDeletedEvent {
	if x, ok := x.GetEvent().(*ChatUpdateEvent_MessageDeleted); ok {
		return x.MessageDeleted
	}
	return nil
}

func (x *ChatUpdateEvent) GetHeartbeat() *ChatHeartbeatEvent {
	if x, ok := x.GetEvent().(*ChatUpdateEvent_Heartbeat); ok {
		return x.Heartbeat
	}
	return nil
}

func (x *ChatUpdateEvent) GetBlockedUserCreated() *ChatBlockedUserCreatedEvent {
	if x, ok := x.GetEvent().(*ChatUpdateEvent_BlockedUserCreated); ok {
		return x.BlockedUserCreated
	}
	return nil
}

func (x *ChatUpdateEvent) GetBlockedUserDeleted() *ChatBlockedUserDeletedEvent {
	if x, ok := x.GetEvent().(*ChatUpdateEvent_BlockedUserDeleted); ok {
		return x.BlockedUserDeleted
	}
	return nil
}

func (x *ChatUpdateEvent) GetEmoteCreated() *ChatEmoteCreatedEvent {
	if x, ok := x.GetEvent().(*ChatUpdateEvent_EmoteCreated); ok {
		return x.EmoteCreated
	}
	return nil
}

type isChatUpdateEvent_Event interface {
	isChatUpdateEvent_Event()
}

type ChatUpdateEvent_Disabled struct {
	Disabled *ChatDisabledEvent `protobuf:"bytes,1,opt,name=disabled,proto3,oneof"`
}

type ChatUpdateEvent_Enabled struct {
	Enabled *ChatEnabledEvent `protobuf:"bytes,2,opt,name=enabled,proto3,oneof"`
}

type ChatUpdateEvent_MessageCreated struct {
	MessageCreated *ChatMessageCreatedEvent `protobuf:"bytes,3,opt,name=message_created,json=messageCreated,proto3,oneof"`
}

type ChatUpdateEvent_MessageDeleted struct {
	MessageDeleted *ChatMessageDeletedEvent `protobuf:"bytes,4,opt,name=message_deleted,json=messageDeleted,proto3,oneof"`
}

type ChatUpdateEvent_Heartbeat struct {
	Heartbeat *ChatHeartbeatEvent `protobuf:"bytes,5,opt,name=heartbeat,proto3,oneof"`
}

type ChatUpdateEvent_BlockedUserCreated struct {
	BlockedUserCreated *ChatBlockedUserCreatedEvent `protobuf:"bytes,6,opt,name=blocked_user_created,json=blockedUserCreated,proto3,oneof"`
}

type ChatUpdateEvent_BlockedUserDeleted struct {
	BlockedUserDeleted *ChatBlockedUserDeletedEvent `protobuf:"bytes,7,opt,name=blocked_user_deleted,json=blockedUserDeleted,proto3,oneof"`
}

type ChatUpdateEvent_EmoteCreated struct {
	EmoteCreated *ChatEmoteCreatedEvent `protobuf:"bytes,8,opt,name=emote_created,json=emoteCreated,proto3,oneof"`
}

func (*ChatUpdateEvent_Disabled) isChatUpdateEvent_Event() {}

func (*ChatUpdateEvent_Enabled) isChatUpdateEvent_Event() {}

func (*ChatUpdateEvent_MessageCreated) isChatUpdateEvent_Event() {}

func (*ChatUpdateEvent_MessageDeleted) isChatUpdateEvent_Event() {}

func (*ChatUpdateEvent_Heartbeat) isChatUpdateEvent_Event() {}

func (*ChatUpdateEvent_BlockedUserCreated) isChatUpdateEvent_Event() {}

func (*ChatUpdateEvent_BlockedUserDeleted) isChatUpdateEvent_Event() {}

func (*ChatUpdateEvent_EmoteCreated) isChatUpdateEvent_Event() {}

type ChatMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Types that are assignable to Message:
	//	*ChatMessage_UserMessage
	//	*ChatMessage_SystemMessage
	Message     isChatMessage_Message    `protobuf_oneof:"message"`
	Reference   *ChatMessage             `protobuf:"bytes,5,opt,name=reference,proto3,oneof" json:"reference,omitempty"`
	Attachments []*ChatMessageAttachment `protobuf:"bytes,6,rep,name=attachments,proto3" json:"attachments,omitempty"`
}

func (x *ChatMessage) Reset() {
	*x = ChatMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessage) ProtoMessage() {}

func (x *ChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessage.ProtoReflect.Descriptor instead.
func (*ChatMessage) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{54}
}

func (x *ChatMessage) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChatMessage) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (m *ChatMessage) GetMessage() isChatMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *ChatMessage) GetUserMessage() *UserChatMessage {
	if x, ok := x.GetMessage().(*ChatMessage_UserMessage); ok {
		return x.UserMessage
	}
	return nil
}

func (x *ChatMessage) GetSystemMessage() *SystemChatMessage {
	if x, ok := x.GetMessage().(*ChatMessage_SystemMessage); ok {
		return x.SystemMessage
	}
	return nil
}

func (x *ChatMessage) GetReference() *ChatMessage {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *ChatMessage) GetAttachments() []*ChatMessageAttachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

type isChatMessage_Message interface {
	isChatMessage_Message()
}

type ChatMessage_UserMessage struct {
	UserMessage *UserChatMessage `protobuf:"bytes,3,opt,name=user_message,json=userMessage,proto3,oneof"`
}

type ChatMessage_SystemMessage struct {
	SystemMessage *SystemChatMessage `protobuf:"bytes,4,opt,name=system_message,json=systemMessage,proto3,oneof"`
}

func (*ChatMessage_UserMessage) isChatMessage_Message() {}

func (*ChatMessage_SystemMessage) isChatMessage_Message() {}

type ChatMessageAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Attachment:
	//	*ChatMessageAttachment_TenorGif
	//	*ChatMessageAttachment_ApplicationPage
	Attachment isChatMessageAttachment_Attachment `protobuf_oneof:"attachment"`
}

func (x *ChatMessageAttachment) Reset() {
	*x = ChatMessageAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatMessageAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessageAttachment) ProtoMessage() {}

func (x *ChatMessageAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessageAttachment.ProtoReflect.Descriptor instead.
func (*ChatMessageAttachment) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{55}
}

func (m *ChatMessageAttachment) GetAttachment() isChatMessageAttachment_Attachment {
	if m != nil {
		return m.Attachment
	}
	return nil
}

func (x *ChatMessageAttachment) GetTenorGif() *ChatMessageTenorGifAttachment {
	if x, ok := x.GetAttachment().(*ChatMessageAttachment_TenorGif); ok {
		return x.TenorGif
	}
	return nil
}

func (x *ChatMessageAttachment) GetApplicationPage() *ChatMessageApplicationPageAttachment {
	if x, ok := x.GetAttachment().(*ChatMessageAttachment_ApplicationPage); ok {
		return x.ApplicationPage
	}
	return nil
}

type isChatMessageAttachment_Attachment interface {
	isChatMessageAttachment_Attachment()
}

type ChatMessageAttachment_TenorGif struct {
	TenorGif *ChatMessageTenorGifAttachment `protobuf:"bytes,1,opt,name=tenor_gif,json=tenorGif,proto3,oneof"`
}

type ChatMessageAttachment_ApplicationPage struct {
	ApplicationPage *ChatMessageApplicationPageAttachment `protobuf:"bytes,2,opt,name=application_page,json=applicationPage,proto3,oneof"`
}

func (*ChatMessageAttachment_TenorGif) isChatMessageAttachment_Attachment() {}

func (*ChatMessageAttachment_ApplicationPage) isChatMessageAttachment_Attachment() {}

type ChatMessageTenorGifAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	VideoUrl         string `protobuf:"bytes,2,opt,name=video_url,json=videoUrl,proto3" json:"video_url,omitempty"`
	VideoFallbackUrl string `protobuf:"bytes,3,opt,name=video_fallback_url,json=videoFallbackUrl,proto3" json:"video_fallback_url,omitempty"`
	Title            string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Width            int32  `protobuf:"varint,5,opt,name=width,proto3" json:"width,omitempty"`
	Height           int32  `protobuf:"varint,6,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *ChatMessageTenorGifAttachment) Reset() {
	*x = ChatMessageTenorGifAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatMessageTenorGifAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessageTenorGifAttachment) ProtoMessage() {}

func (x *ChatMessageTenorGifAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessageTenorGifAttachment.ProtoReflect.Descriptor instead.
func (*ChatMessageTenorGifAttachment) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{56}
}

func (x *ChatMessageTenorGifAttachment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ChatMessageTenorGifAttachment) GetVideoUrl() string {
	if x != nil {
		return x.VideoUrl
	}
	return ""
}

func (x *ChatMessageTenorGifAttachment) GetVideoFallbackUrl() string {
	if x != nil {
		return x.VideoFallbackUrl
	}
	return ""
}

func (x *ChatMessageTenorGifAttachment) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ChatMessageTenorGifAttachment) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *ChatMessageTenorGifAttachment) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type ChatMessageApplicationPageAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationId string                          `protobuf:"bytes,1,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	PageId        string                          `protobuf:"bytes,2,opt,name=page_id,json=pageId,proto3" json:"page_id,omitempty"`
	Height        int32                           `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	PageInfo      *ResolveApplicationPageResponse `protobuf:"bytes,4,opt,name=page_info,json=pageInfo,proto3" json:"page_info,omitempty"`
}

func (x *ChatMessageApplicationPageAttachment) Reset() {
	*x = ChatMessageApplicationPageAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatMessageApplicationPageAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessageApplicationPageAttachment) ProtoMessage() {}

func (x *ChatMessageApplicationPageAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessageApplicationPageAttachment.ProtoReflect.Descriptor instead.
func (*ChatMessageApplicationPageAttachment) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{57}
}

func (x *ChatMessageApplicationPageAttachment) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *ChatMessageApplicationPageAttachment) GetPageId() string {
	if x != nil {
		return x.PageId
	}
	return ""
}

func (x *ChatMessageApplicationPageAttachment) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ChatMessageApplicationPageAttachment) GetPageInfo() *ResolveApplicationPageResponse {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

type UserChatMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Author  *User  `protobuf:"bytes,1,opt,name=author,proto3" json:"author,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *UserChatMessage) Reset() {
	*x = UserChatMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChatMessage) ProtoMessage() {}

func (x *UserChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChatMessage.ProtoReflect.Descriptor instead.
func (*UserChatMessage) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{58}
}

func (x *UserChatMessage) GetAuthor() *User {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *UserChatMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type SystemChatMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *SystemChatMessage) Reset() {
	*x = SystemChatMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemChatMessage) ProtoMessage() {}

func (x *SystemChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemChatMessage.ProtoReflect.Descriptor instead.
func (*SystemChatMessage) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{59}
}

func (x *SystemChatMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type ChatDisabledEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason ChatDisabledReason `protobuf:"varint,1,opt,name=reason,proto3,enum=jungletv.ChatDisabledReason" json:"reason,omitempty"`
}

func (x *ChatDisabledEvent) Reset() {
	*x = ChatDisabledEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatDisabledEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatDisabledEvent) ProtoMessage() {}

func (x *ChatDisabledEvent) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatDisabledEvent.ProtoReflect.Descriptor instead.
func (*ChatDisabledEvent) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{60}
}

func (x *ChatDisabledEvent) GetReason() ChatDisabledReason {
	if x != nil {
		return x.Reason
	}
	return ChatDisabledReason_UNSPECIFIED
}

type ChatEnabledEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChatEnabledEvent) Reset() {
	*x = ChatEnabledEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatEnabledEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatEnabledEvent) ProtoMessage() {}

func (x *ChatEnabledEvent) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatEnabledEvent.ProtoReflect.Descriptor instead.
func (*ChatEnabledEvent) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{61}
}

type ChatMessageCreatedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *ChatMessage `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ChatMessageCreatedEvent) Reset() {
	*x = ChatMessageCreatedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatMessageCreatedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessageCreatedEvent) ProtoMessage() {}

func (x *ChatMessageCreatedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessageCreatedEvent.ProtoReflect.Descriptor instead.
func (*ChatMessageCreatedEvent) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{62}
}

func (x *ChatMessageCreatedEvent) GetMessage() *ChatMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type ChatMessageDeletedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ChatMessageDeletedEvent) Reset() {
	*x = ChatMessageDeletedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatMessageDeletedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessageDeletedEvent) ProtoMessage() {}

func (x *ChatMessageDeletedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessageDeletedEvent.ProtoReflect.Descriptor instead.
func (*ChatMessageDeletedEvent) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{63}
}

func (x *ChatMessageDeletedEvent) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ChatHeartbeatEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequence uint32 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (x *ChatHeartbeatEvent) Reset() {
	*x = ChatHeartbeatEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatHeartbeatEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatHeartbeatEvent) ProtoMessage() {}

func (x *ChatHeartbeatEvent) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatHeartbeatEvent.ProtoReflect.Descriptor instead.
func (*ChatHeartbeatEvent) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{64}
}

func (x *ChatHeartbeatEvent) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

type ChatBlockedUserCreatedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockedUserAddress string `protobuf:"bytes,1,opt,name=blocked_user_address,json=blockedUserAddress,proto3" json:"blocked_user_address,omitempty"`
}

func (x *ChatBlockedUserCreatedEvent) Reset() {
	*x = ChatBlockedUserCreatedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatBlockedUserCreatedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatBlockedUserCreatedEvent) ProtoMessage() {}

func (x *ChatBlockedUserCreatedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatBlockedUserCreatedEvent.ProtoReflect.Descriptor instead.
func (*ChatBlockedUserCreatedEvent) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{65}
}

func (x *ChatBlockedUserCreatedEvent) GetBlockedUserAddress() string {
	if x != nil {
		return x.BlockedUserAddress
	}
	return ""
}

type ChatBlockedUserDeletedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockedUserAddress string `protobuf:"bytes,1,opt,name=blocked_user_address,json=blockedUserAddress,proto3" json:"blocked_user_address,omitempty"`
}

func (x *ChatBlockedUserDeletedEvent) Reset() {
	*x = ChatBlockedUserDeletedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatBlockedUserDeletedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatBlockedUserDeletedEvent) ProtoMessage() {}

func (x *ChatBlockedUserDeletedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatBlockedUserDeletedEvent.ProtoReflect.Descriptor instead.
func (*ChatBlockedUserDeletedEvent) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{66}
}

func (x *ChatBlockedUserDeletedEvent) GetBlockedUserAddress() string {
	if x != nil {
		return x.BlockedUserAddress
	}
	return ""
}

type ChatEmoteCreatedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Shortcode            string `protobuf:"bytes,2,opt,name=shortcode,proto3" json:"shortcode,omitempty"`
	Animated             bool   `protobuf:"varint,3,opt,name=animated,proto3" json:"animated,omitempty"`
	RequiresSubscription bool   `protobuf:"varint,4,opt,name=requires_subscription,json=requiresSubscription,proto3" json:"requires_subscription,omitempty"`
}

func (x *ChatEmoteCreatedEvent) Reset() {
	*x = ChatEmoteCreatedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatEmoteCreatedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatEmoteCreatedEvent) ProtoMessage() {}

func (x *ChatEmoteCreatedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatEmoteCreatedEvent.ProtoReflect.Descriptor instead.
func (*ChatEmoteCreatedEvent) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{67}
}

func (x *ChatEmoteCreatedEvent) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChatEmoteCreatedEvent) GetShortcode() string {
	if x != nil {
		return x.Shortcode
	}
	return ""
}

func (x *ChatEmoteCreatedEvent) GetAnimated() bool {
	if x != nil {
		return x.Animated
	}
	return false
}

func (x *ChatEmoteCreatedEvent) GetRequiresSubscription() bool {
	if x != nil {
		return x.RequiresSubscription
	}
	return false
}

type SendChatMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content            string  `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Trusted            bool    `protobuf:"varint,2,opt,name=trusted,proto3" json:"trusted,omitempty"`
	ReplyReferenceId   *int64  `protobuf:"varint,3,opt,name=reply_reference_id,json=replyReferenceId,proto3,oneof" json:"reply_reference_id,omitempty"`
	TenorGifAttachment *string `protobuf:"bytes,4,opt,name=tenor_gif_attachment,json=tenorGifAttachment,proto3,oneof" json:"tenor_gif_attachment,omitempty"`
}

func (x *SendChatMessageRequest) Reset() {
	*x = SendChatMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendChatMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendChatMessageRequest) ProtoMessage() {}

func (x *SendChatMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendChatMessageRequest.ProtoReflect.Descriptor instead.
func (*SendChatMessageRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{68}
}

func (x *SendChatMessageRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SendChatMessageRequest) GetTrusted() bool {
	if x != nil {
		return x.Trusted
	}
	return false
}

func (x *SendChatMessageRequest) GetReplyReferenceId() int64 {
	if x != nil && x.ReplyReferenceId != nil {
		return *x.ReplyReferenceId
	}
	return 0
}

func (x *SendChatMessageRequest) GetTenorGifAttachment() string {
	if x != nil && x.TenorGifAttachment != nil {
		return *x.TenorGifAttachment
	}
	return ""
}

type SendChatMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SendChatMessageResponse) Reset() {
	*x = SendChatMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendChatMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendChatMessageResponse) ProtoMessage() {}

func (x *SendChatMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendChatMessageResponse.ProtoReflect.Descriptor instead.
func (*SendChatMessageResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{69}
}

func (x *SendChatMessageResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type RemoveChatMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RemoveChatMessageRequest) Reset() {
	*x = RemoveChatMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveChatMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveChatMessageRequest) ProtoMessage() {}

func (x *RemoveChatMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveChatMessageRequest.ProtoReflect.Descriptor instead.
func (*RemoveChatMessageRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{70}
}

func (x *RemoveChatMessageRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type RemoveChatMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveChatMessageResponse) Reset() {
	*x = RemoveChatMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveChatMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveChatMessageResponse) ProtoMessage() {}

func (x *RemoveChatMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveChatMessageResponse.ProtoReflect.Descriptor instead.
func (*RemoveChatMessageResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{71}
}

type SetChatSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled  bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Slowmode bool `protobuf:"varint,2,opt,name=slowmode,proto3" json:"slowmode,omitempty"`
}

func (x *SetChatSettingsRequest) Reset() {
	*x = SetChatSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetChatSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChatSettingsRequest) ProtoMessage() {}

func (x *SetChatSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChatSettingsRequest.ProtoReflect.Descriptor instead.
func (*SetChatSettingsRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{72}
}

func (x *SetChatSettingsRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *SetChatSettingsRequest) GetSlowmode() bool {
	if x != nil {
		return x.Slowmode
	}
	return false
}

type SetChatSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetChatSettingsResponse) Reset() {
	*x = SetChatSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetChatSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChatSettingsResponse) ProtoMessage() {}

func (x *SetChatSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChatSettingsResponse.ProtoReflect.Descriptor instead.
func (*SetChatSettingsResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{73}
}

type BanUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address         string               `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	RemoteAddress   string               `protobuf:"bytes,2,opt,name=remote_address,json=remoteAddress,proto3" json:"remote_address,omitempty"`
	ChatBanned      bool                 `protobuf:"varint,3,opt,name=chat_banned,json=chatBanned,proto3" json:"chat_banned,omitempty"`
	EnqueuingBanned bool                 `protobuf:"varint,4,opt,name=enqueuing_banned,json=enqueuingBanned,proto3" json:"enqueuing_banned,omitempty"`
	RewardsBanned   bool                 `protobuf:"varint,5,opt,name=rewards_banned,json=rewardsBanned,proto3" json:"rewards_banned,omitempty"`
	Reason          string               `protobuf:"bytes,6,opt,name=reason,proto3" json:"reason,omitempty"`
	Duration        *durationpb.Duration `protobuf:"bytes,7,opt,name=duration,proto3,oneof" json:"duration,omitempty"`
}

func (x *BanUserRequest) Reset() {
	*x = BanUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BanUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BanUserRequest) ProtoMessage() {}

func (x *BanUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BanUserRequest.ProtoReflect.Descriptor instead.
func (*BanUserRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{74}
}

func (x *BanUserRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *BanUserRequest) GetRemoteAddress() string {
	if x != nil {
		return x.RemoteAddress
	}
	return ""
}

func (x *BanUserRequest) GetChatBanned() bool {
	if x != nil {
		return x.ChatBanned
	}
	return false
}

func (x *BanUserRequest) GetEnqueuingBanned() bool {
	if x != nil {
		return x.EnqueuingBanned
	}
	return false
}

func (x *BanUserRequest) GetRewardsBanned() bool {
	if x != nil {
		return x.RewardsBanned
	}
	return false
}

func (x *BanUserRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *BanUserRequest) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

type BanUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BanIds []string `protobuf:"bytes,1,rep,name=ban_ids,json=banIds,proto3" json:"ban_ids,omitempty"`
}

func (x *BanUserResponse) Reset() {
	*x = BanUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BanUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BanUserResponse) ProtoMessage() {}

func (x *BanUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BanUserResponse.ProtoReflect.Descriptor instead.
func (*BanUserResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{75}
}

func (x *BanUserResponse) GetBanIds() []string {
	if x != nil {
		return x.BanIds
	}
	return nil
}

type RemoveBanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BanId  string `protobuf:"bytes,1,opt,name=ban_id,json=banId,proto3" json:"ban_id,omitempty"`
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *RemoveBanRequest) Reset() {
	*x = RemoveBanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveBanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveBanRequest) ProtoMessage() {}

func (x *RemoveBanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveBanRequest.ProtoReflect.Descriptor instead.
func (*RemoveBanRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{76}
}

func (x *RemoveBanRequest) GetBanId() string {
	if x != nil {
		return x.BanId
	}
	return ""
}

func (x *RemoveBanRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type RemoveBanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveBanResponse) Reset() {
	*x = RemoveBanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveBanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveBanResponse) ProtoMessage() {}

func (x *RemoveBanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveBanResponse.ProtoReflect.Descriptor instead.
func (*RemoveBanResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{77}
}

type UserBan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BanId           string                 `protobuf:"bytes,1,opt,name=ban_id,json=banId,proto3" json:"ban_id,omitempty"`
	BannedAt        *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=banned_at,json=bannedAt,proto3" json:"banned_at,omitempty"`
	BannedUntil     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=banned_until,json=bannedUntil,proto3,oneof" json:"banned_until,omitempty"`
	User            *User                  `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	RemoteAddress   string                 `protobuf:"bytes,5,opt,name=remote_address,json=remoteAddress,proto3" json:"remote_address,omitempty"`
	ChatBanned      bool                   `protobuf:"varint,6,opt,name=chat_banned,json=chatBanned,proto3" json:"chat_banned,omitempty"`
	EnqueuingBanned bool                   `protobuf:"varint,7,opt,name=enqueuing_banned,json=enqueuingBanned,proto3" json:"enqueuing_banned,omitempty"`
	RewardsBanned   bool                   `protobuf:"varint,8,opt,name=rewards_banned,json=rewardsBanned,proto3" json:"rewards_banned,omitempty"`
	Reason          string                 `protobuf:"bytes,9,opt,name=reason,proto3" json:"reason,omitempty"`
	UnbanReason     *string                `protobuf:"bytes,10,opt,name=unban_reason,json=unbanReason,proto3,oneof" json:"unban_reason,omitempty"`
	BannedBy        *User                  `protobuf:"bytes,11,opt,name=banned_by,json=bannedBy,proto3" json:"banned_by,omitempty"`
}

func (x *UserBan) Reset() {
	*x = UserBan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserBan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBan) ProtoMessage() {}

func (x *UserBan) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBan.ProtoReflect.Descriptor instead.
func (*UserBan) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{78}
}

func (x *UserBan) GetBanId() string {
	if x != nil {
		return x.BanId
	}
	return ""
}

func (x *UserBan) GetBannedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.BannedAt
	}
	return nil
}

func (x *UserBan) GetBannedUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.BannedUntil
	}
	return nil
}

func (x *UserBan) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *UserBan) GetRemoteAddress() string {
	if x != nil {
		return x.RemoteAddress
	}
	return ""
}

func (x *UserBan) GetChatBanned() bool {
	if x != nil {
		return x.ChatBanned
	}
	return false
}

func (x *UserBan) GetEnqueuingBanned() bool {
	if x != nil {
		return x.EnqueuingBanned
	}
	return false
}

func (x *UserBan) GetRewardsBanned() bool {
	if x != nil {
		return x.RewardsBanned
	}
	return false
}

func (x *UserBan) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *UserBan) GetUnbanReason() string {
	if x != nil && x.UnbanReason != nil {
		return *x.UnbanReason
	}
	return ""
}

func (x *UserBan) GetBannedBy() *User {
	if x != nil {
		return x.BannedBy
	}
	return nil
}

type UserBansRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaginationParams *PaginationParameters `protobuf:"bytes,1,opt,name=pagination_params,json=paginationParams,proto3" json:"pagination_params,omitempty"`
	SearchQuery      string                `protobuf:"bytes,2,opt,name=search_query,json=searchQuery,proto3" json:"search_query,omitempty"`
	ActiveOnly       bool                  `protobuf:"varint,3,opt,name=active_only,json=activeOnly,proto3" json:"active_only,omitempty"`
}

func (x *UserBansRequest) Reset() {
	*x = UserBansRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserBansRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBansRequest) ProtoMessage() {}

func (x *UserBansRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBansRequest.ProtoReflect.Descriptor instead.
func (*UserBansRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{79}
}

func (x *UserBansRequest) GetPaginationParams() *PaginationParameters {
	if x != nil {
		return x.PaginationParams
	}
	return nil
}

func (x *UserBansRequest) GetSearchQuery() string {
	if x != nil {
		return x.SearchQuery
	}
	return ""
}

func (x *UserBansRequest) GetActiveOnly() bool {
	if x != nil {
		return x.ActiveOnly
	}
	return false
}

type UserBansResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserBans []*UserBan `protobuf:"bytes,1,rep,name=user_bans,json=userBans,proto3" json:"user_bans,omitempty"`
	Offset   uint64     `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Total    uint64     `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *UserBansResponse) Reset() {
	*x = UserBansResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserBansResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBansResponse) ProtoMessage() {}

func (x *UserBansResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBansResponse.ProtoReflect.Descriptor instead.
func (*UserBansResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{80}
}

func (x *UserBansResponse) GetUserBans() []*UserBan {
	if x != nil {
		return x.UserBans
	}
	return nil
}

func (x *UserBansResponse) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *UserBansResponse) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type VerifyUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address                       string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	SkipClientIntegrityChecks     bool   `protobuf:"varint,2,opt,name=skip_client_integrity_checks,json=skipClientIntegrityChecks,proto3" json:"skip_client_integrity_checks,omitempty"`
	SkipIpAddressReputationChecks bool   `protobuf:"varint,3,opt,name=skip_ip_address_reputation_checks,json=skipIpAddressReputationChecks,proto3" json:"skip_ip_address_reputation_checks,omitempty"`
	ReduceHardChallengeFrequency  bool   `protobuf:"varint,4,opt,name=reduce_hard_challenge_frequency,json=reduceHardChallengeFrequency,proto3" json:"reduce_hard_challenge_frequency,omitempty"`
	Reason                        string `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *VerifyUserRequest) Reset() {
	*x = VerifyUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyUserRequest) ProtoMessage() {}

func (x *VerifyUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyUserRequest.ProtoReflect.Descriptor instead.
func (*VerifyUserRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{81}
}

func (x *VerifyUserRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *VerifyUserRequest) GetSkipClientIntegrityChecks() bool {
	if x != nil {
		return x.SkipClientIntegrityChecks
	}
	return false
}

func (x *VerifyUserRequest) GetSkipIpAddressReputationChecks() bool {
	if x != nil {
		return x.SkipIpAddressReputationChecks
	}
	return false
}

func (x *VerifyUserRequest) GetReduceHardChallengeFrequency() bool {
	if x != nil {
		return x.ReduceHardChallengeFrequency
	}
	return false
}

func (x *VerifyUserRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type VerifyUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerificationId string `protobuf:"bytes,1,opt,name=verification_id,json=verificationId,proto3" json:"verification_id,omitempty"`
}

func (x *VerifyUserResponse) Reset() {
	*x = VerifyUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyUserResponse) ProtoMessage() {}

func (x *VerifyUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyUserResponse.ProtoReflect.Descriptor instead.
func (*VerifyUserResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{82}
}

func (x *VerifyUserResponse) GetVerificationId() string {
	if x != nil {
		return x.VerificationId
	}
	return ""
}

type RemoveUserVerificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerificationId string `protobuf:"bytes,1,opt,name=verification_id,json=verificationId,proto3" json:"verification_id,omitempty"`
	Reason         string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *RemoveUserVerificationRequest) Reset() {
	*x = RemoveUserVerificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveUserVerificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveUserVerificationRequest) ProtoMessage() {}

func (x *RemoveUserVerificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveUserVerificationRequest.ProtoReflect.Descriptor instead.
func (*RemoveUserVerificationRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{83}
}

func (x *RemoveUserVerificationRequest) GetVerificationId() string {
	if x != nil {
		return x.VerificationId
	}
	return ""
}

func (x *RemoveUserVerificationRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type RemoveUserVerificationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveUserVerificationResponse) Reset() {
	*x = RemoveUserVerificationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveUserVerificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveUserVerificationResponse) ProtoMessage() {}

func (x *RemoveUserVerificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveUserVerificationResponse.ProtoReflect.Descriptor instead.
func (*RemoveUserVerificationResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{84}
}

type UserVerification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt                     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	User                          *User                  `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	SkipClientIntegrityChecks     bool                   `protobuf:"varint,4,opt,name=skip_client_integrity_checks,json=skipClientIntegrityChecks,proto3" json:"skip_client_integrity_checks,omitempty"`
	SkipIpAddressReputationChecks bool                   `protobuf:"varint,5,opt,name=skip_ip_address_reputation_checks,json=skipIpAddressReputationChecks,proto3" json:"skip_ip_address_reputation_checks,omitempty"`
	ReduceHardChallengeFrequency  bool                   `protobuf:"varint,6,opt,name=reduce_hard_challenge_frequency,json=reduceHardChallengeFrequency,proto3" json:"reduce_hard_challenge_frequency,omitempty"`
	Reason                        string                 `protobuf:"bytes,7,opt,name=reason,proto3" json:"reason,omitempty"`
	VerifiedBy                    *User                  `protobuf:"bytes,8,opt,name=verified_by,json=verifiedBy,proto3" json:"verified_by,omitempty"`
}

func (x *UserVerification) Reset() {
	*x = UserVerification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserVerification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserVerification) ProtoMessage() {}

func (x *UserVerification) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserVerification.ProtoReflect.Descriptor instead.
func (*UserVerification) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{85}
}

func (x *UserVerification) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserVerification) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *UserVerification) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *UserVerification) GetSkipClientIntegrityChecks() bool {
	if x != nil {
		return x.SkipClientIntegrityChecks
	}
	return false
}

func (x *UserVerification) GetSkipIpAddressReputationChecks() bool {
	if x != nil {
		return x.SkipIpAddressReputationChecks
	}
	return false
}

func (x *UserVerification) GetReduceHardChallengeFrequency() bool {
	if x != nil {
		return x.ReduceHardChallengeFrequency
	}
	return false
}

func (x *UserVerification) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *UserVerification) GetVerifiedBy() *User {
	if x != nil {
		return x.VerifiedBy
	}
	return nil
}

type UserVerificationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaginationParams *PaginationParameters `protobuf:"bytes,1,opt,name=pagination_params,json=paginationParams,proto3" json:"pagination_params,omitempty"`
	SearchQuery      string                `protobuf:"bytes,2,opt,name=search_query,json=searchQuery,proto3" json:"search_query,omitempty"`
}

func (x *UserVerificationsRequest) Reset() {
	*x = UserVerificationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserVerificationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserVerificationsRequest) ProtoMessage() {}

func (x *UserVerificationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserVerificationsRequest.ProtoReflect.Descriptor instead.
func (*UserVerificationsRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{86}
}

func (x *UserVerificationsRequest) GetPaginationParams() *PaginationParameters {
	if x != nil {
		return x.PaginationParams
	}
	return nil
}

func (x *UserVerificationsRequest) GetSearchQuery() string {
	if x != nil {
		return x.SearchQuery
	}
	return ""
}

type UserVerificationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserVerifications []*UserVerification `protobuf:"bytes,1,rep,name=user_verifications,json=userVerifications,proto3" json:"user_verifications,omitempty"`
	Offset            uint64              `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Total             uint64              `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *UserVerificationsResponse) Reset() {
	*x = UserVerificationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserVerificationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserVerificationsResponse) ProtoMessage() {}

func (x *UserVerificationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserVerificationsResponse.ProtoReflect.Descriptor instead.
func (*UserVerificationsResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{87}
}

func (x *UserVerificationsResponse) GetUserVerifications() []*UserVerification {
	if x != nil {
		return x.UserVerifications
	}
	return nil
}

func (x *UserVerificationsResponse) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *UserVerificationsResponse) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type SetMediaEnqueuingEnabledRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Allowed           AllowedMediaEnqueuingType `protobuf:"varint,1,opt,name=allowed,proto3,enum=jungletv.AllowedMediaEnqueuingType" json:"allowed,omitempty"`
	EnqueuingPassword *string                   `protobuf:"bytes,2,opt,name=enqueuing_password,json=enqueuingPassword,proto3,oneof" json:"enqueuing_password,omitempty"`
}

func (x *SetMediaEnqueuingEnabledRequest) Reset() {
	*x = SetMediaEnqueuingEnabledRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMediaEnqueuingEnabledRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMediaEnqueuingEnabledRequest) ProtoMessage() {}

func (x *SetMediaEnqueuingEnabledRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMediaEnqueuingEnabledRequest.ProtoReflect.Descriptor instead.
func (*SetMediaEnqueuingEnabledRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{88}
}

func (x *SetMediaEnqueuingEnabledRequest) GetAllowed() AllowedMediaEnqueuingType {
	if x != nil {
		return x.Allowed
	}
	return AllowedMediaEnqueuingType_DISABLED
}

func (x *SetMediaEnqueuingEnabledRequest) GetEnqueuingPassword() string {
	if x != nil && x.EnqueuingPassword != nil {
		return *x.EnqueuingPassword
	}
	return ""
}

type SetMediaEnqueuingEnabledResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetMediaEnqueuingEnabledResponse) Reset() {
	*x = SetMediaEnqueuingEnabledResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMediaEnqueuingEnabledResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMediaEnqueuingEnabledResponse) ProtoMessage() {}

func (x *SetMediaEnqueuingEnabledResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMediaEnqueuingEnabledResponse.ProtoReflect.Descriptor instead.
func (*SetMediaEnqueuingEnabledResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{89}
}

type UserChatMessagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address     string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	NumMessages uint32 `protobuf:"varint,2,opt,name=num_messages,json=numMessages,proto3" json:"num_messages,omitempty"`
}

func (x *UserChatMessagesRequest) Reset() {
	*x = UserChatMessagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserChatMessagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChatMessagesRequest) ProtoMessage() {}

func (x *UserChatMessagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChatMessagesRequest.ProtoReflect.Descriptor instead.
func (*UserChatMessagesRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{90}
}

func (x *UserChatMessagesRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *UserChatMessagesRequest) GetNumMessages() uint32 {
	if x != nil {
		return x.NumMessages
	}
	return 0
}

type UserChatMessagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*ChatMessage `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *UserChatMessagesResponse) Reset() {
	*x = UserChatMessagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserChatMessagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChatMessagesResponse) ProtoMessage() {}

func (x *UserChatMessagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChatMessagesResponse.ProtoReflect.Descriptor instead.
func (*UserChatMessagesResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{91}
}

func (x *UserChatMessagesResponse) GetMessages() []*ChatMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

type UserPermissionLevelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UserPermissionLevelRequest) Reset() {
	*x = UserPermissionLevelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPermissionLevelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPermissionLevelRequest) ProtoMessage() {}

func (x *UserPermissionLevelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPermissionLevelRequest.ProtoReflect.Descriptor instead.
func (*UserPermissionLevelRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{92}
}

type UserPermissionLevelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PermissionLevel PermissionLevel `protobuf:"varint,1,opt,name=permission_level,json=permissionLevel,proto3,enum=jungletv.PermissionLevel" json:"permission_level,omitempty"`
}

func (x *UserPermissionLevelResponse) Reset() {
	*x = UserPermissionLevelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPermissionLevelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPermissionLevelResponse) ProtoMessage() {}

func (x *UserPermissionLevelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPermissionLevelResponse.ProtoReflect.Descriptor instead.
func (*UserPermissionLevelResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{93}
}

func (x *UserPermissionLevelResponse) GetPermissionLevel() PermissionLevel {
	if x != nil {
		return x.PermissionLevel
	}
	return PermissionLevel_UNAUTHENTICATED
}

type DisallowedMediaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaginationParams *PaginationParameters `protobuf:"bytes,1,opt,name=pagination_params,json=paginationParams,proto3" json:"pagination_params,omitempty"`
	SearchQuery      string                `protobuf:"bytes,2,opt,name=search_query,json=searchQuery,proto3" json:"search_query,omitempty"`
}

func (x *DisallowedMediaRequest) Reset() {
	*x = DisallowedMediaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisallowedMediaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisallowedMediaRequest) ProtoMessage() {}

func (x *DisallowedMediaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisallowedMediaRequest.ProtoReflect.Descriptor instead.
func (*DisallowedMediaRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{94}
}

func (x *DisallowedMediaRequest) GetPaginationParams() *PaginationParameters {
	if x != nil {
		return x.PaginationParams
	}
	return nil
}

func (x *DisallowedMediaRequest) GetSearchQuery() string {
	if x != nil {
		return x.SearchQuery
	}
	return ""
}

type DisallowedMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DisallowedBy *User                  `protobuf:"bytes,2,opt,name=disallowed_by,json=disallowedBy,proto3" json:"disallowed_by,omitempty"`
	DisallowedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=disallowed_at,json=disallowedAt,proto3" json:"disallowed_at,omitempty"`
	MediaType    DisallowedMediaType    `protobuf:"varint,4,opt,name=media_type,json=mediaType,proto3,enum=jungletv.DisallowedMediaType" json:"media_type,omitempty"`
	MediaId      string                 `protobuf:"bytes,5,opt,name=media_id,json=mediaId,proto3" json:"media_id,omitempty"`
	MediaTitle   string                 `protobuf:"bytes,6,opt,name=media_title,json=mediaTitle,proto3" json:"media_title,omitempty"`
}

func (x *DisallowedMedia) Reset() {
	*x = DisallowedMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisallowedMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisallowedMedia) ProtoMessage() {}

func (x *DisallowedMedia) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisallowedMedia.ProtoReflect.Descriptor instead.
func (*DisallowedMedia) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{95}
}

func (x *DisallowedMedia) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DisallowedMedia) GetDisallowedBy() *User {
	if x != nil {
		return x.DisallowedBy
	}
	return nil
}

func (x *DisallowedMedia) GetDisallowedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DisallowedAt
	}
	return nil
}

func (x *DisallowedMedia) GetMediaType() DisallowedMediaType {
	if x != nil {
		return x.MediaType
	}
	return DisallowedMediaType_UNKNOWN_DISALLOWED_MEDIA_TYPE
}

func (x *DisallowedMedia) GetMediaId() string {
	if x != nil {
		return x.MediaId
	}
	return ""
}

func (x *DisallowedMedia) GetMediaTitle() string {
	if x != nil {
		return x.MediaTitle
	}
	return ""
}

type DisallowedMediaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisallowedMedia []*DisallowedMedia `protobuf:"bytes,1,rep,name=disallowed_media,json=disallowedMedia,proto3" json:"disallowed_media,omitempty"`
	Offset          uint64             `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Total           uint64             `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *DisallowedMediaResponse) Reset() {
	*x = DisallowedMediaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisallowedMediaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisallowedMediaResponse) ProtoMessage() {}

func (x *DisallowedMediaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisallowedMediaResponse.ProtoReflect.Descriptor instead.
func (*DisallowedMediaResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{96}
}

func (x *DisallowedMediaResponse) GetDisallowedMedia() []*DisallowedMedia {
	if x != nil {
		return x.DisallowedMedia
	}
	return nil
}

func (x *DisallowedMediaResponse) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *DisallowedMediaResponse) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type AddDisallowedMediaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Do this so we can repurpose the same types and part of the code
	DisallowedMediaRequest *EnqueueMediaRequest `protobuf:"bytes,1,opt,name=disallowed_media_request,json=disallowedMediaRequest,proto3" json:"disallowed_media_request,omitempty"`
}

func (x *AddDisallowedMediaRequest) Reset() {
	*x = AddDisallowedMediaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDisallowedMediaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDisallowedMediaRequest) ProtoMessage() {}

func (x *AddDisallowedMediaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDisallowedMediaRequest.ProtoReflect.Descriptor instead.
func (*AddDisallowedMediaRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{97}
}

func (x *AddDisallowedMediaRequest) GetDisallowedMediaRequest() *EnqueueMediaRequest {
	if x != nil {
		return x.DisallowedMediaRequest
	}
	return nil
}

type AddDisallowedMediaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AddDisallowedMediaResponse) Reset() {
	*x = AddDisallowedMediaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDisallowedMediaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDisallowedMediaResponse) ProtoMessage() {}

func (x *AddDisallowedMediaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDisallowedMediaResponse.ProtoReflect.Descriptor instead.
func (*AddDisallowedMediaResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{98}
}

func (x *AddDisallowedMediaResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RemoveDisallowedMediaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RemoveDisallowedMediaRequest) Reset() {
	*x = RemoveDisallowedMediaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveDisallowedMediaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDisallowedMediaRequest) ProtoMessage() {}

func (x *RemoveDisallowedMediaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDisallowedMediaRequest.ProtoReflect.Descriptor instead.
func (*RemoveDisallowedMediaRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{99}
}

func (x *RemoveDisallowedMediaRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RemoveDisallowedMediaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveDisallowedMediaResponse) Reset() {
	*x = RemoveDisallowedMediaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveDisallowedMediaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDisallowedMediaResponse) ProtoMessage() {}

func (x *RemoveDisallowedMediaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDisallowedMediaResponse.ProtoReflect.Descriptor instead.
func (*RemoveDisallowedMediaResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{100}
}

type DisallowedMediaCollectionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaginationParams *PaginationParameters `protobuf:"bytes,1,opt,name=pagination_params,json=paginationParams,proto3" json:"pagination_params,omitempty"`
	SearchQuery      string                `protobuf:"bytes,2,opt,name=search_query,json=searchQuery,proto3" json:"search_query,omitempty"`
}

func (x *DisallowedMediaCollectionsRequest) Reset() {
	*x = DisallowedMediaCollectionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisallowedMediaCollectionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisallowedMediaCollectionsRequest) ProtoMessage() {}

func (x *DisallowedMediaCollectionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisallowedMediaCollectionsRequest.ProtoReflect.Descriptor instead.
func (*DisallowedMediaCollectionsRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{101}
}

func (x *DisallowedMediaCollectionsRequest) GetPaginationParams() *PaginationParameters {
	if x != nil {
		return x.PaginationParams
	}
	return nil
}

func (x *DisallowedMediaCollectionsRequest) GetSearchQuery() string {
	if x != nil {
		return x.SearchQuery
	}
	return ""
}

type DisallowedMediaCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DisallowedBy    *User                         `protobuf:"bytes,2,opt,name=disallowed_by,json=disallowedBy,proto3" json:"disallowed_by,omitempty"`
	DisallowedAt    *timestamppb.Timestamp        `protobuf:"bytes,3,opt,name=disallowed_at,json=disallowedAt,proto3" json:"disallowed_at,omitempty"`
	CollectionType  DisallowedMediaCollectionType `protobuf:"varint,4,opt,name=collection_type,json=collectionType,proto3,enum=jungletv.DisallowedMediaCollectionType" json:"collection_type,omitempty"`
	CollectionId    string                        `protobuf:"bytes,5,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	CollectionTitle string                        `protobuf:"bytes,6,opt,name=collection_title,json=collectionTitle,proto3" json:"collection_title,omitempty"`
}

func (x *DisallowedMediaCollection) Reset() {
	*x = DisallowedMediaCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisallowedMediaCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisallowedMediaCollection) ProtoMessage() {}

func (x *DisallowedMediaCollection) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisallowedMediaCollection.ProtoReflect.Descriptor instead.
func (*DisallowedMediaCollection) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{102}
}

func (x *DisallowedMediaCollection) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DisallowedMediaCollection) GetDisallowedBy() *User {
	if x != nil {
		return x.DisallowedBy
	}
	return nil
}

func (x *DisallowedMediaCollection) GetDisallowedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DisallowedAt
	}
	return nil
}

func (x *DisallowedMediaCollection) GetCollectionType() DisallowedMediaCollectionType {
	if x != nil {
		return x.CollectionType
	}
	return DisallowedMediaCollectionType_UNKNOWN_DISALLOWED_MEDIA_COLLECTION_TYPE
}

func (x *DisallowedMediaCollection) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *DisallowedMediaCollection) GetCollectionTitle() string {
	if x != nil {
		return x.CollectionTitle
	}
	return ""
}

type DisallowedMediaCollectionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisallowedMediaCollections []*DisallowedMediaCollection `protobuf:"bytes,1,rep,name=disallowed_media_collections,json=disallowedMediaCollections,proto3" json:"disallowed_media_collections,omitempty"`
	Offset                     uint64                       `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Total                      uint64                       `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *DisallowedMediaCollectionsResponse) Reset() {
	*x = DisallowedMediaCollectionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisallowedMediaCollectionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisallowedMediaCollectionsResponse) ProtoMessage() {}

func (x *DisallowedMediaCollectionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisallowedMediaCollectionsResponse.ProtoReflect.Descriptor instead.
func (*DisallowedMediaCollectionsResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{103}
}

func (x *DisallowedMediaCollectionsResponse) GetDisallowedMediaCollections() []*DisallowedMediaCollection {
	if x != nil {
		return x.DisallowedMediaCollections
	}
	return nil
}

func (x *DisallowedMediaCollectionsResponse) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *DisallowedMediaCollectionsResponse) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type AddDisallowedMediaCollectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Do this so we can repurpose the same types and part of the code
	DisallowedMediaRequest *EnqueueMediaRequest `protobuf:"bytes,1,opt,name=disallowed_media_request,json=disallowedMediaRequest,proto3" json:"disallowed_media_request,omitempty"`
}

func (x *AddDisallowedMediaCollectionRequest) Reset() {
	*x = AddDisallowedMediaCollectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDisallowedMediaCollectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDisallowedMediaCollectionRequest) ProtoMessage() {}

func (x *AddDisallowedMediaCollectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDisallowedMediaCollectionRequest.ProtoReflect.Descriptor instead.
func (*AddDisallowedMediaCollectionRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{104}
}

func (x *AddDisallowedMediaCollectionRequest) GetDisallowedMediaRequest() *EnqueueMediaRequest {
	if x != nil {
		return x.DisallowedMediaRequest
	}
	return nil
}

type AddDisallowedMediaCollectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *AddDisallowedMediaCollectionResponse) Reset() {
	*x = AddDisallowedMediaCollectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDisallowedMediaCollectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDisallowedMediaCollectionResponse) ProtoMessage() {}

func (x *AddDisallowedMediaCollectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDisallowedMediaCollectionResponse.ProtoReflect.Descriptor instead.
func (*AddDisallowedMediaCollectionResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{105}
}

func (x *AddDisallowedMediaCollectionResponse) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type RemoveDisallowedMediaCollectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RemoveDisallowedMediaCollectionRequest) Reset() {
	*x = RemoveDisallowedMediaCollectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveDisallowedMediaCollectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDisallowedMediaCollectionRequest) ProtoMessage() {}

func (x *RemoveDisallowedMediaCollectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDisallowedMediaCollectionRequest.ProtoReflect.Descriptor instead.
func (*RemoveDisallowedMediaCollectionRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{106}
}

func (x *RemoveDisallowedMediaCollectionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RemoveDisallowedMediaCollectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveDisallowedMediaCollectionResponse) Reset() {
	*x = RemoveDisallowedMediaCollectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveDisallowedMediaCollectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDisallowedMediaCollectionResponse) ProtoMessage() {}

func (x *RemoveDisallowedMediaCollectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDisallowedMediaCollectionResponse.ProtoReflect.Descriptor instead.
func (*RemoveDisallowedMediaCollectionResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{107}
}

type GetDocumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetDocumentRequest) Reset() {
	*x = GetDocumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDocumentRequest) ProtoMessage() {}

func (x *GetDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDocumentRequest.ProtoReflect.Descriptor instead.
func (*GetDocumentRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{108}
}

func (x *GetDocumentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Document struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Format    string                 `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	Content   string                 `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Document) Reset() {
	*x = Document{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Document) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Document) ProtoMessage() {}

func (x *Document) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Document.ProtoReflect.Descriptor instead.
func (*Document) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{109}
}

func (x *Document) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Document) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *Document) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Document) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type UpdateDocumentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateDocumentResponse) Reset() {
	*x = UpdateDocumentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDocumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDocumentResponse) ProtoMessage() {}

func (x *UpdateDocumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDocumentResponse.ProtoReflect.Descriptor instead.
func (*UpdateDocumentResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{110}
}

type DocumentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaginationParams *PaginationParameters `protobuf:"bytes,1,opt,name=pagination_params,json=paginationParams,proto3" json:"pagination_params,omitempty"`
	SearchQuery      string                `protobuf:"bytes,2,opt,name=search_query,json=searchQuery,proto3" json:"search_query,omitempty"`
}

func (x *DocumentsRequest) Reset() {
	*x = DocumentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentsRequest) ProtoMessage() {}

func (x *DocumentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentsRequest.ProtoReflect.Descriptor instead.
func (*DocumentsRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{111}
}

func (x *DocumentsRequest) GetPaginationParams() *PaginationParameters {
	if x != nil {
		return x.PaginationParams
	}
	return nil
}

func (x *DocumentsRequest) GetSearchQuery() string {
	if x != nil {
		return x.SearchQuery
	}
	return ""
}

type DocumentHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Format    string                 `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	UpdatedBy *User                  `protobuf:"bytes,4,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	Public    bool                   `protobuf:"varint,5,opt,name=public,proto3" json:"public,omitempty"`
}

func (x *DocumentHeader) Reset() {
	*x = DocumentHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentHeader) ProtoMessage() {}

func (x *DocumentHeader) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentHeader.ProtoReflect.Descriptor instead.
func (*DocumentHeader) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{112}
}

func (x *DocumentHeader) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DocumentHeader) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *DocumentHeader) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *DocumentHeader) GetUpdatedBy() *User {
	if x != nil {
		return x.UpdatedBy
	}
	return nil
}

func (x *DocumentHeader) GetPublic() bool {
	if x != nil {
		return x.Public
	}
	return false
}

type DocumentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Documents []*DocumentHeader `protobuf:"bytes,1,rep,name=documents,proto3" json:"documents,omitempty"`
	Offset    uint64            `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Total     uint64            `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *DocumentsResponse) Reset() {
	*x = DocumentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentsResponse) ProtoMessage() {}

func (x *DocumentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentsResponse.ProtoReflect.Descriptor instead.
func (*DocumentsResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{113}
}

func (x *DocumentsResponse) GetDocuments() []*DocumentHeader {
	if x != nil {
		return x.Documents
	}
	return nil
}

func (x *DocumentsResponse) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *DocumentsResponse) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type SetChatNicknameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nickname string `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname,omitempty"`
}

func (x *SetChatNicknameRequest) Reset() {
	*x = SetChatNicknameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetChatNicknameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChatNicknameRequest) ProtoMessage() {}

func (x *SetChatNicknameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChatNicknameRequest.ProtoReflect.Descriptor instead.
func (*SetChatNicknameRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{114}
}

func (x *SetChatNicknameRequest) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

type SetChatNicknameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetChatNicknameResponse) Reset() {
	*x = SetChatNicknameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetChatNicknameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChatNicknameResponse) ProtoMessage() {}

func (x *SetChatNicknameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChatNicknameResponse.ProtoReflect.Descriptor instead.
func (*SetChatNicknameResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{115}
}

type SetUserChatNicknameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address  string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
}

func (x *SetUserChatNicknameRequest) Reset() {
	*x = SetUserChatNicknameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUserChatNicknameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserChatNicknameRequest) ProtoMessage() {}

func (x *SetUserChatNicknameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserChatNicknameRequest.ProtoReflect.Descriptor instead.
func (*SetUserChatNicknameRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{116}
}

func (x *SetUserChatNicknameRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *SetUserChatNicknameRequest) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

type SetUserChatNicknameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetUserChatNicknameResponse) Reset() {
	*x = SetUserChatNicknameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUserChatNicknameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserChatNicknameResponse) ProtoMessage() {}

func (x *SetUserChatNicknameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserChatNicknameResponse.ProtoReflect.Descriptor instead.
func (*SetUserChatNicknameResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{117}
}

type SetPricesMultiplierRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Multiplier int32 `protobuf:"varint,1,opt,name=multiplier,proto3" json:"multiplier,omitempty"`
}

func (x *SetPricesMultiplierRequest) Reset() {
	*x = SetPricesMultiplierRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPricesMultiplierRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPricesMultiplierRequest) ProtoMessage() {}

func (x *SetPricesMultiplierRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPricesMultiplierRequest.ProtoReflect.Descriptor instead.
func (*SetPricesMultiplierRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{118}
}

func (x *SetPricesMultiplierRequest) GetMultiplier() int32 {
	if x != nil {
		return x.Multiplier
	}
	return 0
}

type SetPricesMultiplierResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetPricesMultiplierResponse) Reset() {
	*x = SetPricesMultiplierResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPricesMultiplierResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPricesMultiplierResponse) ProtoMessage() {}

func (x *SetPricesMultiplierResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPricesMultiplierResponse.ProtoReflect.Descriptor instead.
func (*SetPricesMultiplierResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{119}
}

type SetMinimumPricesMultiplierRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Multiplier int32 `protobuf:"varint,1,opt,name=multiplier,proto3" json:"multiplier,omitempty"`
}

func (x *SetMinimumPricesMultiplierRequest) Reset() {
	*x = SetMinimumPricesMultiplierRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMinimumPricesMultiplierRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMinimumPricesMultiplierRequest) ProtoMessage() {}

func (x *SetMinimumPricesMultiplierRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMinimumPricesMultiplierRequest.ProtoReflect.Descriptor instead.
func (*SetMinimumPricesMultiplierRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{120}
}

func (x *SetMinimumPricesMultiplierRequest) GetMultiplier() int32 {
	if x != nil {
		return x.Multiplier
	}
	return 0
}

type SetMinimumPricesMultiplierResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetMinimumPricesMultiplierResponse) Reset() {
	*x = SetMinimumPricesMultiplierResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMinimumPricesMultiplierResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMinimumPricesMultiplierResponse) ProtoMessage() {}

func (x *SetMinimumPricesMultiplierResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMinimumPricesMultiplierResponse.ProtoReflect.Descriptor instead.
func (*SetMinimumPricesMultiplierResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{121}
}

type WithdrawRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WithdrawRequest) Reset() {
	*x = WithdrawRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawRequest) ProtoMessage() {}

func (x *WithdrawRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawRequest.ProtoReflect.Descriptor instead.
func (*WithdrawRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{122}
}

type WithdrawResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WithdrawResponse) Reset() {
	*x = WithdrawResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawResponse) ProtoMessage() {}

func (x *WithdrawResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawResponse.ProtoReflect.Descriptor instead.
func (*WithdrawResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{123}
}

type LeaderboardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Period LeaderboardPeriod `protobuf:"varint,1,opt,name=period,proto3,enum=jungletv.LeaderboardPeriod" json:"period,omitempty"`
}

func (x *LeaderboardsRequest) Reset() {
	*x = LeaderboardsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaderboardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderboardsRequest) ProtoMessage() {}

func (x *LeaderboardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderboardsRequest.ProtoReflect.Descriptor instead.
func (*LeaderboardsRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{124}
}

func (x *LeaderboardsRequest) GetPeriod() LeaderboardPeriod {
	if x != nil {
		return x.Period
	}
	return LeaderboardPeriod_UNKNOWN_LEADERBOARD_PERIOD
}

type LeaderboardsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Leaderboards []*Leaderboard `protobuf:"bytes,1,rep,name=leaderboards,proto3" json:"leaderboards,omitempty"`
}

func (x *LeaderboardsResponse) Reset() {
	*x = LeaderboardsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaderboardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderboardsResponse) ProtoMessage() {}

func (x *LeaderboardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderboardsResponse.ProtoReflect.Descriptor instead.
func (*LeaderboardsResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{125}
}

func (x *LeaderboardsResponse) GetLeaderboards() []*Leaderboard {
	if x != nil {
		return x.Leaderboards
	}
	return nil
}

type Leaderboard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       string            `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	ValueTitles []string          `protobuf:"bytes,2,rep,name=value_titles,json=valueTitles,proto3" json:"value_titles,omitempty"`
	Rows        []*LeaderboardRow `protobuf:"bytes,3,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *Leaderboard) Reset() {
	*x = Leaderboard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Leaderboard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Leaderboard) ProtoMessage() {}

func (x *Leaderboard) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Leaderboard.ProtoReflect.Descriptor instead.
func (*Leaderboard) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{126}
}

func (x *Leaderboard) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Leaderboard) GetValueTitles() []string {
	if x != nil {
		return x.ValueTitles
	}
	return nil
}

func (x *Leaderboard) GetRows() []*LeaderboardRow {
	if x != nil {
		return x.Rows
	}
	return nil
}

type LeaderboardRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowNum   uint32              `protobuf:"varint,1,opt,name=row_num,json=rowNum,proto3" json:"row_num,omitempty"`
	Position uint32              `protobuf:"varint,2,opt,name=position,proto3" json:"position,omitempty"`
	User     *User               `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	Values   []*LeaderboardValue `protobuf:"bytes,4,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *LeaderboardRow) Reset() {
	*x = LeaderboardRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaderboardRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderboardRow) ProtoMessage() {}

func (x *LeaderboardRow) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderboardRow.ProtoReflect.Descriptor instead.
func (*LeaderboardRow) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{127}
}

func (x *LeaderboardRow) GetRowNum() uint32 {
	if x != nil {
		return x.RowNum
	}
	return 0
}

func (x *LeaderboardRow) GetPosition() uint32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *LeaderboardRow) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *LeaderboardRow) GetValues() []*LeaderboardValue {
	if x != nil {
		return x.Values
	}
	return nil
}

type LeaderboardValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*LeaderboardValue_Amount
	Value isLeaderboardValue_Value `protobuf_oneof:"value"`
}

func (x *LeaderboardValue) Reset() {
	*x = LeaderboardValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaderboardValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderboardValue) ProtoMessage() {}

func (x *LeaderboardValue) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderboardValue.ProtoReflect.Descriptor instead.
func (*LeaderboardValue) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{128}
}

func (m *LeaderboardValue) GetValue() isLeaderboardValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *LeaderboardValue) GetAmount() string {
	if x, ok := x.GetValue().(*LeaderboardValue_Amount); ok {
		return x.Amount
	}
	return ""
}

type isLeaderboardValue_Value interface {
	isLeaderboardValue_Value()
}

type LeaderboardValue_Amount struct {
	Amount string `protobuf:"bytes,1,opt,name=amount,proto3,oneof"`
}

func (*LeaderboardValue_Amount) isLeaderboardValue_Value() {}

type RewardHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaginationParams *PaginationParameters `protobuf:"bytes,1,opt,name=pagination_params,json=paginationParams,proto3" json:"pagination_params,omitempty"`
}

func (x *RewardHistoryRequest) Reset() {
	*x = RewardHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardHistoryRequest) ProtoMessage() {}

func (x *RewardHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardHistoryRequest.ProtoReflect.Descriptor instead.
func (*RewardHistoryRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{129}
}

func (x *RewardHistoryRequest) GetPaginationParams() *PaginationParameters {
	if x != nil {
		return x.PaginationParams
	}
	return nil
}

type ReceivedReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RewardsAddress string                 `protobuf:"bytes,2,opt,name=rewards_address,json=rewardsAddress,proto3" json:"rewards_address,omitempty"`
	Amount         string                 `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	ReceivedAt     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=received_at,json=receivedAt,proto3" json:"received_at,omitempty"`
	MediaId        string                 `protobuf:"bytes,5,opt,name=media_id,json=mediaId,proto3" json:"media_id,omitempty"`
	// Types that are assignable to MediaInfo:
	//	*ReceivedReward_YoutubeVideoData
	//	*ReceivedReward_SoundcloudTrackData
	//	*ReceivedReward_DocumentData
	//	*ReceivedReward_ApplicationPageData
	MediaInfo isReceivedReward_MediaInfo `protobuf_oneof:"media_info"`
}

func (x *ReceivedReward) Reset() {
	*x = ReceivedReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceivedReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceivedReward) ProtoMessage() {}

func (x *ReceivedReward) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceivedReward.ProtoReflect.Descriptor instead.
func (*ReceivedReward) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{130}
}

func (x *ReceivedReward) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReceivedReward) GetRewardsAddress() string {
	if x != nil {
		return x.RewardsAddress
	}
	return ""
}

func (x *ReceivedReward) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ReceivedReward) GetReceivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceivedAt
	}
	return nil
}

func (x *ReceivedReward) GetMediaId() string {
	if x != nil {
		return x.MediaId
	}
	return ""
}

func (m *ReceivedReward) GetMediaInfo() isReceivedReward_MediaInfo {
	if m != nil {
		return m.MediaInfo
	}
	return nil
}

func (x *ReceivedReward) GetYoutubeVideoData() *QueueYouTubeVideoData {
	if x, ok := x.GetMediaInfo().(*ReceivedReward_YoutubeVideoData); ok {
		return x.YoutubeVideoData
	}
	return nil
}

func (x *ReceivedReward) GetSoundcloudTrackData() *QueueSoundCloudTrackData {
	if x, ok := x.GetMediaInfo().(*ReceivedReward_SoundcloudTrackData); ok {
		return x.SoundcloudTrackData
	}
	return nil
}

func (x *ReceivedReward) GetDocumentData() *QueueDocumentData {
	if x, ok := x.GetMediaInfo().(*ReceivedReward_DocumentData); ok {
		return x.DocumentData
	}
	return nil
}

func (x *ReceivedReward) GetApplicationPageData() *QueueApplicationPageData {
	if x, ok := x.GetMediaInfo().(*ReceivedReward_ApplicationPageData); ok {
		return x.ApplicationPageData
	}
	return nil
}

type isReceivedReward_MediaInfo interface {
	isReceivedReward_MediaInfo()
}

type ReceivedReward_YoutubeVideoData struct {
	YoutubeVideoData *QueueYouTubeVideoData `protobuf:"bytes,6,opt,name=youtube_video_data,json=youtubeVideoData,proto3,oneof"`
}

type ReceivedReward_SoundcloudTrackData struct {
	SoundcloudTrackData *QueueSoundCloudTrackData `protobuf:"bytes,7,opt,name=soundcloud_track_data,json=soundcloudTrackData,proto3,oneof"`
}

type ReceivedReward_DocumentData struct {
	DocumentData *QueueDocumentData `protobuf:"bytes,8,opt,name=document_data,json=documentData,proto3,oneof"`
}

type ReceivedReward_ApplicationPageData struct {
	ApplicationPageData *QueueApplicationPageData `protobuf:"bytes,9,opt,name=application_page_data,json=applicationPageData,proto3,oneof"`
}

func (*ReceivedReward_YoutubeVideoData) isReceivedReward_MediaInfo() {}

func (*ReceivedReward_SoundcloudTrackData) isReceivedReward_MediaInfo() {}

func (*ReceivedReward_DocumentData) isReceivedReward_MediaInfo() {}

func (*ReceivedReward_ApplicationPageData) isReceivedReward_MediaInfo() {}

type RewardHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceivedRewards []*ReceivedReward `protobuf:"bytes,1,rep,name=received_rewards,json=receivedRewards,proto3" json:"received_rewards,omitempty"`
	Offset          uint64            `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Total           uint64            `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *RewardHistoryResponse) Reset() {
	*x = RewardHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardHistoryResponse) ProtoMessage() {}

func (x *RewardHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardHistoryResponse.ProtoReflect.Descriptor instead.
func (*RewardHistoryResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{131}
}

func (x *RewardHistoryResponse) GetReceivedRewards() []*ReceivedReward {
	if x != nil {
		return x.ReceivedRewards
	}
	return nil
}

func (x *RewardHistoryResponse) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *RewardHistoryResponse) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type WithdrawalHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaginationParams *PaginationParameters `protobuf:"bytes,1,opt,name=pagination_params,json=paginationParams,proto3" json:"pagination_params,omitempty"`
}

func (x *WithdrawalHistoryRequest) Reset() {
	*x = WithdrawalHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawalHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawalHistoryRequest) ProtoMessage() {}

func (x *WithdrawalHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawalHistoryRequest.ProtoReflect.Descriptor instead.
func (*WithdrawalHistoryRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{132}
}

func (x *WithdrawalHistoryRequest) GetPaginationParams() *PaginationParameters {
	if x != nil {
		return x.PaginationParams
	}
	return nil
}

type Withdrawal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxHash         string                 `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	RewardsAddress string                 `protobuf:"bytes,2,opt,name=rewards_address,json=rewardsAddress,proto3" json:"rewards_address,omitempty"`
	Amount         string                 `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	StartedAt      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	CompletedAt    *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
}

func (x *Withdrawal) Reset() {
	*x = Withdrawal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Withdrawal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Withdrawal) ProtoMessage() {}

func (x *Withdrawal) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Withdrawal.ProtoReflect.Descriptor instead.
func (*Withdrawal) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{133}
}

func (x *Withdrawal) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *Withdrawal) GetRewardsAddress() string {
	if x != nil {
		return x.RewardsAddress
	}
	return ""
}

func (x *Withdrawal) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Withdrawal) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *Withdrawal) GetCompletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletedAt
	}
	return nil
}

type WithdrawalHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Withdrawals []*Withdrawal `protobuf:"bytes,1,rep,name=withdrawals,proto3" json:"withdrawals,omitempty"`
	Offset      uint64        `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Total       uint64        `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *WithdrawalHistoryResponse) Reset() {
	*x = WithdrawalHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawalHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawalHistoryResponse) ProtoMessage() {}

func (x *WithdrawalHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawalHistoryResponse.ProtoReflect.Descriptor instead.
func (*WithdrawalHistoryResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{134}
}

func (x *WithdrawalHistoryResponse) GetWithdrawals() []*Withdrawal {
	if x != nil {
		return x.Withdrawals
	}
	return nil
}

func (x *WithdrawalHistoryResponse) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *WithdrawalHistoryResponse) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type SetCrowdfundedSkippingEnabledRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *SetCrowdfundedSkippingEnabledRequest) Reset() {
	*x = SetCrowdfundedSkippingEnabledRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCrowdfundedSkippingEnabledRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCrowdfundedSkippingEnabledRequest) ProtoMessage() {}

func (x *SetCrowdfundedSkippingEnabledRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCrowdfundedSkippingEnabledRequest.ProtoReflect.Descriptor instead.
func (*SetCrowdfundedSkippingEnabledRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{135}
}

func (x *SetCrowdfundedSkippingEnabledRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type SetCrowdfundedSkippingEnabledResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetCrowdfundedSkippingEnabledResponse) Reset() {
	*x = SetCrowdfundedSkippingEnabledResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCrowdfundedSkippingEnabledResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCrowdfundedSkippingEnabledResponse) ProtoMessage() {}

func (x *SetCrowdfundedSkippingEnabledResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCrowdfundedSkippingEnabledResponse.ProtoReflect.Descriptor instead.
func (*SetCrowdfundedSkippingEnabledResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{136}
}

type SetSkipPriceMultiplierRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Multiplier int32 `protobuf:"varint,1,opt,name=multiplier,proto3" json:"multiplier,omitempty"`
}

func (x *SetSkipPriceMultiplierRequest) Reset() {
	*x = SetSkipPriceMultiplierRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSkipPriceMultiplierRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSkipPriceMultiplierRequest) ProtoMessage() {}

func (x *SetSkipPriceMultiplierRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSkipPriceMultiplierRequest.ProtoReflect.Descriptor instead.
func (*SetSkipPriceMultiplierRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{137}
}

func (x *SetSkipPriceMultiplierRequest) GetMultiplier() int32 {
	if x != nil {
		return x.Multiplier
	}
	return 0
}

type SetSkipPriceMultiplierResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetSkipPriceMultiplierResponse) Reset() {
	*x = SetSkipPriceMultiplierResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSkipPriceMultiplierResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSkipPriceMultiplierResponse) ProtoMessage() {}

func (x *SetSkipPriceMultiplierResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSkipPriceMultiplierResponse.ProtoReflect.Descriptor instead.
func (*SetSkipPriceMultiplierResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{138}
}

type ProduceSegchaChallengeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProduceSegchaChallengeRequest) Reset() {
	*x = ProduceSegchaChallengeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceSegchaChallengeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceSegchaChallengeRequest) ProtoMessage() {}

func (x *ProduceSegchaChallengeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceSegchaChallengeRequest.ProtoReflect.Descriptor instead.
func (*ProduceSegchaChallengeRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{139}
}

type ProduceSegchaChallengeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeId string                 `protobuf:"bytes,1,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	Steps       []*SegchaChallengeStep `protobuf:"bytes,2,rep,name=steps,proto3" json:"steps,omitempty"`
}

func (x *ProduceSegchaChallengeResponse) Reset() {
	*x = ProduceSegchaChallengeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceSegchaChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceSegchaChallengeResponse) ProtoMessage() {}

func (x *ProduceSegchaChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceSegchaChallengeResponse.ProtoReflect.Descriptor instead.
func (*ProduceSegchaChallengeResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{140}
}

func (x *ProduceSegchaChallengeResponse) GetChallengeId() string {
	if x != nil {
		return x.ChallengeId
	}
	return ""
}

func (x *ProduceSegchaChallengeResponse) GetSteps() []*SegchaChallengeStep {
	if x != nil {
		return x.Steps
	}
	return nil
}

type SegchaChallengeStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image []byte `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *SegchaChallengeStep) Reset() {
	*x = SegchaChallengeStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegchaChallengeStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegchaChallengeStep) ProtoMessage() {}

func (x *SegchaChallengeStep) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegchaChallengeStep.ProtoReflect.Descriptor instead.
func (*SegchaChallengeStep) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{141}
}

func (x *SegchaChallengeStep) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

type ConfirmRaffleWinnerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RaffleId string `protobuf:"bytes,1,opt,name=raffle_id,json=raffleId,proto3" json:"raffle_id,omitempty"`
}

func (x *ConfirmRaffleWinnerRequest) Reset() {
	*x = ConfirmRaffleWinnerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmRaffleWinnerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmRaffleWinnerRequest) ProtoMessage() {}

func (x *ConfirmRaffleWinnerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmRaffleWinnerRequest.ProtoReflect.Descriptor instead.
func (*ConfirmRaffleWinnerRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{142}
}

func (x *ConfirmRaffleWinnerRequest) GetRaffleId() string {
	if x != nil {
		return x.RaffleId
	}
	return ""
}

type ConfirmRaffleWinnerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConfirmRaffleWinnerResponse) Reset() {
	*x = ConfirmRaffleWinnerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmRaffleWinnerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmRaffleWinnerResponse) ProtoMessage() {}

func (x *ConfirmRaffleWinnerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmRaffleWinnerResponse.ProtoReflect.Descriptor instead.
func (*ConfirmRaffleWinnerResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{143}
}

type CompleteRaffleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RaffleId    string `protobuf:"bytes,1,opt,name=raffle_id,json=raffleId,proto3" json:"raffle_id,omitempty"`
	PrizeTxHash string `protobuf:"bytes,2,opt,name=prize_tx_hash,json=prizeTxHash,proto3" json:"prize_tx_hash,omitempty"`
}

func (x *CompleteRaffleRequest) Reset() {
	*x = CompleteRaffleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteRaffleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteRaffleRequest) ProtoMessage() {}

func (x *CompleteRaffleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteRaffleRequest.ProtoReflect.Descriptor instead.
func (*CompleteRaffleRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{144}
}

func (x *CompleteRaffleRequest) GetRaffleId() string {
	if x != nil {
		return x.RaffleId
	}
	return ""
}

func (x *CompleteRaffleRequest) GetPrizeTxHash() string {
	if x != nil {
		return x.PrizeTxHash
	}
	return ""
}

type CompleteRaffleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CompleteRaffleResponse) Reset() {
	*x = CompleteRaffleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteRaffleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteRaffleResponse) ProtoMessage() {}

func (x *CompleteRaffleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteRaffleResponse.ProtoReflect.Descriptor instead.
func (*CompleteRaffleResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{145}
}

type RedrawRaffleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RaffleId string `protobuf:"bytes,1,opt,name=raffle_id,json=raffleId,proto3" json:"raffle_id,omitempty"`
	Reason   string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *RedrawRaffleRequest) Reset() {
	*x = RedrawRaffleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedrawRaffleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedrawRaffleRequest) ProtoMessage() {}

func (x *RedrawRaffleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedrawRaffleRequest.ProtoReflect.Descriptor instead.
func (*RedrawRaffleRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{146}
}

func (x *RedrawRaffleRequest) GetRaffleId() string {
	if x != nil {
		return x.RaffleId
	}
	return ""
}

func (x *RedrawRaffleRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type RedrawRaffleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RedrawRaffleResponse) Reset() {
	*x = RedrawRaffleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedrawRaffleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedrawRaffleResponse) ProtoMessage() {}

func (x *RedrawRaffleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedrawRaffleResponse.ProtoReflect.Descriptor instead.
func (*RedrawRaffleResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{147}
}

type OngoingRaffleInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OngoingRaffleInfoRequest) Reset() {
	*x = OngoingRaffleInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OngoingRaffleInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OngoingRaffleInfoRequest) ProtoMessage() {}

func (x *OngoingRaffleInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OngoingRaffleInfoRequest.ProtoReflect.Descriptor instead.
func (*OngoingRaffleInfoRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{148}
}

type OngoingRaffleInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RaffleInfo *OngoingRaffleInfo `protobuf:"bytes,1,opt,name=raffle_info,json=raffleInfo,proto3,oneof" json:"raffle_info,omitempty"`
}

func (x *OngoingRaffleInfoResponse) Reset() {
	*x = OngoingRaffleInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OngoingRaffleInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OngoingRaffleInfoResponse) ProtoMessage() {}

func (x *OngoingRaffleInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OngoingRaffleInfoResponse.ProtoReflect.Descriptor instead.
func (*OngoingRaffleInfoResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{149}
}

func (x *OngoingRaffleInfoResponse) GetRaffleInfo() *OngoingRaffleInfo {
	if x != nil {
		return x.RaffleInfo
	}
	return nil
}

type OngoingRaffleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RaffleId     string                 `protobuf:"bytes,1,opt,name=raffle_id,json=raffleId,proto3" json:"raffle_id,omitempty"`
	EntriesUrl   string                 `protobuf:"bytes,2,opt,name=entries_url,json=entriesUrl,proto3" json:"entries_url,omitempty"`
	InfoUrl      string                 `protobuf:"bytes,3,opt,name=info_url,json=infoUrl,proto3" json:"info_url,omitempty"`
	PeriodStart  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=period_start,json=periodStart,proto3" json:"period_start,omitempty"`
	PeriodEnd    *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=period_end,json=periodEnd,proto3" json:"period_end,omitempty"`
	TotalTickets uint32                 `protobuf:"varint,6,opt,name=total_tickets,json=totalTickets,proto3" json:"total_tickets,omitempty"`
	UserTickets  *uint32                `protobuf:"varint,7,opt,name=user_tickets,json=userTickets,proto3,oneof" json:"user_tickets,omitempty"`
}

func (x *OngoingRaffleInfo) Reset() {
	*x = OngoingRaffleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OngoingRaffleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OngoingRaffleInfo) ProtoMessage() {}

func (x *OngoingRaffleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OngoingRaffleInfo.ProtoReflect.Descriptor instead.
func (*OngoingRaffleInfo) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{150}
}

func (x *OngoingRaffleInfo) GetRaffleId() string {
	if x != nil {
		return x.RaffleId
	}
	return ""
}

func (x *OngoingRaffleInfo) GetEntriesUrl() string {
	if x != nil {
		return x.EntriesUrl
	}
	return ""
}

func (x *OngoingRaffleInfo) GetInfoUrl() string {
	if x != nil {
		return x.InfoUrl
	}
	return ""
}

func (x *OngoingRaffleInfo) GetPeriodStart() *timestamppb.Timestamp {
	if x != nil {
		return x.PeriodStart
	}
	return nil
}

func (x *OngoingRaffleInfo) GetPeriodEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.PeriodEnd
	}
	return nil
}

func (x *OngoingRaffleInfo) GetTotalTickets() uint32 {
	if x != nil {
		return x.TotalTickets
	}
	return 0
}

func (x *OngoingRaffleInfo) GetUserTickets() uint32 {
	if x != nil && x.UserTickets != nil {
		return *x.UserTickets
	}
	return 0
}

type RaffleDrawing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RaffleId            string                 `protobuf:"bytes,1,opt,name=raffle_id,json=raffleId,proto3" json:"raffle_id,omitempty"`
	DrawingNumber       uint32                 `protobuf:"varint,2,opt,name=drawing_number,json=drawingNumber,proto3" json:"drawing_number,omitempty"`
	PeriodStart         *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=period_start,json=periodStart,proto3" json:"period_start,omitempty"`
	PeriodEnd           *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=period_end,json=periodEnd,proto3" json:"period_end,omitempty"`
	Status              RaffleDrawingStatus    `protobuf:"varint,5,opt,name=status,proto3,enum=jungletv.RaffleDrawingStatus" json:"status,omitempty"`
	Reason              string                 `protobuf:"bytes,6,opt,name=reason,proto3" json:"reason,omitempty"`
	WinningTicketNumber *uint32                `protobuf:"varint,7,opt,name=winning_ticket_number,json=winningTicketNumber,proto3,oneof" json:"winning_ticket_number,omitempty"`
	Winner              *User                  `protobuf:"bytes,8,opt,name=winner,proto3,oneof" json:"winner,omitempty"`
	PrizeTxHash         *string                `protobuf:"bytes,9,opt,name=prize_tx_hash,json=prizeTxHash,proto3,oneof" json:"prize_tx_hash,omitempty"`
	EntriesUrl          string                 `protobuf:"bytes,10,opt,name=entries_url,json=entriesUrl,proto3" json:"entries_url,omitempty"`
	InfoUrl             string                 `protobuf:"bytes,11,opt,name=info_url,json=infoUrl,proto3" json:"info_url,omitempty"`
}

func (x *RaffleDrawing) Reset() {
	*x = RaffleDrawing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaffleDrawing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaffleDrawing) ProtoMessage() {}

func (x *RaffleDrawing) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaffleDrawing.ProtoReflect.Descriptor instead.
func (*RaffleDrawing) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{151}
}

func (x *RaffleDrawing) GetRaffleId() string {
	if x != nil {
		return x.RaffleId
	}
	return ""
}

func (x *RaffleDrawing) GetDrawingNumber() uint32 {
	if x != nil {
		return x.DrawingNumber
	}
	return 0
}

func (x *RaffleDrawing) GetPeriodStart() *timestamppb.Timestamp {
	if x != nil {
		return x.PeriodStart
	}
	return nil
}

func (x *RaffleDrawing) GetPeriodEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.PeriodEnd
	}
	return nil
}

func (x *RaffleDrawing) GetStatus() RaffleDrawingStatus {
	if x != nil {
		return x.Status
	}
	return RaffleDrawingStatus_UNKNOWN_RAFFLE_DRAWING_STATUS
}

func (x *RaffleDrawing) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *RaffleDrawing) GetWinningTicketNumber() uint32 {
	if x != nil && x.WinningTicketNumber != nil {
		return *x.WinningTicketNumber
	}
	return 0
}

func (x *RaffleDrawing) GetWinner() *User {
	if x != nil {
		return x.Winner
	}
	return nil
}

func (x *RaffleDrawing) GetPrizeTxHash() string {
	if x != nil && x.PrizeTxHash != nil {
		return *x.PrizeTxHash
	}
	return ""
}

func (x *RaffleDrawing) GetEntriesUrl() string {
	if x != nil {
		return x.EntriesUrl
	}
	return ""
}

func (x *RaffleDrawing) GetInfoUrl() string {
	if x != nil {
		return x.InfoUrl
	}
	return ""
}

type RaffleDrawingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaginationParams *PaginationParameters `protobuf:"bytes,1,opt,name=pagination_params,json=paginationParams,proto3" json:"pagination_params,omitempty"`
}

func (x *RaffleDrawingsRequest) Reset() {
	*x = RaffleDrawingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaffleDrawingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaffleDrawingsRequest) ProtoMessage() {}

func (x *RaffleDrawingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaffleDrawingsRequest.ProtoReflect.Descriptor instead.
func (*RaffleDrawingsRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{152}
}

func (x *RaffleDrawingsRequest) GetPaginationParams() *PaginationParameters {
	if x != nil {
		return x.PaginationParams
	}
	return nil
}

type RaffleDrawingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RaffleDrawings []*RaffleDrawing `protobuf:"bytes,1,rep,name=raffle_drawings,json=raffleDrawings,proto3" json:"raffle_drawings,omitempty"`
	Offset         uint64           `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Total          uint64           `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *RaffleDrawingsResponse) Reset() {
	*x = RaffleDrawingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaffleDrawingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaffleDrawingsResponse) ProtoMessage() {}

func (x *RaffleDrawingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaffleDrawingsResponse.ProtoReflect.Descriptor instead.
func (*RaffleDrawingsResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{153}
}

func (x *RaffleDrawingsResponse) GetRaffleDrawings() []*RaffleDrawing {
	if x != nil {
		return x.RaffleDrawings
	}
	return nil
}

func (x *RaffleDrawingsResponse) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *RaffleDrawingsResponse) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type TriggerAnnouncementsNotificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TriggerAnnouncementsNotificationRequest) Reset() {
	*x = TriggerAnnouncementsNotificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerAnnouncementsNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerAnnouncementsNotificationRequest) ProtoMessage() {}

func (x *TriggerAnnouncementsNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerAnnouncementsNotificationRequest.ProtoReflect.Descriptor instead.
func (*TriggerAnnouncementsNotificationRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{154}
}

type TriggerAnnouncementsNotificationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TriggerAnnouncementsNotificationResponse) Reset() {
	*x = TriggerAnnouncementsNotificationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerAnnouncementsNotificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerAnnouncementsNotificationResponse) ProtoMessage() {}

func (x *TriggerAnnouncementsNotificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerAnnouncementsNotificationResponse.ProtoReflect.Descriptor instead.
func (*TriggerAnnouncementsNotificationResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{155}
}

type SpectatorInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardsAddress string `protobuf:"bytes,1,opt,name=rewards_address,json=rewardsAddress,proto3" json:"rewards_address,omitempty"`
}

func (x *SpectatorInfoRequest) Reset() {
	*x = SpectatorInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpectatorInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpectatorInfoRequest) ProtoMessage() {}

func (x *SpectatorInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpectatorInfoRequest.ProtoReflect.Descriptor instead.
func (*SpectatorInfoRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{156}
}

func (x *SpectatorInfoRequest) GetRewardsAddress() string {
	if x != nil {
		return x.RewardsAddress
	}
	return ""
}

type Spectator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardsAddress                     string                 `protobuf:"bytes,1,opt,name=rewards_address,json=rewardsAddress,proto3" json:"rewards_address,omitempty"`
	NumConnections                     uint32                 `protobuf:"varint,2,opt,name=num_connections,json=numConnections,proto3" json:"num_connections,omitempty"`
	NumSpectatorsWithSameRemoteAddress uint32                 `protobuf:"varint,3,opt,name=num_spectators_with_same_remote_address,json=numSpectatorsWithSameRemoteAddress,proto3" json:"num_spectators_with_same_remote_address,omitempty"`
	WatchingSince                      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=watching_since,json=watchingSince,proto3" json:"watching_since,omitempty"`
	RemoteAddressHasGoodReputation     bool                   `protobuf:"varint,5,opt,name=remote_address_has_good_reputation,json=remoteAddressHasGoodReputation,proto3" json:"remote_address_has_good_reputation,omitempty"`
	RemoteAddressBannedFromRewards     bool                   `protobuf:"varint,6,opt,name=remote_address_banned_from_rewards,json=remoteAddressBannedFromRewards,proto3" json:"remote_address_banned_from_rewards,omitempty"`
	Legitimate                         bool                   `protobuf:"varint,7,opt,name=legitimate,proto3" json:"legitimate,omitempty"`
	NotLegitimateSince                 *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=not_legitimate_since,json=notLegitimateSince,proto3,oneof" json:"not_legitimate_since,omitempty"`
	StoppedWatchingAt                  *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=stopped_watching_at,json=stoppedWatchingAt,proto3,oneof" json:"stopped_watching_at,omitempty"`
	ActivityChallenge                  *ActivityChallenge     `protobuf:"bytes,10,opt,name=activity_challenge,json=activityChallenge,proto3,oneof" json:"activity_challenge,omitempty"`
	ClientIntegrityChecksSkipped       bool                   `protobuf:"varint,11,opt,name=client_integrity_checks_skipped,json=clientIntegrityChecksSkipped,proto3" json:"client_integrity_checks_skipped,omitempty"`
	IpAddressReputationChecksSkipped   bool                   `protobuf:"varint,12,opt,name=ip_address_reputation_checks_skipped,json=ipAddressReputationChecksSkipped,proto3" json:"ip_address_reputation_checks_skipped,omitempty"`
	HardChallengeFrequencyReduced      bool                   `protobuf:"varint,13,opt,name=hard_challenge_frequency_reduced,json=hardChallengeFrequencyReduced,proto3" json:"hard_challenge_frequency_reduced,omitempty"`
}

func (x *Spectator) Reset() {
	*x = Spectator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Spectator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Spectator) ProtoMessage() {}

func (x *Spectator) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Spectator.ProtoReflect.Descriptor instead.
func (*Spectator) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{157}
}

func (x *Spectator) GetRewardsAddress() string {
	if x != nil {
		return x.RewardsAddress
	}
	return ""
}

func (x *Spectator) GetNumConnections() uint32 {
	if x != nil {
		return x.NumConnections
	}
	return 0
}

func (x *Spectator) GetNumSpectatorsWithSameRemoteAddress() uint32 {
	if x != nil {
		return x.NumSpectatorsWithSameRemoteAddress
	}
	return 0
}

func (x *Spectator) GetWatchingSince() *timestamppb.Timestamp {
	if x != nil {
		return x.WatchingSince
	}
	return nil
}

func (x *Spectator) GetRemoteAddressHasGoodReputation() bool {
	if x != nil {
		return x.RemoteAddressHasGoodReputation
	}
	return false
}

func (x *Spectator) GetRemoteAddressBannedFromRewards() bool {
	if x != nil {
		return x.RemoteAddressBannedFromRewards
	}
	return false
}

func (x *Spectator) GetLegitimate() bool {
	if x != nil {
		return x.Legitimate
	}
	return false
}

func (x *Spectator) GetNotLegitimateSince() *timestamppb.Timestamp {
	if x != nil {
		return x.NotLegitimateSince
	}
	return nil
}

func (x *Spectator) GetStoppedWatchingAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StoppedWatchingAt
	}
	return nil
}

func (x *Spectator) GetActivityChallenge() *ActivityChallenge {
	if x != nil {
		return x.ActivityChallenge
	}
	return nil
}

func (x *Spectator) GetClientIntegrityChecksSkipped() bool {
	if x != nil {
		return x.ClientIntegrityChecksSkipped
	}
	return false
}

func (x *Spectator) GetIpAddressReputationChecksSkipped() bool {
	if x != nil {
		return x.IpAddressReputationChecksSkipped
	}
	return false
}

func (x *Spectator) GetHardChallengeFrequencyReduced() bool {
	if x != nil {
		return x.HardChallengeFrequencyReduced
	}
	return false
}

type ResetSpectatorStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardsAddress string `protobuf:"bytes,1,opt,name=rewards_address,json=rewardsAddress,proto3" json:"rewards_address,omitempty"`
}

func (x *ResetSpectatorStatusRequest) Reset() {
	*x = ResetSpectatorStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetSpectatorStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetSpectatorStatusRequest) ProtoMessage() {}

func (x *ResetSpectatorStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetSpectatorStatusRequest.ProtoReflect.Descriptor instead.
func (*ResetSpectatorStatusRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{158}
}

func (x *ResetSpectatorStatusRequest) GetRewardsAddress() string {
	if x != nil {
		return x.RewardsAddress
	}
	return ""
}

type ResetSpectatorStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetSpectatorStatusResponse) Reset() {
	*x = ResetSpectatorStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetSpectatorStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetSpectatorStatusResponse) ProtoMessage() {}

func (x *ResetSpectatorStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetSpectatorStatusResponse.ProtoReflect.Descriptor instead.
func (*ResetSpectatorStatusResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{159}
}

type MonitorModerationStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MonitorModerationStatusRequest) Reset() {
	*x = MonitorModerationStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorModerationStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorModerationStatusRequest) ProtoMessage() {}

func (x *MonitorModerationStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorModerationStatusRequest.ProtoReflect.Descriptor instead.
func (*MonitorModerationStatusRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{160}
}

type ModerationStatusOverview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowedMediaEnqueuing               AllowedMediaEnqueuingType `protobuf:"varint,1,opt,name=allowed_media_enqueuing,json=allowedMediaEnqueuing,proto3,enum=jungletv.AllowedMediaEnqueuingType" json:"allowed_media_enqueuing,omitempty"`
	EnqueuingPricesMultiplier           int32                     `protobuf:"varint,2,opt,name=enqueuing_prices_multiplier,json=enqueuingPricesMultiplier,proto3" json:"enqueuing_prices_multiplier,omitempty"`
	CrowdfundedSkippingEnabled          bool                      `protobuf:"varint,3,opt,name=crowdfunded_skipping_enabled,json=crowdfundedSkippingEnabled,proto3" json:"crowdfunded_skipping_enabled,omitempty"`
	CrowdfundedSkippingPricesMultiplier int32                     `protobuf:"varint,4,opt,name=crowdfunded_skipping_prices_multiplier,json=crowdfundedSkippingPricesMultiplier,proto3" json:"crowdfunded_skipping_prices_multiplier,omitempty"`
	NewEntriesAlwaysUnskippable         bool                      `protobuf:"varint,5,opt,name=new_entries_always_unskippable,json=newEntriesAlwaysUnskippable,proto3" json:"new_entries_always_unskippable,omitempty"`
	OwnEntryRemovalEnabled              bool                      `protobuf:"varint,6,opt,name=own_entry_removal_enabled,json=ownEntryRemovalEnabled,proto3" json:"own_entry_removal_enabled,omitempty"`
	AllSkippingEnabled                  bool                      `protobuf:"varint,7,opt,name=all_skipping_enabled,json=allSkippingEnabled,proto3" json:"all_skipping_enabled,omitempty"`
	QueueInsertCursor                   *string                   `protobuf:"bytes,8,opt,name=queue_insert_cursor,json=queueInsertCursor,proto3,oneof" json:"queue_insert_cursor,omitempty"`
	MinimumPricesMultiplier             int32                     `protobuf:"varint,9,opt,name=minimum_prices_multiplier,json=minimumPricesMultiplier,proto3" json:"minimum_prices_multiplier,omitempty"`
	ActivelyModerating                  []*User                   `protobuf:"bytes,10,rep,name=actively_moderating,json=activelyModerating,proto3" json:"actively_moderating,omitempty"`
	AllowEntryReordering                bool                      `protobuf:"varint,11,opt,name=allow_entry_reordering,json=allowEntryReordering,proto3" json:"allow_entry_reordering,omitempty"`
	VipUsers                            []*User                   `protobuf:"bytes,12,rep,name=vip_users,json=vipUsers,proto3" json:"vip_users,omitempty"`
}

func (x *ModerationStatusOverview) Reset() {
	*x = ModerationStatusOverview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModerationStatusOverview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModerationStatusOverview) ProtoMessage() {}

func (x *ModerationStatusOverview) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModerationStatusOverview.ProtoReflect.Descriptor instead.
func (*ModerationStatusOverview) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{161}
}

func (x *ModerationStatusOverview) GetAllowedMediaEnqueuing() AllowedMediaEnqueuingType {
	if x != nil {
		return x.AllowedMediaEnqueuing
	}
	return AllowedMediaEnqueuingType_DISABLED
}

func (x *ModerationStatusOverview) GetEnqueuingPricesMultiplier() int32 {
	if x != nil {
		return x.EnqueuingPricesMultiplier
	}
	return 0
}

func (x *ModerationStatusOverview) GetCrowdfundedSkippingEnabled() bool {
	if x != nil {
		return x.CrowdfundedSkippingEnabled
	}
	return false
}

func (x *ModerationStatusOverview) GetCrowdfundedSkippingPricesMultiplier() int32 {
	if x != nil {
		return x.CrowdfundedSkippingPricesMultiplier
	}
	return 0
}

func (x *ModerationStatusOverview) GetNewEntriesAlwaysUnskippable() bool {
	if x != nil {
		return x.NewEntriesAlwaysUnskippable
	}
	return false
}

func (x *ModerationStatusOverview) GetOwnEntryRemovalEnabled() bool {
	if x != nil {
		return x.OwnEntryRemovalEnabled
	}
	return false
}

func (x *ModerationStatusOverview) GetAllSkippingEnabled() bool {
	if x != nil {
		return x.AllSkippingEnabled
	}
	return false
}

func (x *ModerationStatusOverview) GetQueueInsertCursor() string {
	if x != nil && x.QueueInsertCursor != nil {
		return *x.QueueInsertCursor
	}
	return ""
}

func (x *ModerationStatusOverview) GetMinimumPricesMultiplier() int32 {
	if x != nil {
		return x.MinimumPricesMultiplier
	}
	return 0
}

func (x *ModerationStatusOverview) GetActivelyModerating() []*User {
	if x != nil {
		return x.ActivelyModerating
	}
	return nil
}

func (x *ModerationStatusOverview) GetAllowEntryReordering() bool {
	if x != nil {
		return x.AllowEntryReordering
	}
	return false
}

func (x *ModerationStatusOverview) GetVipUsers() []*User {
	if x != nil {
		return x.VipUsers
	}
	return nil
}

type SetQueueEntryReorderingAllowedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Allowed bool `protobuf:"varint,1,opt,name=allowed,proto3" json:"allowed,omitempty"`
}

func (x *SetQueueEntryReorderingAllowedRequest) Reset() {
	*x = SetQueueEntryReorderingAllowedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetQueueEntryReorderingAllowedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetQueueEntryReorderingAllowedRequest) ProtoMessage() {}

func (x *SetQueueEntryReorderingAllowedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetQueueEntryReorderingAllowedRequest.ProtoReflect.Descriptor instead.
func (*SetQueueEntryReorderingAllowedRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{162}
}

func (x *SetQueueEntryReorderingAllowedRequest) GetAllowed() bool {
	if x != nil {
		return x.Allowed
	}
	return false
}

type SetQueueEntryReorderingAllowedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetQueueEntryReorderingAllowedResponse) Reset() {
	*x = SetQueueEntryReorderingAllowedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetQueueEntryReorderingAllowedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetQueueEntryReorderingAllowedResponse) ProtoMessage() {}

func (x *SetQueueEntryReorderingAllowedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetQueueEntryReorderingAllowedResponse.ProtoReflect.Descriptor instead.
func (*SetQueueEntryReorderingAllowedResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{163}
}

type SetOwnQueueEntryRemovalAllowedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Allowed bool `protobuf:"varint,1,opt,name=allowed,proto3" json:"allowed,omitempty"`
}

func (x *SetOwnQueueEntryRemovalAllowedRequest) Reset() {
	*x = SetOwnQueueEntryRemovalAllowedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetOwnQueueEntryRemovalAllowedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOwnQueueEntryRemovalAllowedRequest) ProtoMessage() {}

func (x *SetOwnQueueEntryRemovalAllowedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOwnQueueEntryRemovalAllowedRequest.ProtoReflect.Descriptor instead.
func (*SetOwnQueueEntryRemovalAllowedRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{164}
}

func (x *SetOwnQueueEntryRemovalAllowedRequest) GetAllowed() bool {
	if x != nil {
		return x.Allowed
	}
	return false
}

type SetOwnQueueEntryRemovalAllowedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetOwnQueueEntryRemovalAllowedResponse) Reset() {
	*x = SetOwnQueueEntryRemovalAllowedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetOwnQueueEntryRemovalAllowedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOwnQueueEntryRemovalAllowedResponse) ProtoMessage() {}

func (x *SetOwnQueueEntryRemovalAllowedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOwnQueueEntryRemovalAllowedResponse.ProtoReflect.Descriptor instead.
func (*SetOwnQueueEntryRemovalAllowedResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{165}
}

type SetNewQueueEntriesAlwaysUnskippableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *SetNewQueueEntriesAlwaysUnskippableRequest) Reset() {
	*x = SetNewQueueEntriesAlwaysUnskippableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNewQueueEntriesAlwaysUnskippableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNewQueueEntriesAlwaysUnskippableRequest) ProtoMessage() {}

func (x *SetNewQueueEntriesAlwaysUnskippableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNewQueueEntriesAlwaysUnskippableRequest.ProtoReflect.Descriptor instead.
func (*SetNewQueueEntriesAlwaysUnskippableRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{166}
}

func (x *SetNewQueueEntriesAlwaysUnskippableRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type SetNewQueueEntriesAlwaysUnskippableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetNewQueueEntriesAlwaysUnskippableResponse) Reset() {
	*x = SetNewQueueEntriesAlwaysUnskippableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNewQueueEntriesAlwaysUnskippableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNewQueueEntriesAlwaysUnskippableResponse) ProtoMessage() {}

func (x *SetNewQueueEntriesAlwaysUnskippableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNewQueueEntriesAlwaysUnskippableResponse.ProtoReflect.Descriptor instead.
func (*SetNewQueueEntriesAlwaysUnskippableResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{167}
}

type SetSkippingEnabledRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *SetSkippingEnabledRequest) Reset() {
	*x = SetSkippingEnabledRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSkippingEnabledRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSkippingEnabledRequest) ProtoMessage() {}

func (x *SetSkippingEnabledRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSkippingEnabledRequest.ProtoReflect.Descriptor instead.
func (*SetSkippingEnabledRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{168}
}

func (x *SetSkippingEnabledRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type SetSkippingEnabledResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetSkippingEnabledResponse) Reset() {
	*x = SetSkippingEnabledResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSkippingEnabledResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSkippingEnabledResponse) ProtoMessage() {}

func (x *SetSkippingEnabledResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSkippingEnabledResponse.ProtoReflect.Descriptor instead.
func (*SetSkippingEnabledResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{169}
}

type ConnectionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConnectionsRequest) Reset() {
	*x = ConnectionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionsRequest) ProtoMessage() {}

func (x *ConnectionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionsRequest.ProtoReflect.Descriptor instead.
func (*ConnectionsRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{170}
}

type Connection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Service   ConnectionService      `protobuf:"varint,2,opt,name=service,proto3,enum=jungletv.ConnectionService" json:"service,omitempty"`
	Name      string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *Connection) Reset() {
	*x = Connection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Connection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connection) ProtoMessage() {}

func (x *Connection) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connection.ProtoReflect.Descriptor instead.
func (*Connection) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{171}
}

func (x *Connection) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Connection) GetService() ConnectionService {
	if x != nil {
		return x.Service
	}
	return ConnectionService_UNKNOWN_CONNECTION_SERVICE
}

func (x *Connection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Connection) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type ServiceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service        ConnectionService `protobuf:"varint,1,opt,name=service,proto3,enum=jungletv.ConnectionService" json:"service,omitempty"`
	MaxConnections *int32            `protobuf:"varint,2,opt,name=max_connections,json=maxConnections,proto3,oneof" json:"max_connections,omitempty"`
}

func (x *ServiceInfo) Reset() {
	*x = ServiceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceInfo) ProtoMessage() {}

func (x *ServiceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceInfo.ProtoReflect.Descriptor instead.
func (*ServiceInfo) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{172}
}

func (x *ServiceInfo) GetService() ConnectionService {
	if x != nil {
		return x.Service
	}
	return ConnectionService_UNKNOWN_CONNECTION_SERVICE
}

func (x *ServiceInfo) GetMaxConnections() int32 {
	if x != nil && x.MaxConnections != nil {
		return *x.MaxConnections
	}
	return 0
}

type ConnectionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connections  []*Connection  `protobuf:"bytes,1,rep,name=connections,proto3" json:"connections,omitempty"`
	ServiceInfos []*ServiceInfo `protobuf:"bytes,2,rep,name=service_infos,json=serviceInfos,proto3" json:"service_infos,omitempty"`
}

func (x *ConnectionsResponse) Reset() {
	*x = ConnectionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionsResponse) ProtoMessage() {}

func (x *ConnectionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionsResponse.ProtoReflect.Descriptor instead.
func (*ConnectionsResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{173}
}

func (x *ConnectionsResponse) GetConnections() []*Connection {
	if x != nil {
		return x.Connections
	}
	return nil
}

func (x *ConnectionsResponse) GetServiceInfos() []*ServiceInfo {
	if x != nil {
		return x.ServiceInfos
	}
	return nil
}

type CreateConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service ConnectionService `protobuf:"varint,1,opt,name=service,proto3,enum=jungletv.ConnectionService" json:"service,omitempty"`
}

func (x *CreateConnectionRequest) Reset() {
	*x = CreateConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConnectionRequest) ProtoMessage() {}

func (x *CreateConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConnectionRequest.ProtoReflect.Descriptor instead.
func (*CreateConnectionRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{174}
}

func (x *CreateConnectionRequest) GetService() ConnectionService {
	if x != nil {
		return x.Service
	}
	return ConnectionService_UNKNOWN_CONNECTION_SERVICE
}

type CreateConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthUrl string `protobuf:"bytes,1,opt,name=auth_url,json=authUrl,proto3" json:"auth_url,omitempty"`
}

func (x *CreateConnectionResponse) Reset() {
	*x = CreateConnectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConnectionResponse) ProtoMessage() {}

func (x *CreateConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConnectionResponse.ProtoReflect.Descriptor instead.
func (*CreateConnectionResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{175}
}

func (x *CreateConnectionResponse) GetAuthUrl() string {
	if x != nil {
		return x.AuthUrl
	}
	return ""
}

type RemoveConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RemoveConnectionRequest) Reset() {
	*x = RemoveConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveConnectionRequest) ProtoMessage() {}

func (x *RemoveConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveConnectionRequest.ProtoReflect.Descriptor instead.
func (*RemoveConnectionRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{176}
}

func (x *RemoveConnectionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RemoveConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveConnectionResponse) Reset() {
	*x = RemoveConnectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveConnectionResponse) ProtoMessage() {}

func (x *RemoveConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveConnectionResponse.ProtoReflect.Descriptor instead.
func (*RemoveConnectionResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{177}
}

type SetQueueInsertCursorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SetQueueInsertCursorRequest) Reset() {
	*x = SetQueueInsertCursorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetQueueInsertCursorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetQueueInsertCursorRequest) ProtoMessage() {}

func (x *SetQueueInsertCursorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetQueueInsertCursorRequest.ProtoReflect.Descriptor instead.
func (*SetQueueInsertCursorRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{178}
}

func (x *SetQueueInsertCursorRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SetQueueInsertCursorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetQueueInsertCursorResponse) Reset() {
	*x = SetQueueInsertCursorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetQueueInsertCursorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetQueueInsertCursorResponse) ProtoMessage() {}

func (x *SetQueueInsertCursorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetQueueInsertCursorResponse.ProtoReflect.Descriptor instead.
func (*SetQueueInsertCursorResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{179}
}

type ClearQueueInsertCursorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClearQueueInsertCursorRequest) Reset() {
	*x = ClearQueueInsertCursorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearQueueInsertCursorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearQueueInsertCursorRequest) ProtoMessage() {}

func (x *ClearQueueInsertCursorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearQueueInsertCursorRequest.ProtoReflect.Descriptor instead.
func (*ClearQueueInsertCursorRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{180}
}

type ClearQueueInsertCursorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClearQueueInsertCursorResponse) Reset() {
	*x = ClearQueueInsertCursorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearQueueInsertCursorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearQueueInsertCursorResponse) ProtoMessage() {}

func (x *ClearQueueInsertCursorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearQueueInsertCursorResponse.ProtoReflect.Descriptor instead.
func (*ClearQueueInsertCursorResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{181}
}

type UserProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *UserProfileRequest) Reset() {
	*x = UserProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProfileRequest) ProtoMessage() {}

func (x *UserProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProfileRequest.ProtoReflect.Descriptor instead.
func (*UserProfileRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{182}
}

func (x *UserProfileRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type UserProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User                   *User                `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	RecentlyPlayedRequests []*PlayedMedia       `protobuf:"bytes,2,rep,name=recently_played_requests,json=recentlyPlayedRequests,proto3" json:"recently_played_requests,omitempty"`
	Biography              string               `protobuf:"bytes,3,opt,name=biography,proto3" json:"biography,omitempty"`
	CurrentSubscription    *SubscriptionDetails `protobuf:"bytes,4,opt,name=current_subscription,json=currentSubscription,proto3,oneof" json:"current_subscription,omitempty"`
	// Types that are assignable to FeaturedMedia:
	//	*UserProfileResponse_YoutubeVideoData
	//	*UserProfileResponse_SoundcloudTrackData
	//	*UserProfileResponse_DocumentData
	FeaturedMedia isUserProfileResponse_FeaturedMedia `protobuf_oneof:"featured_media"`
}

func (x *UserProfileResponse) Reset() {
	*x = UserProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProfileResponse) ProtoMessage() {}

func (x *UserProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProfileResponse.ProtoReflect.Descriptor instead.
func (*UserProfileResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{183}
}

func (x *UserProfileResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *UserProfileResponse) GetRecentlyPlayedRequests() []*PlayedMedia {
	if x != nil {
		return x.RecentlyPlayedRequests
	}
	return nil
}

func (x *UserProfileResponse) GetBiography() string {
	if x != nil {
		return x.Biography
	}
	return ""
}

func (x *UserProfileResponse) GetCurrentSubscription() *SubscriptionDetails {
	if x != nil {
		return x.CurrentSubscription
	}
	return nil
}

func (m *UserProfileResponse) GetFeaturedMedia() isUserProfileResponse_FeaturedMedia {
	if m != nil {
		return m.FeaturedMedia
	}
	return nil
}

func (x *UserProfileResponse) GetYoutubeVideoData() *QueueYouTubeVideoData {
	if x, ok := x.GetFeaturedMedia().(*UserProfileResponse_YoutubeVideoData); ok {
		return x.YoutubeVideoData
	}
	return nil
}

func (x *UserProfileResponse) GetSoundcloudTrackData() *QueueSoundCloudTrackData {
	if x, ok := x.GetFeaturedMedia().(*UserProfileResponse_SoundcloudTrackData); ok {
		return x.SoundcloudTrackData
	}
	return nil
}

func (x *UserProfileResponse) GetDocumentData() *QueueDocumentData {
	if x, ok := x.GetFeaturedMedia().(*UserProfileResponse_DocumentData); ok {
		return x.DocumentData
	}
	return nil
}

type isUserProfileResponse_FeaturedMedia interface {
	isUserProfileResponse_FeaturedMedia()
}

type UserProfileResponse_YoutubeVideoData struct {
	YoutubeVideoData *QueueYouTubeVideoData `protobuf:"bytes,5,opt,name=youtube_video_data,json=youtubeVideoData,proto3,oneof"`
}

type UserProfileResponse_SoundcloudTrackData struct {
	SoundcloudTrackData *QueueSoundCloudTrackData `protobuf:"bytes,6,opt,name=soundcloud_track_data,json=soundcloudTrackData,proto3,oneof"`
}

type UserProfileResponse_DocumentData struct {
	DocumentData *QueueDocumentData `protobuf:"bytes,7,opt,name=document_data,json=documentData,proto3,oneof"`
}

func (*UserProfileResponse_YoutubeVideoData) isUserProfileResponse_FeaturedMedia() {}

func (*UserProfileResponse_SoundcloudTrackData) isUserProfileResponse_FeaturedMedia() {}

func (*UserProfileResponse_DocumentData) isUserProfileResponse_FeaturedMedia() {}

type UserStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *UserStatsRequest) Reset() {
	*x = UserStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStatsRequest) ProtoMessage() {}

func (x *UserStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStatsRequest.ProtoReflect.Descriptor instead.
func (*UserStatsRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{184}
}

func (x *UserStatsRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type UserStatsForPeriod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalSpent             string               `protobuf:"bytes,1,opt,name=total_spent,json=totalSpent,proto3" json:"total_spent,omitempty"`
	TotalWithdrawn         string               `protobuf:"bytes,2,opt,name=total_withdrawn,json=totalWithdrawn,proto3" json:"total_withdrawn,omitempty"`
	RequestedMediaCount    int32                `protobuf:"varint,3,opt,name=requested_media_count,json=requestedMediaCount,proto3" json:"requested_media_count,omitempty"`
	RequestedMediaPlayTime *durationpb.Duration `protobuf:"bytes,4,opt,name=requested_media_play_time,json=requestedMediaPlayTime,proto3" json:"requested_media_play_time,omitempty"`
}

func (x *UserStatsForPeriod) Reset() {
	*x = UserStatsForPeriod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStatsForPeriod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStatsForPeriod) ProtoMessage() {}

func (x *UserStatsForPeriod) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStatsForPeriod.ProtoReflect.Descriptor instead.
func (*UserStatsForPeriod) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{185}
}

func (x *UserStatsForPeriod) GetTotalSpent() string {
	if x != nil {
		return x.TotalSpent
	}
	return ""
}

func (x *UserStatsForPeriod) GetTotalWithdrawn() string {
	if x != nil {
		return x.TotalWithdrawn
	}
	return ""
}

func (x *UserStatsForPeriod) GetRequestedMediaCount() int32 {
	if x != nil {
		return x.RequestedMediaCount
	}
	return 0
}

func (x *UserStatsForPeriod) GetRequestedMediaPlayTime() *durationpb.Duration {
	if x != nil {
		return x.RequestedMediaPlayTime
	}
	return nil
}

type UserStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatsAllTime *UserStatsForPeriod `protobuf:"bytes,1,opt,name=stats_all_time,json=statsAllTime,proto3" json:"stats_all_time,omitempty"`
	Stats_30Days *UserStatsForPeriod `protobuf:"bytes,2,opt,name=stats_30_days,json=stats30Days,proto3" json:"stats_30_days,omitempty"`
	Stats_7Days  *UserStatsForPeriod `protobuf:"bytes,3,opt,name=stats_7_days,json=stats7Days,proto3" json:"stats_7_days,omitempty"`
}

func (x *UserStatsResponse) Reset() {
	*x = UserStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStatsResponse) ProtoMessage() {}

func (x *UserStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStatsResponse.ProtoReflect.Descriptor instead.
func (*UserStatsResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{186}
}

func (x *UserStatsResponse) GetStatsAllTime() *UserStatsForPeriod {
	if x != nil {
		return x.StatsAllTime
	}
	return nil
}

func (x *UserStatsResponse) GetStats_30Days() *UserStatsForPeriod {
	if x != nil {
		return x.Stats_30Days
	}
	return nil
}

func (x *UserStatsResponse) GetStats_7Days() *UserStatsForPeriod {
	if x != nil {
		return x.Stats_7Days
	}
	return nil
}

type PlayedMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RequestedBy *User                  `protobuf:"bytes,2,opt,name=requested_by,json=requestedBy,proto3,oneof" json:"requested_by,omitempty"`
	RequestCost string                 `protobuf:"bytes,3,opt,name=request_cost,json=requestCost,proto3" json:"request_cost,omitempty"`
	EnqueuedAt  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=enqueued_at,json=enqueuedAt,proto3" json:"enqueued_at,omitempty"`
	StartedAt   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	EndedAt     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=ended_at,json=endedAt,proto3,oneof" json:"ended_at,omitempty"`
	Length      *durationpb.Duration   `protobuf:"bytes,7,opt,name=length,proto3" json:"length,omitempty"`
	Offset      *durationpb.Duration   `protobuf:"bytes,8,opt,name=offset,proto3" json:"offset,omitempty"`
	Unskippable bool                   `protobuf:"varint,9,opt,name=unskippable,proto3" json:"unskippable,omitempty"`
	// Types that are assignable to MediaInfo:
	//	*PlayedMedia_YoutubeVideoData
	//	*PlayedMedia_SoundcloudTrackData
	//	*PlayedMedia_DocumentData
	//	*PlayedMedia_ApplicationPageData
	MediaInfo isPlayedMedia_MediaInfo `protobuf_oneof:"media_info"`
}

func (x *PlayedMedia) Reset() {
	*x = PlayedMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayedMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayedMedia) ProtoMessage() {}

func (x *PlayedMedia) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayedMedia.ProtoReflect.Descriptor instead.
func (*PlayedMedia) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{187}
}

func (x *PlayedMedia) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PlayedMedia) GetRequestedBy() *User {
	if x != nil {
		return x.RequestedBy
	}
	return nil
}

func (x *PlayedMedia) GetRequestCost() string {
	if x != nil {
		return x.RequestCost
	}
	return ""
}

func (x *PlayedMedia) GetEnqueuedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EnqueuedAt
	}
	return nil
}

func (x *PlayedMedia) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *PlayedMedia) GetEndedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndedAt
	}
	return nil
}

func (x *PlayedMedia) GetLength() *durationpb.Duration {
	if x != nil {
		return x.Length
	}
	return nil
}

func (x *PlayedMedia) GetOffset() *durationpb.Duration {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *PlayedMedia) GetUnskippable() bool {
	if x != nil {
		return x.Unskippable
	}
	return false
}

func (m *PlayedMedia) GetMediaInfo() isPlayedMedia_MediaInfo {
	if m != nil {
		return m.MediaInfo
	}
	return nil
}

func (x *PlayedMedia) GetYoutubeVideoData() *QueueYouTubeVideoData {
	if x, ok := x.GetMediaInfo().(*PlayedMedia_YoutubeVideoData); ok {
		return x.YoutubeVideoData
	}
	return nil
}

func (x *PlayedMedia) GetSoundcloudTrackData() *QueueSoundCloudTrackData {
	if x, ok := x.GetMediaInfo().(*PlayedMedia_SoundcloudTrackData); ok {
		return x.SoundcloudTrackData
	}
	return nil
}

func (x *PlayedMedia) GetDocumentData() *QueueDocumentData {
	if x, ok := x.GetMediaInfo().(*PlayedMedia_DocumentData); ok {
		return x.DocumentData
	}
	return nil
}

func (x *PlayedMedia) GetApplicationPageData() *QueueApplicationPageData {
	if x, ok := x.GetMediaInfo().(*PlayedMedia_ApplicationPageData); ok {
		return x.ApplicationPageData
	}
	return nil
}

type isPlayedMedia_MediaInfo interface {
	isPlayedMedia_MediaInfo()
}

type PlayedMedia_YoutubeVideoData struct {
	YoutubeVideoData *QueueYouTubeVideoData `protobuf:"bytes,10,opt,name=youtube_video_data,json=youtubeVideoData,proto3,oneof"`
}

type PlayedMedia_SoundcloudTrackData struct {
	SoundcloudTrackData *QueueSoundCloudTrackData `protobuf:"bytes,11,opt,name=soundcloud_track_data,json=soundcloudTrackData,proto3,oneof"`
}

type PlayedMedia_DocumentData struct {
	DocumentData *QueueDocumentData `protobuf:"bytes,12,opt,name=document_data,json=documentData,proto3,oneof"`
}

type PlayedMedia_ApplicationPageData struct {
	ApplicationPageData *QueueApplicationPageData `protobuf:"bytes,13,opt,name=application_page_data,json=applicationPageData,proto3,oneof"`
}

func (*PlayedMedia_YoutubeVideoData) isPlayedMedia_MediaInfo() {}

func (*PlayedMedia_SoundcloudTrackData) isPlayedMedia_MediaInfo() {}

func (*PlayedMedia_DocumentData) isPlayedMedia_MediaInfo() {}

func (*PlayedMedia_ApplicationPageData) isPlayedMedia_MediaInfo() {}

type SetProfileBiographyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Biography string `protobuf:"bytes,1,opt,name=biography,proto3" json:"biography,omitempty"`
}

func (x *SetProfileBiographyRequest) Reset() {
	*x = SetProfileBiographyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetProfileBiographyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetProfileBiographyRequest) ProtoMessage() {}

func (x *SetProfileBiographyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetProfileBiographyRequest.ProtoReflect.Descriptor instead.
func (*SetProfileBiographyRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{188}
}

func (x *SetProfileBiographyRequest) GetBiography() string {
	if x != nil {
		return x.Biography
	}
	return ""
}

type SetProfileBiographyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetProfileBiographyResponse) Reset() {
	*x = SetProfileBiographyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetProfileBiographyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetProfileBiographyResponse) ProtoMessage() {}

func (x *SetProfileBiographyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetProfileBiographyResponse.ProtoReflect.Descriptor instead.
func (*SetProfileBiographyResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{189}
}

type SetProfileFeaturedMediaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaId *string `protobuf:"bytes,1,opt,name=media_id,json=mediaId,proto3,oneof" json:"media_id,omitempty"`
}

func (x *SetProfileFeaturedMediaRequest) Reset() {
	*x = SetProfileFeaturedMediaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetProfileFeaturedMediaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetProfileFeaturedMediaRequest) ProtoMessage() {}

func (x *SetProfileFeaturedMediaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetProfileFeaturedMediaRequest.ProtoReflect.Descriptor instead.
func (*SetProfileFeaturedMediaRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{190}
}

func (x *SetProfileFeaturedMediaRequest) GetMediaId() string {
	if x != nil && x.MediaId != nil {
		return *x.MediaId
	}
	return ""
}

type SetProfileFeaturedMediaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetProfileFeaturedMediaResponse) Reset() {
	*x = SetProfileFeaturedMediaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetProfileFeaturedMediaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetProfileFeaturedMediaResponse) ProtoMessage() {}

func (x *SetProfileFeaturedMediaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetProfileFeaturedMediaResponse.ProtoReflect.Descriptor instead.
func (*SetProfileFeaturedMediaResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{191}
}

type ClearUserProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *ClearUserProfileRequest) Reset() {
	*x = ClearUserProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearUserProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearUserProfileRequest) ProtoMessage() {}

func (x *ClearUserProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearUserProfileRequest.ProtoReflect.Descriptor instead.
func (*ClearUserProfileRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{192}
}

func (x *ClearUserProfileRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type ClearUserProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClearUserProfileResponse) Reset() {
	*x = ClearUserProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearUserProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearUserProfileResponse) ProtoMessage() {}

func (x *ClearUserProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearUserProfileResponse.ProtoReflect.Descriptor instead.
func (*ClearUserProfileResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{193}
}

type PlayedMediaHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaginationParams *PaginationParameters `protobuf:"bytes,1,opt,name=pagination_params,json=paginationParams,proto3" json:"pagination_params,omitempty"`
	SearchQuery      string                `protobuf:"bytes,2,opt,name=search_query,json=searchQuery,proto3" json:"search_query,omitempty"`
}

func (x *PlayedMediaHistoryRequest) Reset() {
	*x = PlayedMediaHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayedMediaHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayedMediaHistoryRequest) ProtoMessage() {}

func (x *PlayedMediaHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayedMediaHistoryRequest.ProtoReflect.Descriptor instead.
func (*PlayedMediaHistoryRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{194}
}

func (x *PlayedMediaHistoryRequest) GetPaginationParams() *PaginationParameters {
	if x != nil {
		return x.PaginationParams
	}
	return nil
}

func (x *PlayedMediaHistoryRequest) GetSearchQuery() string {
	if x != nil {
		return x.SearchQuery
	}
	return ""
}

type PlayedMediaHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayedMedia []*PlayedMedia `protobuf:"bytes,1,rep,name=played_media,json=playedMedia,proto3" json:"played_media,omitempty"`
	Offset      uint64         `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Total       uint64         `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *PlayedMediaHistoryResponse) Reset() {
	*x = PlayedMediaHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayedMediaHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayedMediaHistoryResponse) ProtoMessage() {}

func (x *PlayedMediaHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayedMediaHistoryResponse.ProtoReflect.Descriptor instead.
func (*PlayedMediaHistoryResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{195}
}

func (x *PlayedMediaHistoryResponse) GetPlayedMedia() []*PlayedMedia {
	if x != nil {
		return x.PlayedMedia
	}
	return nil
}

func (x *PlayedMediaHistoryResponse) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *PlayedMediaHistoryResponse) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type BlockUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *BlockUserRequest) Reset() {
	*x = BlockUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockUserRequest) ProtoMessage() {}

func (x *BlockUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockUserRequest.ProtoReflect.Descriptor instead.
func (*BlockUserRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{196}
}

func (x *BlockUserRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type BlockUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BlockUserResponse) Reset() {
	*x = BlockUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockUserResponse) ProtoMessage() {}

func (x *BlockUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockUserResponse.ProtoReflect.Descriptor instead.
func (*BlockUserResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{197}
}

type UnblockUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to BlockIdentification:
	//	*UnblockUserRequest_BlockId
	//	*UnblockUserRequest_Address
	BlockIdentification isUnblockUserRequest_BlockIdentification `protobuf_oneof:"block_identification"`
}

func (x *UnblockUserRequest) Reset() {
	*x = UnblockUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnblockUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnblockUserRequest) ProtoMessage() {}

func (x *UnblockUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnblockUserRequest.ProtoReflect.Descriptor instead.
func (*UnblockUserRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{198}
}

func (m *UnblockUserRequest) GetBlockIdentification() isUnblockUserRequest_BlockIdentification {
	if m != nil {
		return m.BlockIdentification
	}
	return nil
}

func (x *UnblockUserRequest) GetBlockId() string {
	if x, ok := x.GetBlockIdentification().(*UnblockUserRequest_BlockId); ok {
		return x.BlockId
	}
	return ""
}

func (x *UnblockUserRequest) GetAddress() string {
	if x, ok := x.GetBlockIdentification().(*UnblockUserRequest_Address); ok {
		return x.Address
	}
	return ""
}

type isUnblockUserRequest_BlockIdentification interface {
	isUnblockUserRequest_BlockIdentification()
}

type UnblockUserRequest_BlockId struct {
	BlockId string `protobuf:"bytes,1,opt,name=block_id,json=blockId,proto3,oneof"`
}

type UnblockUserRequest_Address struct {
	Address string `protobuf:"bytes,2,opt,name=address,proto3,oneof"`
}

func (*UnblockUserRequest_BlockId) isUnblockUserRequest_BlockIdentification() {}

func (*UnblockUserRequest_Address) isUnblockUserRequest_BlockIdentification() {}

type UnblockUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnblockUserResponse) Reset() {
	*x = UnblockUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnblockUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnblockUserResponse) ProtoMessage() {}

func (x *UnblockUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnblockUserResponse.ProtoReflect.Descriptor instead.
func (*UnblockUserResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{199}
}

type BlockedUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaginationParams *PaginationParameters `protobuf:"bytes,1,opt,name=pagination_params,json=paginationParams,proto3" json:"pagination_params,omitempty"`
}

func (x *BlockedUsersRequest) Reset() {
	*x = BlockedUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockedUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockedUsersRequest) ProtoMessage() {}

func (x *BlockedUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockedUsersRequest.ProtoReflect.Descriptor instead.
func (*BlockedUsersRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{200}
}

func (x *BlockedUsersRequest) GetPaginationParams() *PaginationParameters {
	if x != nil {
		return x.PaginationParams
	}
	return nil
}

type BlockedUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BlockedUser *User                  `protobuf:"bytes,2,opt,name=blocked_user,json=blockedUser,proto3" json:"blocked_user,omitempty"`
	BlockedBy   *User                  `protobuf:"bytes,3,opt,name=blocked_by,json=blockedBy,proto3" json:"blocked_by,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *BlockedUser) Reset() {
	*x = BlockedUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockedUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockedUser) ProtoMessage() {}

func (x *BlockedUser) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockedUser.ProtoReflect.Descriptor instead.
func (*BlockedUser) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{201}
}

func (x *BlockedUser) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BlockedUser) GetBlockedUser() *User {
	if x != nil {
		return x.BlockedUser
	}
	return nil
}

func (x *BlockedUser) GetBlockedBy() *User {
	if x != nil {
		return x.BlockedBy
	}
	return nil
}

func (x *BlockedUser) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type BlockedUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockedUsers []*BlockedUser `protobuf:"bytes,1,rep,name=blocked_users,json=blockedUsers,proto3" json:"blocked_users,omitempty"`
	Offset       uint64         `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Total        uint64         `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *BlockedUsersResponse) Reset() {
	*x = BlockedUsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockedUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockedUsersResponse) ProtoMessage() {}

func (x *BlockedUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockedUsersResponse.ProtoReflect.Descriptor instead.
func (*BlockedUsersResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{202}
}

func (x *BlockedUsersResponse) GetBlockedUsers() []*BlockedUser {
	if x != nil {
		return x.BlockedUsers
	}
	return nil
}

func (x *BlockedUsersResponse) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *BlockedUsersResponse) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type MarkAsActivelyModeratingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MarkAsActivelyModeratingRequest) Reset() {
	*x = MarkAsActivelyModeratingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkAsActivelyModeratingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkAsActivelyModeratingRequest) ProtoMessage() {}

func (x *MarkAsActivelyModeratingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkAsActivelyModeratingRequest.ProtoReflect.Descriptor instead.
func (*MarkAsActivelyModeratingRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{203}
}

type MarkAsActivelyModeratingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MarkAsActivelyModeratingResponse) Reset() {
	*x = MarkAsActivelyModeratingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkAsActivelyModeratingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkAsActivelyModeratingResponse) ProtoMessage() {}

func (x *MarkAsActivelyModeratingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkAsActivelyModeratingResponse.ProtoReflect.Descriptor instead.
func (*MarkAsActivelyModeratingResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{204}
}

type StopActivelyModeratingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopActivelyModeratingRequest) Reset() {
	*x = StopActivelyModeratingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopActivelyModeratingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopActivelyModeratingRequest) ProtoMessage() {}

func (x *StopActivelyModeratingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopActivelyModeratingRequest.ProtoReflect.Descriptor instead.
func (*StopActivelyModeratingRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{205}
}

type StopActivelyModeratingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopActivelyModeratingResponse) Reset() {
	*x = StopActivelyModeratingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopActivelyModeratingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopActivelyModeratingResponse) ProtoMessage() {}

func (x *StopActivelyModeratingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopActivelyModeratingResponse.ProtoReflect.Descriptor instead.
func (*StopActivelyModeratingResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{206}
}

type PointsInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PointsInfoRequest) Reset() {
	*x = PointsInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointsInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointsInfoRequest) ProtoMessage() {}

func (x *PointsInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointsInfoRequest.ProtoReflect.Descriptor instead.
func (*PointsInfoRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{207}
}

type PointsInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance             int32                `protobuf:"varint,1,opt,name=balance,proto3" json:"balance,omitempty"`
	CurrentSubscription *SubscriptionDetails `protobuf:"bytes,2,opt,name=current_subscription,json=currentSubscription,proto3,oneof" json:"current_subscription,omitempty"`
}

func (x *PointsInfoResponse) Reset() {
	*x = PointsInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointsInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointsInfoResponse) ProtoMessage() {}

func (x *PointsInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointsInfoResponse.ProtoReflect.Descriptor instead.
func (*PointsInfoResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{208}
}

func (x *PointsInfoResponse) GetBalance() int32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *PointsInfoResponse) GetCurrentSubscription() *SubscriptionDetails {
	if x != nil {
		return x.CurrentSubscription
	}
	return nil
}

type SubscriptionDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscribedAt    *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=subscribed_at,json=subscribedAt,proto3" json:"subscribed_at,omitempty"`
	SubscribedUntil *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=subscribed_until,json=subscribedUntil,proto3" json:"subscribed_until,omitempty"`
}

func (x *SubscriptionDetails) Reset() {
	*x = SubscriptionDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionDetails) ProtoMessage() {}

func (x *SubscriptionDetails) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionDetails.ProtoReflect.Descriptor instead.
func (*SubscriptionDetails) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{209}
}

func (x *SubscriptionDetails) GetSubscribedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SubscribedAt
	}
	return nil
}

func (x *SubscriptionDetails) GetSubscribedUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.SubscribedUntil
	}
	return nil
}

type PointsTransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaginationParams *PaginationParameters `protobuf:"bytes,1,opt,name=pagination_params,json=paginationParams,proto3" json:"pagination_params,omitempty"`
}

func (x *PointsTransactionsRequest) Reset() {
	*x = PointsTransactionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointsTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointsTransactionsRequest) ProtoMessage() {}

func (x *PointsTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointsTransactionsRequest.ProtoReflect.Descriptor instead.
func (*PointsTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{210}
}

func (x *PointsTransactionsRequest) GetPaginationParams() *PaginationParameters {
	if x != nil {
		return x.PaginationParams
	}
	return nil
}

type PointsTransactionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transactions []*PointsTransaction `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
	Offset       uint64               `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Total        uint64               `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *PointsTransactionsResponse) Reset() {
	*x = PointsTransactionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointsTransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointsTransactionsResponse) ProtoMessage() {}

func (x *PointsTransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointsTransactionsResponse.ProtoReflect.Descriptor instead.
func (*PointsTransactionsResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{211}
}

func (x *PointsTransactionsResponse) GetTransactions() []*PointsTransaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *PointsTransactionsResponse) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *PointsTransactionsResponse) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type PointsTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RewardsAddress string                 `protobuf:"bytes,2,opt,name=rewards_address,json=rewardsAddress,proto3" json:"rewards_address,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Value          int32                  `protobuf:"varint,5,opt,name=value,proto3" json:"value,omitempty"`
	Type           PointsTransactionType  `protobuf:"varint,6,opt,name=type,proto3,enum=jungletv.PointsTransactionType" json:"type,omitempty"`
	Extra          map[string]string      `protobuf:"bytes,7,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PointsTransaction) Reset() {
	*x = PointsTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointsTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointsTransaction) ProtoMessage() {}

func (x *PointsTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointsTransaction.ProtoReflect.Descriptor instead.
func (*PointsTransaction) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{212}
}

func (x *PointsTransaction) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PointsTransaction) GetRewardsAddress() string {
	if x != nil {
		return x.RewardsAddress
	}
	return ""
}

func (x *PointsTransaction) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PointsTransaction) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *PointsTransaction) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *PointsTransaction) GetType() PointsTransactionType {
	if x != nil {
		return x.Type
	}
	return PointsTransactionType_UNKNOWN_POINTS_TRANSACTION_TYPE
}

func (x *PointsTransaction) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type ChatGifSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query  string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Cursor string `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
}

func (x *ChatGifSearchRequest) Reset() {
	*x = ChatGifSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatGifSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatGifSearchRequest) ProtoMessage() {}

func (x *ChatGifSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatGifSearchRequest.ProtoReflect.Descriptor instead.
func (*ChatGifSearchRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{213}
}

func (x *ChatGifSearchRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ChatGifSearchRequest) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

type ChatGifSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results    []*ChatGifSearchResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	NextCursor string                 `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"`
}

func (x *ChatGifSearchResponse) Reset() {
	*x = ChatGifSearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatGifSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatGifSearchResponse) ProtoMessage() {}

func (x *ChatGifSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatGifSearchResponse.ProtoReflect.Descriptor instead.
func (*ChatGifSearchResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{214}
}

func (x *ChatGifSearchResponse) GetResults() []*ChatGifSearchResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ChatGifSearchResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

type ChatGifSearchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title              string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	PreviewUrl         string `protobuf:"bytes,3,opt,name=preview_url,json=previewUrl,proto3" json:"preview_url,omitempty"`
	PreviewFallbackUrl string `protobuf:"bytes,4,opt,name=preview_fallback_url,json=previewFallbackUrl,proto3" json:"preview_fallback_url,omitempty"`
	Width              int32  `protobuf:"varint,5,opt,name=width,proto3" json:"width,omitempty"`
	Height             int32  `protobuf:"varint,6,opt,name=height,proto3" json:"height,omitempty"`
	PointsCost         int32  `protobuf:"varint,7,opt,name=points_cost,json=pointsCost,proto3" json:"points_cost,omitempty"`
}

func (x *ChatGifSearchResult) Reset() {
	*x = ChatGifSearchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatGifSearchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatGifSearchResult) ProtoMessage() {}

func (x *ChatGifSearchResult) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatGifSearchResult.ProtoReflect.Descriptor instead.
func (*ChatGifSearchResult) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{215}
}

func (x *ChatGifSearchResult) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ChatGifSearchResult) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ChatGifSearchResult) GetPreviewUrl() string {
	if x != nil {
		return x.PreviewUrl
	}
	return ""
}

func (x *ChatGifSearchResult) GetPreviewFallbackUrl() string {
	if x != nil {
		return x.PreviewFallbackUrl
	}
	return ""
}

func (x *ChatGifSearchResult) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *ChatGifSearchResult) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ChatGifSearchResult) GetPointsCost() int32 {
	if x != nil {
		return x.PointsCost
	}
	return 0
}

type AdjustPointsBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardsAddress string `protobuf:"bytes,1,opt,name=rewards_address,json=rewardsAddress,proto3" json:"rewards_address,omitempty"`
	Value          int32  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	Reason         string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *AdjustPointsBalanceRequest) Reset() {
	*x = AdjustPointsBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdjustPointsBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdjustPointsBalanceRequest) ProtoMessage() {}

func (x *AdjustPointsBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdjustPointsBalanceRequest.ProtoReflect.Descriptor instead.
func (*AdjustPointsBalanceRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{216}
}

func (x *AdjustPointsBalanceRequest) GetRewardsAddress() string {
	if x != nil {
		return x.RewardsAddress
	}
	return ""
}

func (x *AdjustPointsBalanceRequest) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *AdjustPointsBalanceRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type AdjustPointsBalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AdjustPointsBalanceResponse) Reset() {
	*x = AdjustPointsBalanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdjustPointsBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdjustPointsBalanceResponse) ProtoMessage() {}

func (x *AdjustPointsBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdjustPointsBalanceResponse.ProtoReflect.Descriptor instead.
func (*AdjustPointsBalanceResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{217}
}

type ConvertBananoToPointsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConvertBananoToPointsRequest) Reset() {
	*x = ConvertBananoToPointsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvertBananoToPointsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvertBananoToPointsRequest) ProtoMessage() {}

func (x *ConvertBananoToPointsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvertBananoToPointsRequest.ProtoReflect.Descriptor instead.
func (*ConvertBananoToPointsRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{218}
}

type ConvertBananoToPointsStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentAddress  string                 `protobuf:"bytes,1,opt,name=payment_address,json=paymentAddress,proto3" json:"payment_address,omitempty"`
	BananoConverted string                 `protobuf:"bytes,2,opt,name=banano_converted,json=bananoConverted,proto3" json:"banano_converted,omitempty"`
	PointsConverted int32                  `protobuf:"varint,3,opt,name=points_converted,json=pointsConverted,proto3" json:"points_converted,omitempty"`
	Expiration      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=expiration,proto3" json:"expiration,omitempty"`
	Expired         bool                   `protobuf:"varint,5,opt,name=expired,proto3" json:"expired,omitempty"`
}

func (x *ConvertBananoToPointsStatus) Reset() {
	*x = ConvertBananoToPointsStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvertBananoToPointsStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvertBananoToPointsStatus) ProtoMessage() {}

func (x *ConvertBananoToPointsStatus) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvertBananoToPointsStatus.ProtoReflect.Descriptor instead.
func (*ConvertBananoToPointsStatus) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{219}
}

func (x *ConvertBananoToPointsStatus) GetPaymentAddress() string {
	if x != nil {
		return x.PaymentAddress
	}
	return ""
}

func (x *ConvertBananoToPointsStatus) GetBananoConverted() string {
	if x != nil {
		return x.BananoConverted
	}
	return ""
}

func (x *ConvertBananoToPointsStatus) GetPointsConverted() int32 {
	if x != nil {
		return x.PointsConverted
	}
	return 0
}

func (x *ConvertBananoToPointsStatus) GetExpiration() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiration
	}
	return nil
}

func (x *ConvertBananoToPointsStatus) GetExpired() bool {
	if x != nil {
		return x.Expired
	}
	return false
}

type StartOrExtendSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartOrExtendSubscriptionRequest) Reset() {
	*x = StartOrExtendSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartOrExtendSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartOrExtendSubscriptionRequest) ProtoMessage() {}

func (x *StartOrExtendSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartOrExtendSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*StartOrExtendSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{220}
}

type StartOrExtendSubscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subscription *SubscriptionDetails `protobuf:"bytes,1,opt,name=subscription,proto3" json:"subscription,omitempty"`
}

func (x *StartOrExtendSubscriptionResponse) Reset() {
	*x = StartOrExtendSubscriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartOrExtendSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartOrExtendSubscriptionResponse) ProtoMessage() {}

func (x *StartOrExtendSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartOrExtendSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*StartOrExtendSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{221}
}

func (x *StartOrExtendSubscriptionResponse) GetSubscription() *SubscriptionDetails {
	if x != nil {
		return x.Subscription
	}
	return nil
}

type SoundCloudTrackDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrackUrl string `protobuf:"bytes,1,opt,name=track_url,json=trackUrl,proto3" json:"track_url,omitempty"`
}

func (x *SoundCloudTrackDetailsRequest) Reset() {
	*x = SoundCloudTrackDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoundCloudTrackDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoundCloudTrackDetailsRequest) ProtoMessage() {}

func (x *SoundCloudTrackDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoundCloudTrackDetailsRequest.ProtoReflect.Descriptor instead.
func (*SoundCloudTrackDetailsRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{222}
}

func (x *SoundCloudTrackDetailsRequest) GetTrackUrl() string {
	if x != nil {
		return x.TrackUrl
	}
	return ""
}

type SoundCloudTrackDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Length *durationpb.Duration `protobuf:"bytes,1,opt,name=length,proto3" json:"length,omitempty"`
}

func (x *SoundCloudTrackDetailsResponse) Reset() {
	*x = SoundCloudTrackDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoundCloudTrackDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoundCloudTrackDetailsResponse) ProtoMessage() {}

func (x *SoundCloudTrackDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoundCloudTrackDetailsResponse.ProtoReflect.Descriptor instead.
func (*SoundCloudTrackDetailsResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{223}
}

func (x *SoundCloudTrackDetailsResponse) GetLength() *durationpb.Duration {
	if x != nil {
		return x.Length
	}
	return nil
}

type AddVipUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardsAddress string            `protobuf:"bytes,1,opt,name=rewards_address,json=rewardsAddress,proto3" json:"rewards_address,omitempty"`
	Appearance     VipUserAppearance `protobuf:"varint,2,opt,name=appearance,proto3,enum=jungletv.VipUserAppearance" json:"appearance,omitempty"`
}

func (x *AddVipUserRequest) Reset() {
	*x = AddVipUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddVipUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddVipUserRequest) ProtoMessage() {}

func (x *AddVipUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddVipUserRequest.ProtoReflect.Descriptor instead.
func (*AddVipUserRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{224}
}

func (x *AddVipUserRequest) GetRewardsAddress() string {
	if x != nil {
		return x.RewardsAddress
	}
	return ""
}

func (x *AddVipUserRequest) GetAppearance() VipUserAppearance {
	if x != nil {
		return x.Appearance
	}
	return VipUserAppearance_UNKNOWN_VIP_USER_APPEARANCE
}

type AddVipUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddVipUserResponse) Reset() {
	*x = AddVipUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddVipUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddVipUserResponse) ProtoMessage() {}

func (x *AddVipUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddVipUserResponse.ProtoReflect.Descriptor instead.
func (*AddVipUserResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{225}
}

type RemoveVipUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardsAddress string `protobuf:"bytes,1,opt,name=rewards_address,json=rewardsAddress,proto3" json:"rewards_address,omitempty"`
}

func (x *RemoveVipUserRequest) Reset() {
	*x = RemoveVipUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveVipUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveVipUserRequest) ProtoMessage() {}

func (x *RemoveVipUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveVipUserRequest.ProtoReflect.Descriptor instead.
func (*RemoveVipUserRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{226}
}

func (x *RemoveVipUserRequest) GetRewardsAddress() string {
	if x != nil {
		return x.RewardsAddress
	}
	return ""
}

type RemoveVipUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveVipUserResponse) Reset() {
	*x = RemoveVipUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveVipUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveVipUserResponse) ProtoMessage() {}

func (x *RemoveVipUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveVipUserResponse.ProtoReflect.Descriptor instead.
func (*RemoveVipUserResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{227}
}

type TriggerClientReloadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TriggerClientReloadRequest) Reset() {
	*x = TriggerClientReloadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerClientReloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerClientReloadRequest) ProtoMessage() {}

func (x *TriggerClientReloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerClientReloadRequest.ProtoReflect.Descriptor instead.
func (*TriggerClientReloadRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{228}
}

type TriggerClientReloadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TriggerClientReloadResponse) Reset() {
	*x = TriggerClientReloadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerClientReloadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerClientReloadResponse) ProtoMessage() {}

func (x *TriggerClientReloadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerClientReloadResponse.ProtoReflect.Descriptor instead.
func (*TriggerClientReloadResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{229}
}

type IncreaseOrReduceSkipThresholdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Increase bool `protobuf:"varint,1,opt,name=increase,proto3" json:"increase,omitempty"`
}

func (x *IncreaseOrReduceSkipThresholdRequest) Reset() {
	*x = IncreaseOrReduceSkipThresholdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncreaseOrReduceSkipThresholdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncreaseOrReduceSkipThresholdRequest) ProtoMessage() {}

func (x *IncreaseOrReduceSkipThresholdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncreaseOrReduceSkipThresholdRequest.ProtoReflect.Descriptor instead.
func (*IncreaseOrReduceSkipThresholdRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{230}
}

func (x *IncreaseOrReduceSkipThresholdRequest) GetIncrease() bool {
	if x != nil {
		return x.Increase
	}
	return false
}

type IncreaseOrReduceSkipThresholdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IncreaseOrReduceSkipThresholdResponse) Reset() {
	*x = IncreaseOrReduceSkipThresholdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncreaseOrReduceSkipThresholdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncreaseOrReduceSkipThresholdResponse) ProtoMessage() {}

func (x *IncreaseOrReduceSkipThresholdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncreaseOrReduceSkipThresholdResponse.ProtoReflect.Descriptor instead.
func (*IncreaseOrReduceSkipThresholdResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{231}
}

type SetMulticurrencyPaymentsEnabledRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *SetMulticurrencyPaymentsEnabledRequest) Reset() {
	*x = SetMulticurrencyPaymentsEnabledRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMulticurrencyPaymentsEnabledRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMulticurrencyPaymentsEnabledRequest) ProtoMessage() {}

func (x *SetMulticurrencyPaymentsEnabledRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMulticurrencyPaymentsEnabledRequest.ProtoReflect.Descriptor instead.
func (*SetMulticurrencyPaymentsEnabledRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{232}
}

func (x *SetMulticurrencyPaymentsEnabledRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type SetMulticurrencyPaymentsEnabledResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetMulticurrencyPaymentsEnabledResponse) Reset() {
	*x = SetMulticurrencyPaymentsEnabledResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMulticurrencyPaymentsEnabledResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMulticurrencyPaymentsEnabledResponse) ProtoMessage() {}

func (x *SetMulticurrencyPaymentsEnabledResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMulticurrencyPaymentsEnabledResponse.ProtoReflect.Descriptor instead.
func (*SetMulticurrencyPaymentsEnabledResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{233}
}

type CheckMediaEnqueuingPasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *CheckMediaEnqueuingPasswordRequest) Reset() {
	*x = CheckMediaEnqueuingPasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckMediaEnqueuingPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckMediaEnqueuingPasswordRequest) ProtoMessage() {}

func (x *CheckMediaEnqueuingPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckMediaEnqueuingPasswordRequest.ProtoReflect.Descriptor instead.
func (*CheckMediaEnqueuingPasswordRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{234}
}

func (x *CheckMediaEnqueuingPasswordRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type CheckMediaEnqueuingPasswordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PasswordEdition string `protobuf:"bytes,1,opt,name=password_edition,json=passwordEdition,proto3" json:"password_edition,omitempty"`
}

func (x *CheckMediaEnqueuingPasswordResponse) Reset() {
	*x = CheckMediaEnqueuingPasswordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckMediaEnqueuingPasswordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckMediaEnqueuingPasswordResponse) ProtoMessage() {}

func (x *CheckMediaEnqueuingPasswordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckMediaEnqueuingPasswordResponse.ProtoReflect.Descriptor instead.
func (*CheckMediaEnqueuingPasswordResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{235}
}

func (x *CheckMediaEnqueuingPasswordResponse) GetPasswordEdition() string {
	if x != nil {
		return x.PasswordEdition
	}
	return ""
}

type MonitorMediaEnqueuingPermissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MonitorMediaEnqueuingPermissionRequest) Reset() {
	*x = MonitorMediaEnqueuingPermissionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorMediaEnqueuingPermissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorMediaEnqueuingPermissionRequest) ProtoMessage() {}

func (x *MonitorMediaEnqueuingPermissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorMediaEnqueuingPermissionRequest.ProtoReflect.Descriptor instead.
func (*MonitorMediaEnqueuingPermissionRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{236}
}

type MediaEnqueuingPermissionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowedMediaEnqueuing AllowedMediaEnqueuingType `protobuf:"varint,1,opt,name=allowed_media_enqueuing,json=allowedMediaEnqueuing,proto3,enum=jungletv.AllowedMediaEnqueuingType" json:"allowed_media_enqueuing,omitempty"`
	PasswordEdition       string                    `protobuf:"bytes,2,opt,name=password_edition,json=passwordEdition,proto3" json:"password_edition,omitempty"`
	PasswordIsNumeric     bool                      `protobuf:"varint,3,opt,name=password_is_numeric,json=passwordIsNumeric,proto3" json:"password_is_numeric,omitempty"`
	HasElevatedPrivileges bool                      `protobuf:"varint,4,opt,name=has_elevated_privileges,json=hasElevatedPrivileges,proto3" json:"has_elevated_privileges,omitempty"`
}

func (x *MediaEnqueuingPermissionStatus) Reset() {
	*x = MediaEnqueuingPermissionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaEnqueuingPermissionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaEnqueuingPermissionStatus) ProtoMessage() {}

func (x *MediaEnqueuingPermissionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaEnqueuingPermissionStatus.ProtoReflect.Descriptor instead.
func (*MediaEnqueuingPermissionStatus) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{237}
}

func (x *MediaEnqueuingPermissionStatus) GetAllowedMediaEnqueuing() AllowedMediaEnqueuingType {
	if x != nil {
		return x.AllowedMediaEnqueuing
	}
	return AllowedMediaEnqueuingType_DISABLED
}

func (x *MediaEnqueuingPermissionStatus) GetPasswordEdition() string {
	if x != nil {
		return x.PasswordEdition
	}
	return ""
}

func (x *MediaEnqueuingPermissionStatus) GetPasswordIsNumeric() bool {
	if x != nil {
		return x.PasswordIsNumeric
	}
	return false
}

func (x *MediaEnqueuingPermissionStatus) GetHasElevatedPrivileges() bool {
	if x != nil {
		return x.HasElevatedPrivileges
	}
	return false
}

type InvalidateAuthTokensRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InvalidateAuthTokensRequest) Reset() {
	*x = InvalidateAuthTokensRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvalidateAuthTokensRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidateAuthTokensRequest) ProtoMessage() {}

func (x *InvalidateAuthTokensRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidateAuthTokensRequest.ProtoReflect.Descriptor instead.
func (*InvalidateAuthTokensRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{238}
}

type InvalidateAuthTokensResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InvalidateAuthTokensResponse) Reset() {
	*x = InvalidateAuthTokensResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvalidateAuthTokensResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidateAuthTokensResponse) ProtoMessage() {}

func (x *InvalidateAuthTokensResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidateAuthTokensResponse.ProtoReflect.Descriptor instead.
func (*InvalidateAuthTokensResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{239}
}

type InvalidateUserAuthTokensRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *InvalidateUserAuthTokensRequest) Reset() {
	*x = InvalidateUserAuthTokensRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvalidateUserAuthTokensRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidateUserAuthTokensRequest) ProtoMessage() {}

func (x *InvalidateUserAuthTokensRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidateUserAuthTokensRequest.ProtoReflect.Descriptor instead.
func (*InvalidateUserAuthTokensRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{240}
}

func (x *InvalidateUserAuthTokensRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type InvalidateUserAuthTokensResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InvalidateUserAuthTokensResponse) Reset() {
	*x = InvalidateUserAuthTokensResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvalidateUserAuthTokensResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidateUserAuthTokensResponse) ProtoMessage() {}

func (x *InvalidateUserAuthTokensResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidateUserAuthTokensResponse.ProtoReflect.Descriptor instead.
func (*InvalidateUserAuthTokensResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{241}
}

type AuthorizeApplicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationName        string          `protobuf:"bytes,1,opt,name=application_name,json=applicationName,proto3" json:"application_name,omitempty"`
	DesiredPermissionLevel PermissionLevel `protobuf:"varint,2,opt,name=desired_permission_level,json=desiredPermissionLevel,proto3,enum=jungletv.PermissionLevel" json:"desired_permission_level,omitempty"`
	Reason                 string          `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *AuthorizeApplicationRequest) Reset() {
	*x = AuthorizeApplicationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizeApplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizeApplicationRequest) ProtoMessage() {}

func (x *AuthorizeApplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizeApplicationRequest.ProtoReflect.Descriptor instead.
func (*AuthorizeApplicationRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{242}
}

func (x *AuthorizeApplicationRequest) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

func (x *AuthorizeApplicationRequest) GetDesiredPermissionLevel() PermissionLevel {
	if x != nil {
		return x.DesiredPermissionLevel
	}
	return PermissionLevel_UNAUTHENTICATED
}

func (x *AuthorizeApplicationRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type AuthorizeApplicationEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//	*AuthorizeApplicationEvent_Heartbeat
	//	*AuthorizeApplicationEvent_AuthorizationUrl
	//	*AuthorizeApplicationEvent_Approved
	Event isAuthorizeApplicationEvent_Event `protobuf_oneof:"event"`
}

func (x *AuthorizeApplicationEvent) Reset() {
	*x = AuthorizeApplicationEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizeApplicationEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizeApplicationEvent) ProtoMessage() {}

func (x *AuthorizeApplicationEvent) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizeApplicationEvent.ProtoReflect.Descriptor instead.
func (*AuthorizeApplicationEvent) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{243}
}

func (m *AuthorizeApplicationEvent) GetEvent() isAuthorizeApplicationEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *AuthorizeApplicationEvent) GetHeartbeat() *AuthorizeApplicationHeartbeatEvent {
	if x, ok := x.GetEvent().(*AuthorizeApplicationEvent_Heartbeat); ok {
		return x.Heartbeat
	}
	return nil
}

func (x *AuthorizeApplicationEvent) GetAuthorizationUrl() *AuthorizeApplicationAuthorizationURLEvent {
	if x, ok := x.GetEvent().(*AuthorizeApplicationEvent_AuthorizationUrl); ok {
		return x.AuthorizationUrl
	}
	return nil
}

func (x *AuthorizeApplicationEvent) GetApproved() *AuthorizeApplicationApprovedEvent {
	if x, ok := x.GetEvent().(*AuthorizeApplicationEvent_Approved); ok {
		return x.Approved
	}
	return nil
}

type isAuthorizeApplicationEvent_Event interface {
	isAuthorizeApplicationEvent_Event()
}

type AuthorizeApplicationEvent_Heartbeat struct {
	Heartbeat *AuthorizeApplicationHeartbeatEvent `protobuf:"bytes,1,opt,name=heartbeat,proto3,oneof"`
}

type AuthorizeApplicationEvent_AuthorizationUrl struct {
	AuthorizationUrl *AuthorizeApplicationAuthorizationURLEvent `protobuf:"bytes,2,opt,name=authorization_url,json=authorizationUrl,proto3,oneof"`
}

type AuthorizeApplicationEvent_Approved struct {
	Approved *AuthorizeApplicationApprovedEvent `protobuf:"bytes,3,opt,name=approved,proto3,oneof"`
}

func (*AuthorizeApplicationEvent_Heartbeat) isAuthorizeApplicationEvent_Event() {}

func (*AuthorizeApplicationEvent_AuthorizationUrl) isAuthorizeApplicationEvent_Event() {}

func (*AuthorizeApplicationEvent_Approved) isAuthorizeApplicationEvent_Event() {}

type AuthorizeApplicationHeartbeatEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AuthorizeApplicationHeartbeatEvent) Reset() {
	*x = AuthorizeApplicationHeartbeatEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizeApplicationHeartbeatEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizeApplicationHeartbeatEvent) ProtoMessage() {}

func (x *AuthorizeApplicationHeartbeatEvent) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizeApplicationHeartbeatEvent.ProtoReflect.Descriptor instead.
func (*AuthorizeApplicationHeartbeatEvent) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{244}
}

type AuthorizeApplicationAuthorizationURLEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorizationUrl string `protobuf:"bytes,1,opt,name=authorization_url,json=authorizationUrl,proto3" json:"authorization_url,omitempty"`
}

func (x *AuthorizeApplicationAuthorizationURLEvent) Reset() {
	*x = AuthorizeApplicationAuthorizationURLEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizeApplicationAuthorizationURLEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizeApplicationAuthorizationURLEvent) ProtoMessage() {}

func (x *AuthorizeApplicationAuthorizationURLEvent) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizeApplicationAuthorizationURLEvent.ProtoReflect.Descriptor instead.
func (*AuthorizeApplicationAuthorizationURLEvent) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{245}
}

func (x *AuthorizeApplicationAuthorizationURLEvent) GetAuthorizationUrl() string {
	if x != nil {
		return x.AuthorizationUrl
	}
	return ""
}

type AuthorizeApplicationApprovedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthToken       string                 `protobuf:"bytes,1,opt,name=auth_token,json=authToken,proto3" json:"auth_token,omitempty"`
	TokenExpiration *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=token_expiration,json=tokenExpiration,proto3" json:"token_expiration,omitempty"`
}

func (x *AuthorizeApplicationApprovedEvent) Reset() {
	*x = AuthorizeApplicationApprovedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizeApplicationApprovedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizeApplicationApprovedEvent) ProtoMessage() {}

func (x *AuthorizeApplicationApprovedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizeApplicationApprovedEvent.ProtoReflect.Descriptor instead.
func (*AuthorizeApplicationApprovedEvent) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{246}
}

func (x *AuthorizeApplicationApprovedEvent) GetAuthToken() string {
	if x != nil {
		return x.AuthToken
	}
	return ""
}

func (x *AuthorizeApplicationApprovedEvent) GetTokenExpiration() *timestamppb.Timestamp {
	if x != nil {
		return x.TokenExpiration
	}
	return nil
}

type AuthorizationProcessDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessId string `protobuf:"bytes,1,opt,name=process_id,json=processId,proto3" json:"process_id,omitempty"`
}

func (x *AuthorizationProcessDataRequest) Reset() {
	*x = AuthorizationProcessDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizationProcessDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationProcessDataRequest) ProtoMessage() {}

func (x *AuthorizationProcessDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationProcessDataRequest.ProtoReflect.Descriptor instead.
func (*AuthorizationProcessDataRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{247}
}

func (x *AuthorizationProcessDataRequest) GetProcessId() string {
	if x != nil {
		return x.ProcessId
	}
	return ""
}

type AuthorizationProcessDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationName        string          `protobuf:"bytes,1,opt,name=application_name,json=applicationName,proto3" json:"application_name,omitempty"`
	DesiredPermissionLevel PermissionLevel `protobuf:"varint,2,opt,name=desired_permission_level,json=desiredPermissionLevel,proto3,enum=jungletv.PermissionLevel" json:"desired_permission_level,omitempty"`
	Reason                 string          `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *AuthorizationProcessDataResponse) Reset() {
	*x = AuthorizationProcessDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizationProcessDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationProcessDataResponse) ProtoMessage() {}

func (x *AuthorizationProcessDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationProcessDataResponse.ProtoReflect.Descriptor instead.
func (*AuthorizationProcessDataResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{248}
}

func (x *AuthorizationProcessDataResponse) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

func (x *AuthorizationProcessDataResponse) GetDesiredPermissionLevel() PermissionLevel {
	if x != nil {
		return x.DesiredPermissionLevel
	}
	return PermissionLevel_UNAUTHENTICATED
}

func (x *AuthorizationProcessDataResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type ConsentOrDissentToAuthorizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessId string `protobuf:"bytes,1,opt,name=process_id,json=processId,proto3" json:"process_id,omitempty"`
	Consent   bool   `protobuf:"varint,2,opt,name=consent,proto3" json:"consent,omitempty"`
}

func (x *ConsentOrDissentToAuthorizationRequest) Reset() {
	*x = ConsentOrDissentToAuthorizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsentOrDissentToAuthorizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsentOrDissentToAuthorizationRequest) ProtoMessage() {}

func (x *ConsentOrDissentToAuthorizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsentOrDissentToAuthorizationRequest.ProtoReflect.Descriptor instead.
func (*ConsentOrDissentToAuthorizationRequest) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{249}
}

func (x *ConsentOrDissentToAuthorizationRequest) GetProcessId() string {
	if x != nil {
		return x.ProcessId
	}
	return ""
}

func (x *ConsentOrDissentToAuthorizationRequest) GetConsent() bool {
	if x != nil {
		return x.Consent
	}
	return false
}

type ConsentOrDissentToAuthorizationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConsentOrDissentToAuthorizationResponse) Reset() {
	*x = ConsentOrDissentToAuthorizationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jungletv_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsentOrDissentToAuthorizationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsentOrDissentToAuthorizationResponse) ProtoMessage() {}

func (x *ConsentOrDissentToAuthorizationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jungletv_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsentOrDissentToAuthorizationResponse.ProtoReflect.Descriptor instead.
func (*ConsentOrDissentToAuthorizationResponse) Descriptor() ([]byte, []int) {
	return file_jungletv_proto_rawDescGZIP(), []int{250}
}

var File_jungletv_proto protoreflect.FileDescriptor

var file_jungletv_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8f,
	0x02, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x69, 0x61,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x76, 0x69, 0x61, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x31,
	0x0a, 0x12, 0x6f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x6f, 0x6e,
	0x67, 0x6f, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x4e, 0x0a, 0x13, 0x6c, 0x61, 0x62, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x6e,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x4c, 0x61, 0x62, 0x53, 0x69, 0x67,
	0x6e, 0x49, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x01, 0x52, 0x10, 0x6c, 0x61,
	0x62, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01,
	0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6c, 0x61, 0x62,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x9b, 0x01, 0x0a, 0x10, 0x4c, 0x61, 0x62, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x53, 0x0a, 0x18, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65,
	0x74, 0x76, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x52, 0x16, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0xec,
	0x02, 0x0a, 0x0e, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x42, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65,
	0x74, 0x76, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65,
	0x74, 0x76, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a,
	0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x64, 0x48, 0x00, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x12, 0x4c,
	0x0a, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x6f, 0x70, 0x65, 0x6e,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c,
	0x65, 0x74, 0x76, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x55, 0x6e, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x55, 0x6e, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x0f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x53, 0x69, 0x67, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x53, 0x69, 0x67, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x22, 0xbf, 0x01,
	0x0a, 0x12, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x23, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x21, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x17, 0x0a, 0x15, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x55, 0x6e, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x22, 0x76, 0x0a, 0x0e, 0x53, 0x69, 0x67, 0x6e,
	0x49, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x45, 0x0a, 0x10, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x1b, 0x0a, 0x19, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x22, 0xb1, 0x01,
	0x0a, 0x13, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x62, 0x0a, 0x1c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x49,
	0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x68, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x48, 0x65, 0x78, 0x22, 0xcb, 0x01, 0x0a, 0x17, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x59, 0x6f, 0x75, 0x54, 0x75, 0x62, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x41, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x22, 0xdc, 0x01, 0x0a, 0x1a, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x53,
	0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x6e, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x6e, 0x6b,
	0x12, 0x41, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x01, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88,
	0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x22, 0xf1, 0x01, 0x0a, 0x13, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x49, 0x0a,
	0x0c, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x46,
	0x6f, 0x72, 0x63, 0x65, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x6e, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x0b, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x11, 0x0a, 0x0f, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x53, 0x74, 0x75, 0x62, 0x44, 0x61, 0x74, 0x61, 0x22, 0xde, 0x03, 0x0a, 0x13, 0x45, 0x6e,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x6e, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x61, 0x6c, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x61, 0x6c, 0x65,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x12,
	0x1f, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x38, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x62, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x45,
	0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x75, 0x62, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00,
	0x52, 0x08, 0x73, 0x74, 0x75, 0x62, 0x44, 0x61, 0x74, 0x61, 0x12, 0x51, 0x0a, 0x12, 0x79, 0x6f,
	0x75, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74,
	0x76, 0x2e, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x59, 0x6f, 0x75, 0x54, 0x75, 0x62, 0x65,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x10, 0x79, 0x6f, 0x75,
	0x74, 0x75, 0x62, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x5a, 0x0a,
	0x15, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6a,
	0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x53,
	0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x44, 0x61,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x13, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x0d, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x45, 0x6e, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x0c, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x14, 0x45,
	0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x45,
	0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x48, 0x00, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x39, 0x0a, 0x07, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6a,
	0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x07, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c, 0x0a, 0x13, 0x45, 0x6e,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x87, 0x07, 0x0a, 0x12, 0x45, 0x6e, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x22, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x45, 0x6e, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x6f, 0x77, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x6e, 0x73, 0x6b, 0x69, 0x70,
	0x70, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x61, 0x6c,
	0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x61,
	0x6c, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79,
	0x5f, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x73, 0x6b,
	0x69, 0x70, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x49,
	0x73, 0x55, 0x6e, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x06,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x31, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x61, 0x0a, 0x1b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65,
	0x74, 0x76, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x18, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4f, 0x0a, 0x12, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65,
	0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x59, 0x6f, 0x75, 0x54, 0x75, 0x62, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x61,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x10, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x58, 0x0a, 0x15, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76,
	0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x13, 0x73, 0x6f, 0x75,
	0x6e, 0x64, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x42, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65,
	0x74, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x0c, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x22, 0x83, 0x02, 0x0a, 0x18, 0x45, 0x78, 0x74, 0x72, 0x61, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x27, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x77, 0x61, 0x70,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x77, 0x61, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x6f, 0x77, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x33, 0x0a, 0x14, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0x2c, 0x0a,
	0x1a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x77, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1d, 0x0a, 0x1b, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x77, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6c, 0x0a, 0x15, 0x4d, 0x6f,
	0x76, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74,
	0x76, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x6f, 0x76, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x18, 0x0a, 0x16, 0x4d, 0x6f, 0x76, 0x65,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x14, 0x0a, 0x12, 0x4e, 0x6f, 0x77,
	0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x75, 0x62, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x2c, 0x0a, 0x1a, 0x4e, 0x6f, 0x77, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x59, 0x6f, 0x75,
	0x54, 0x75, 0x62, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2f, 0x0a,
	0x1d, 0x4e, 0x6f, 0x77, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x75, 0x6e, 0x64,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa5,
	0x01, 0x0a, 0x16, 0x4e, 0x6f, 0x77, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74,
	0x76, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xa6, 0x01, 0x0a, 0x1d, 0x4e, 0x6f, 0x77, 0x50, 0x6c,
	0x61, 0x79, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6a, 0x75,
	0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0xc6, 0x09, 0x0a, 0x1a, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x69, 0x76,
	0x65, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x6c, 0x69, 0x76, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x12, 0x31, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74,
	0x76, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63,
	0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x6c, 0x79, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0d, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4f,
	0x0a, 0x12, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6a, 0x75, 0x6e,
	0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x48, 0x03, 0x52, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x3b, 0x0a, 0x09, 0x73, 0x74, 0x75, 0x62, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x4e, 0x6f,
	0x77, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x75, 0x62, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x08, 0x73, 0x74, 0x75, 0x62, 0x44, 0x61, 0x74, 0x61, 0x12, 0x54, 0x0a, 0x12,
	0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c,
	0x65, 0x74, 0x76, 0x2e, 0x4e, 0x6f, 0x77, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x59, 0x6f,
	0x75, 0x54, 0x75, 0x62, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00,
	0x52, 0x10, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x5d, 0x0a, 0x15, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x4e, 0x6f, 0x77,
	0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x13, 0x73, 0x6f,
	0x75, 0x6e, 0x64, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x47, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c,
	0x65, 0x74, 0x76, 0x2e, 0x4e, 0x6f, 0x77, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x5d, 0x0a, 0x15, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6a, 0x75, 0x6e, 0x67,
	0x6c, 0x65, 0x74, 0x76, 0x2e, 0x4e, 0x6f, 0x77, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x13, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x13, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x12, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x2d, 0x0a, 0x10, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x0e, 0x68, 0x61, 0x73,
	0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x12, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x7a, 0x0a, 0x11, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x64, 0x41, 0x74, 0x22, 0xa1, 0x02, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x10,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x6c, 0x6f, 0x67,
	0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6c,
	0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0b, 0x66, 0x61, 0x76, 0x69, 0x63, 0x6f,
	0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x66,
	0x61, 0x76, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x57, 0x0a, 0x10, 0x6f, 0x70, 0x65,
	0x6e, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x62, 0x61, 0x72, 0x5f, 0x74, 0x61, 0x62, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x53, 0x69, 0x64, 0x65, 0x62, 0x61, 0x72, 0x54, 0x61, 0x62, 0x4f, 0x70, 0x65, 0x6e,
	0x48, 0x00, 0x52, 0x0e, 0x6f, 0x70, 0x65, 0x6e, 0x53, 0x69, 0x64, 0x65, 0x62, 0x61, 0x72, 0x54,
	0x61, 0x62, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x65,
	0x62, 0x61, 0x72, 0x5f, 0x74, 0x61, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x69, 0x64, 0x65, 0x62, 0x61, 0x72, 0x54, 0x61, 0x62,
	0x42, 0x16, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xbb, 0x01, 0x0a, 0x21, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x53, 0x69, 0x64, 0x65, 0x62, 0x61, 0x72, 0x54, 0x61, 0x62, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x15,
	0x0a, 0x06, 0x74, 0x61, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x61, 0x62, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x5f, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x62, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x61, 0x62,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x54, 0x61, 0x62, 0x49, 0x64, 0x22, 0x15, 0x0a, 0x13, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xa9, 0x02,
	0x0a, 0x05, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c,
	0x65, 0x74, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x68, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x73, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x6f, 0x77,
	0x6e, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x6f,
	0x77, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f,
	0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c,
	0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x44, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x48, 0x01, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x6e,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x15, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x59, 0x6f, 0x75, 0x54, 0x75, 0x62, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6c, 0x69, 0x76,
	0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x22, 0xb7, 0x01, 0x0a, 0x18, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x55,
	0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6c,
	0x69, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x65, 0x72, 0x6d, 0x61,
	0x6c, 0x69, 0x6e, 0x6b, 0x22, 0x39, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22,
	0xed, 0x01, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x13, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x2e, 0x0a, 0x13, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x68,
	0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x14, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x61, 0x6c, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0xc9, 0x06, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6a, 0x75, 0x6e,
	0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01,
	0x01, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x6e, 0x73, 0x6b, 0x69,
	0x70, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x61,
	0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x63, 0x65,
	0x61, 0x6c, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x5f, 0x6d, 0x6f, 0x76, 0x65,
	0x5f, 0x75, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x4d, 0x6f,
	0x76, 0x65, 0x55, 0x70, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x5f, 0x6d, 0x6f, 0x76, 0x65,
	0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x61, 0x6e,
	0x4d, 0x6f, 0x76, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x4f, 0x0a, 0x12, 0x79, 0x6f, 0x75, 0x74,
	0x75, 0x62, 0x65, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x59, 0x6f, 0x75, 0x54, 0x75, 0x62, 0x65, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x10, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x58, 0x0a, 0x15, 0x73, 0x6f, 0x75,
	0x6e, 0x64, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c,
	0x65, 0x74, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x13,
	0x73, 0x6f, 0x75, 0x6e, 0x64, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6a, 0x75, 0x6e,
	0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x58, 0x0a, 0x15, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74,
	0x76, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x13, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x45, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6a, 0x75, 0x6e, 0x67,
	0x6c, 0x65, 0x74, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x61,
	0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x63, 0x65,
	0x61, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x42, 0x0c, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x22, 0x1a, 0x0a, 0x18, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x6b, 0x69, 0x70,
	0x41, 0x6e, 0x64, 0x54, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xb6, 0x02,
	0x0a, 0x10, 0x53, 0x6b, 0x69, 0x70, 0x41, 0x6e, 0x64, 0x54, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65,
	0x74, 0x76, 0x2e, 0x53, 0x6b, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x73,
	0x6b, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6b, 0x69,
	0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x6b, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x6b, 0x69, 0x70, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x6b, 0x69, 0x70, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6b, 0x69, 0x70, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x73, 0x6b, 0x69, 0x70, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x61, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x61, 0x69, 0x6e, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xf9, 0x02, 0x0a, 0x12,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c,
	0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x2d, 0x0a, 0x12, 0x62, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x62,
	0x61, 0x64, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x44, 0x0a, 0x1c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x19, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x61, 0x6c, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x12, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x61, 0x6c, 0x73, 0x49, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x88, 0x01, 0x01, 0x42, 0x1f, 0x0a,
	0x1d, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x42, 0x17,
	0x0a, 0x15, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x5f, 0x69,
	0x6e, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x22, 0x29, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x74,
	0x0a, 0x1c, 0x46, 0x6f, 0x72, 0x63, 0x69, 0x62, 0x6c, 0x79, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x44,
	0x0a, 0x0c, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e,
	0x46, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x6e, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x1f, 0x0a, 0x1d, 0x46, 0x6f, 0x72, 0x63, 0x69, 0x62, 0x6c, 0x79,
	0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x1e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x68, 0x0a, 0x1f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x1f, 0x73, 0x6b, 0x69, 0x70,
	0x70, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1c, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x22,
	0x46, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x3f, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76,
	0x2e, 0x43, 0x68, 0x61, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xe5, 0x04, 0x0a, 0x0f, 0x43, 0x68, 0x61,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x08,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c,
	0x65, 0x74, 0x76, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x4c, 0x0a, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c,
	0x65, 0x74, 0x76, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x4c, 0x0a,
	0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74,
	0x76, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x68,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09,
	0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x59, 0x0a, 0x14, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65,
	0x74, 0x76, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x59, 0x0a, 0x14, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x68,
	0x61, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12,
	0x46, 0x0a, 0x0d, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74,
	0x76, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x45, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x22, 0xf8, 0x02, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x3e, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x44, 0x0a, 0x0e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65,
	0x74, 0x76, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c,
	0x65, 0x74, 0x76, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48,
	0x01, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x41, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e,
	0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xca, 0x01, 0x0a, 0x15,
	0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x6f, 0x72, 0x5f, 0x67,
	0x69, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c,
	0x65, 0x74, 0x76, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x65, 0x6e, 0x6f, 0x72, 0x47, 0x69, 0x66, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x6f, 0x72, 0x47, 0x69, 0x66, 0x12, 0x5b, 0x0a,
	0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65,
	0x74, 0x76, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xbe, 0x01, 0x0a, 0x1d, 0x43, 0x68, 0x61,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6e, 0x6f, 0x72, 0x47, 0x69, 0x66,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x5f, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xc5, 0x01, 0x0a, 0x24, 0x43, 0x68,
	0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x45, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x53, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x2d, 0x0a, 0x11, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x49, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x74, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6a, 0x75, 0x6e,
	0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x22, 0x12, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x22, 0x4a, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x2f, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x2d, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x30, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x22, 0x4f, 0x0a, 0x1b, 0x43, 0x68, 0x61, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x30, 0x0a, 0x14, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x4f, 0x0a, 0x1b, 0x43, 0x68, 0x61, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x15, 0x43, 0x68, 0x61, 0x74, 0x45, 0x6d, 0x6f, 0x74,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x15, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xea, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x12,
	0x35, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x48,
	0x00, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x74, 0x65, 0x6e, 0x6f, 0x72, 0x5f,
	0x67, 0x69, 0x66, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x12, 0x74, 0x65, 0x6e, 0x6f, 0x72, 0x47, 0x69, 0x66,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x74, 0x65, 0x6e, 0x6f, 0x72, 0x5f, 0x67,
	0x69, 0x66, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x29, 0x0a,
	0x17, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2e, 0x0a, 0x18, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x02, 0x30, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6c, 0x6f,
	0x77, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x6c, 0x6f,
	0x77, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xa5, 0x02, 0x0a, 0x0e, 0x42, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x62, 0x61, 0x6e,
	0x6e, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x42,
	0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x69,
	0x6e, 0x67, 0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x62, 0x61, 0x6e, 0x6e,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x3a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2a, 0x0a, 0x0f, 0x42, 0x61, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x62,
	0x61, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x62, 0x61,
	0x6e, 0x49, 0x64, 0x73, 0x22, 0x41, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x61,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x61, 0x6e, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x13, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x42, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xea, 0x03, 0x0a,
	0x07, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x61, 0x6e, 0x49, 0x64, 0x12,
	0x37, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08,
	0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x12, 0x42, 0x0a, 0x0c, 0x62, 0x61, 0x6e, 0x6e,
	0x65, 0x64, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x61,
	0x6e, 0x6e, 0x65, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6a, 0x75, 0x6e,
	0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x68,
	0x61, 0x74, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x71, 0x75,
	0x65, 0x75, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6e,
	0x6e, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x62,
	0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0c, 0x75, 0x6e, 0x62, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x75, 0x6e, 0x62, 0x61,
	0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x09, 0x62, 0x61,
	0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x08, 0x62,
	0x61, 0x6e, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x61, 0x6e, 0x6e,
	0x65, 0x64, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x75, 0x6e, 0x62,
	0x61, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xa2, 0x01, 0x0a, 0x0f, 0x55, 0x73,
	0x65, 0x72, 0x42, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a,
	0x11, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c,
	0x65, 0x74, 0x76, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x10, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x70,
	0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x42, 0x61,
	0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x22, 0x97, 0x02, 0x0a, 0x11, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x3f, 0x0a, 0x1c, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x73, 0x6b, 0x69, 0x70, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x12, 0x48, 0x0a, 0x21, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x73, 0x6b,
	0x69, 0x70, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x75, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x45, 0x0a, 0x1f, 0x72,
	0x65, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x48, 0x61, 0x72, 0x64,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x3d, 0x0a, 0x12, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x60, 0x0a, 0x1d, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x20, 0x0a, 0x1e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9c, 0x03,
	0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x22, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6a, 0x75,
	0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x12, 0x3f, 0x0a, 0x1c, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x73, 0x6b, 0x69, 0x70, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x12, 0x48, 0x0a, 0x21, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x73,
	0x6b, 0x69, 0x70, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x75,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x45, 0x0a, 0x1f,
	0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x48, 0x61, 0x72,
	0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x0b, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x22, 0x8a, 0x01, 0x0a,
	0x18, 0x55, 0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x11, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x10, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0x94, 0x01, 0x0a, 0x19, 0x55, 0x73,
	0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x75, 0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x22, 0xab, 0x01, 0x0a, 0x1f, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x45, 0x6e, 0x71,
	0x75, 0x65, 0x75, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76,
	0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x45, 0x6e, 0x71,
	0x75, 0x65, 0x75, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x12, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x11, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x65, 0x6e, 0x71, 0x75,
	0x65, 0x75, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x22,
	0x0a, 0x20, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75,
	0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x56, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e,
	0x75, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x4d, 0x0a, 0x18, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c,
	0x65, 0x74, 0x76, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x1c, 0x0a, 0x1a, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x63, 0x0a, 0x1b, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0f, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x88, 0x01, 0x0a,
	0x16, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x11, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x10, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0x91, 0x02, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x0d, 0x64,
	0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x42, 0x79,
	0x12, 0x3f, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x3c, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76,
	0x2e, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x17,
	0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x44, 0x69, 0x73,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x0f, 0x64, 0x69,
	0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x74, 0x0a, 0x19, 0x41,
	0x64, 0x64, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x18, 0x64, 0x69, 0x73, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6a, 0x75, 0x6e,
	0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x16, 0x64, 0x69, 0x73, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x2c, 0x0a, 0x1a, 0x41, 0x64, 0x64, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x2e, 0x0a, 0x1c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x1f, 0x0a, 0x1d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x93, 0x01, 0x0a, 0x21, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x11, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x10, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0xc3, 0x02, 0x0a, 0x19, 0x44, 0x69, 0x73, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6a, 0x75,
	0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0c, 0x64, 0x69, 0x73,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x42, 0x79, 0x12, 0x3f, 0x0a, 0x0d, 0x64, 0x69, 0x73,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x64, 0x69,
	0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x41, 0x74, 0x12, 0x50, 0x0a, 0x0f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x44,
	0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x22, 0xb9, 0x01, 0x0a,
	0x22, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x1c, 0x64, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6a, 0x75, 0x6e, 0x67,
	0x6c, 0x65, 0x74, 0x76, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1a,
	0x64, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x7e, 0x0a, 0x23, 0x41, 0x64, 0x64, 0x44,
	0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x57, 0x0a, 0x18, 0x64, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x45, 0x6e, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x16, 0x64, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x38, 0x0a, 0x24, 0x41, 0x64, 0x64, 0x44,
	0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69,
	0x64, 0x73, 0x22, 0x38, 0x0a, 0x26, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x69, 0x73, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x29, 0x0a, 0x27,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x87, 0x01,
	0x0a, 0x08, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x18, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x82, 0x01, 0x0a, 0x10, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x11, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x10, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0xba, 0x01, 0x0a, 0x0e, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2d, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x22, 0x79, 0x0a, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6a, 0x75,
	0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x34,
	0x0a, 0x16, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x4e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x52, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x4e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x1d, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x74, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x3c, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x22, 0x1d, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x43, 0x0a, 0x21, 0x53, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x22, 0x24, 0x0a, 0x22, 0x53, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x11, 0x0a, 0x0f, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x12, 0x0a,
	0x10, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x4a, 0x0a, 0x13, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c,
	0x65, 0x74, 0x76, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x51, 0x0a,
	0x14, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6a, 0x75,
	0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x22, 0x74, 0x0a, 0x0b, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74,
	0x76, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x6f, 0x77,
	0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x0e, 0x4c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x6f, 0x77, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x77,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x6f, 0x77, 0x4e,
	0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6a,
	0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x12, 0x32, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x4c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x35, 0x0a, 0x10, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x63, 0x0a,
	0x14, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x11, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x10, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x22, 0x90, 0x04, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x12, 0x4f,
	0x0a, 0x12, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a, 0x75, 0x6e,
	0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x59, 0x6f, 0x75, 0x54, 0x75,
	0x62, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x10, 0x79,
	0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x58, 0x0a, 0x15, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53,
	0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x44, 0x61,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x13, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0d, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x58, 0x0a,
	0x15, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6a,
	0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x13, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x0c, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x8a, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x43, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6a, 0x75, 0x6e, 0x67,
	0x6c, 0x65, 0x74, 0x76, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0x67, 0x0a, 0x18, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b,
	0x0a, 0x11, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6a, 0x75, 0x6e, 0x67,
	0x6c, 0x65, 0x74, 0x76, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x10, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xe0, 0x01, 0x0a, 0x0a,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x3d, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x81,
	0x01, 0x0a, 0x19, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x0b,
	0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x61, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0x40, 0x0a, 0x24, 0x53, 0x65, 0x74, 0x43, 0x72, 0x6f, 0x77, 0x64, 0x66, 0x75,
	0x6e, 0x64, 0x65, 0x64, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x22, 0x27, 0x0a, 0x25, 0x53, 0x65, 0x74, 0x43, 0x72, 0x6f, 0x77, 0x64,
	0x66, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x0a,
	0x1d, 0x53, 0x65, 0x74, 0x53, 0x6b, 0x69, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x22, 0x20,
	0x0a, 0x1e, 0x53, 0x65, 0x74, 0x53, 0x6b, 0x69, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1f, 0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x65, 0x67, 0x63, 0x68,
	0x61, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x78, 0x0a, 0x1e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x65, 0x67, 0x63,
	0x68, 0x61, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76,
	0x2e, 0x53, 0x65, 0x67, 0x63, 0x68, 0x61, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x22, 0x2b, 0x0a, 0x13, 0x53,
	0x65, 0x67, 0x63, 0x68, 0x61, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x74,
	0x65, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x39, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x52, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x66, 0x66, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x61, 0x66, 0x66, 0x6c,
	0x65, 0x49, 0x64, 0x22, 0x1d, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x61,
	0x66, 0x66, 0x6c, 0x65, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x58, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61,
	0x66, 0x66, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x61, 0x66, 0x66, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x7a,
	0x65, 0x5f, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x22, 0x18, 0x0a, 0x16,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x0a, 0x13, 0x52, 0x65, 0x64, 0x72, 0x61, 0x77,
	0x52, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x22, 0x16, 0x0a, 0x14, 0x52, 0x65, 0x64, 0x72, 0x61, 0x77, 0x52, 0x61, 0x66, 0x66,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x4f, 0x6e,
	0x67, 0x6f, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6e, 0x0a, 0x19, 0x4f, 0x6e, 0x67, 0x6f, 0x69, 0x6e,
	0x67, 0x52, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x72, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c,
	0x65, 0x74, 0x76, 0x2e, 0x4f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x66, 0x66, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x61, 0x66, 0x66, 0x6c,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xc4, 0x02, 0x0a, 0x11, 0x4f, 0x6e, 0x67, 0x6f, 0x69,
	0x6e, 0x67, 0x52, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e,
	0x66, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65,
	0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x22, 0x9e, 0x04,
	0x0a, 0x0d, 0x52, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x44, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x64, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x12, 0x35, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x52, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x44,
	0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x15,
	0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x13, 0x77,
	0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x48, 0x01, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x78, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x70, 0x72, 0x69,
	0x7a, 0x65, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x69, 0x6e, 0x66, 0x6f, 0x55, 0x72, 0x6c, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x77, 0x69, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x22, 0x64,
	0x0a, 0x15, 0x52, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x44, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x11, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x10, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x16, 0x52, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x44,
	0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x40, 0x0a, 0x0f, 0x72, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c,
	0x65, 0x74, 0x76, 0x2e, 0x52, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x44, 0x72, 0x61, 0x77, 0x69, 0x6e,
	0x67, 0x52, 0x0e, 0x72, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x44, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22,
	0x29, 0x0a, 0x27, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2a, 0x0a, 0x28, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x0a, 0x14, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xca, 0x07, 0x0a, 0x09, 0x53, 0x70, 0x65, 0x63,
	0x74, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x53, 0x0a, 0x27, 0x6e, 0x75, 0x6d, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73,
	0x61, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x22, 0x6e, 0x75, 0x6d, 0x53, 0x70, 0x65,
	0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x41, 0x0a, 0x0e,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0d, 0x77, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x12,
	0x4a, 0x0a, 0x22, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x75, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x47, 0x6f, 0x6f,
	0x64, 0x52, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x22, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x61,
	0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x65, 0x67, 0x69, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6c, 0x65, 0x67,
	0x69, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x12, 0x51, 0x0a, 0x14, 0x6e, 0x6f, 0x74, 0x5f, 0x6c,
	0x65, 0x67, 0x69, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x48, 0x00, 0x52, 0x12, 0x6e, 0x6f, 0x74, 0x4c, 0x65, 0x67, 0x69, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x13, 0x73, 0x74,
	0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x61,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x11, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x12, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65,
	0x74, 0x76, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x48, 0x02, 0x52, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x1f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x53, 0x6b, 0x69, 0x70,
	0x70, 0x65, 0x64, 0x12, 0x4e, 0x0a, 0x24, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x72, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x20, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x75,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x53, 0x6b, 0x69, 0x70,
	0x70, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x20, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x68,
	0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x46, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x64, 0x42, 0x17, 0x0a, 0x15,
	0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x6c, 0x65, 0x67, 0x69, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f,
	0x73, 0x69, 0x6e, 0x63, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x74, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x22, 0x46, 0x0a, 0x1b, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x70, 0x65,
	0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x1e, 0x0a, 0x1c,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x0a, 0x1e,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xad,
	0x06, 0x0a, 0x18, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x12, 0x5b, 0x0a, 0x17, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x65, 0x6e, 0x71,
	0x75, 0x65, 0x75, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6a,
	0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x45,
	0x6e, 0x71, 0x75, 0x65, 0x75, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x1b, 0x65, 0x6e, 0x71, 0x75,
	0x65, 0x75, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x65,
	0x6e, 0x71, 0x75, 0x65, 0x75, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x1c, 0x63, 0x72, 0x6f, 0x77,
	0x64, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a,
	0x63, 0x72, 0x6f, 0x77, 0x64, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x6b, 0x69, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x53, 0x0a, 0x26, 0x63, 0x72,
	0x6f, 0x77, 0x64, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x23, 0x63, 0x72, 0x6f, 0x77,
	0x64, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12,
	0x43, 0x0a, 0x1e, 0x6e, 0x65, 0x77, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x61,
	0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x75, 0x6e, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x6e, 0x65, 0x77, 0x45, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x55, 0x6e, 0x73, 0x6b, 0x69, 0x70, 0x70,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x6f, 0x77, 0x6e, 0x5f, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x6f, 0x77, 0x6e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x30, 0x0a, 0x14, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61,
	0x6c, 0x6c, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x33, 0x0a, 0x13, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x11, 0x71, 0x75, 0x65, 0x75, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x19, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75,
	0x6d, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x12, 0x3f, 0x0a, 0x13, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x12, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x09, 0x76, 0x69, 0x70,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6a,
	0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x08, 0x76, 0x69,
	0x70, 0x55, 0x73, 0x65, 0x72, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0x41,
	0x0a, 0x25, 0x53, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x22, 0x28, 0x0a, 0x26, 0x53, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0x0a, 0x25, 0x53,
	0x65, 0x74, 0x4f, 0x77, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x22, 0x28,
	0x0a, 0x26, 0x53, 0x65, 0x74, 0x4f, 0x77, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46, 0x0a, 0x2a, 0x53, 0x65, 0x74, 0x4e,
	0x65, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x41, 0x6c,
	0x77, 0x61, 0x79, 0x73, 0x55, 0x6e, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x22, 0x2d, 0x0a, 0x2b, 0x53, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x55, 0x6e, 0x73, 0x6b,
	0x69, 0x70, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x35, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x1c, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x53, 0x6b, 0x69,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x14, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xa2, 0x01, 0x0a, 0x0a, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6a, 0x75, 0x6e,
	0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0x86, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x35, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x36, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x22, 0x50, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x35, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x35, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x55, 0x72, 0x6c, 0x22, 0x29, 0x0a,
	0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x1e, 0x0a, 0x1c, 0x53, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1f, 0x0a, 0x1d, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x20, 0x0a, 0x1e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x99, 0x04, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6a,
	0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x12, 0x4f, 0x0a, 0x18, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x16, 0x72, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x6c, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x79, 0x12, 0x55, 0x0a, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x01,
	0x52, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x12, 0x79, 0x6f, 0x75, 0x74,
	0x75, 0x62, 0x65, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x59, 0x6f, 0x75, 0x54, 0x75, 0x62, 0x65, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x10, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x58, 0x0a, 0x15, 0x73, 0x6f, 0x75,
	0x6e, 0x64, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c,
	0x65, 0x74, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x13,
	0x73, 0x6f, 0x75, 0x6e, 0x64, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6a, 0x75, 0x6e,
	0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x10, 0x0a, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x2c, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x22, 0xe8, 0x01, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x46, 0x6f,
	0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x6e, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x54, 0x0a, 0x19, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x16, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xd9, 0x01, 0x0a, 0x11,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x42, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6a, 0x75, 0x6e, 0x67,
	0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x46, 0x6f,
	0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x73, 0x41, 0x6c,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x33,
	0x30, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6a,
	0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x46, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x33, 0x30, 0x44, 0x61, 0x79, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x5f, 0x37, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x46, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x37, 0x44, 0x61, 0x79, 0x73, 0x22, 0xa9, 0x06, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x48, 0x01, 0x52,
	0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x42, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f,
	0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x02, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x75, 0x6e, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x75, 0x6e, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x4f,
	0x0a, 0x12, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a, 0x75, 0x6e,
	0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x59, 0x6f, 0x75, 0x54, 0x75,
	0x62, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x10, 0x79,
	0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x58, 0x0a, 0x15, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53,
	0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x44, 0x61,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x13, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0d, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x58, 0x0a,
	0x15, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6a,
	0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x13, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x0c, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x22, 0x3a, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x42, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x22,
	0x1d, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x69, 0x6f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4d,
	0x0a, 0x1e, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x69, 0x64, 0x22, 0x21, 0x0a,
	0x1f, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x33, 0x0a, 0x17, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x1a, 0x0a, 0x18, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x8b, 0x01, 0x0a, 0x19, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x4b, 0x0a, 0x11, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6a, 0x75, 0x6e,
	0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x10, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22,
	0x84, 0x01, 0x0a, 0x1a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38,
	0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x0b, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x2c, 0x0a, 0x10, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x13, 0x0a, 0x11, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x65, 0x0a, 0x12, 0x55, 0x6e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x15, 0x0a, 0x13, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x62, 0x0a, 0x13, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b,
	0x0a, 0x11, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6a, 0x75, 0x6e, 0x67,
	0x6c, 0x65, 0x74, 0x76, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x10, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xba, 0x01, 0x0a, 0x0b,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x0c, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2d,
	0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x80, 0x01, 0x0a, 0x14, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c,
	0x65, 0x74, 0x76, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x21, 0x0a, 0x1f, 0x4d,
	0x61, 0x72, 0x6b, 0x41, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x4d, 0x6f, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x22,
	0x0a, 0x20, 0x4d, 0x61, 0x72, 0x6b, 0x41, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6c, 0x79,
	0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1f, 0x0a, 0x1d, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x6c, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x20, 0x0a, 0x1e, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x6c, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x9e, 0x01, 0x0a, 0x12, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x14, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6a, 0x75, 0x6e, 0x67,
	0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x13, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9d, 0x01, 0x0a, 0x13,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x45, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x64, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x22, 0x68, 0x0a, 0x19, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x11, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x10, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x1a, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6a, 0x75, 0x6e,
	0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x22, 0x89, 0x03, 0x0a, 0x11, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1f, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74,
	0x76, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x44, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x74, 0x47, 0x69, 0x66, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0x71, 0x0a, 0x15, 0x43, 0x68, 0x61, 0x74, 0x47, 0x69, 0x66,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x47,
	0x69, 0x66, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65,
	0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0xdd, 0x01, 0x0a, 0x13, 0x43, 0x68, 0x61,
	0x74, 0x47, 0x69, 0x66, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x55, 0x72, 0x6c, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x46, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x73, 0x74, 0x22, 0x73, 0x0a, 0x1a, 0x41, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x1d, 0x0a,
	0x1b, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x0a, 0x1c,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x42, 0x61, 0x6e, 0x61, 0x6e, 0x6f, 0x54, 0x6f, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xf2, 0x01, 0x0a,
	0x1b, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x42, 0x61, 0x6e, 0x61, 0x6e, 0x6f, 0x54, 0x6f,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x61, 0x6e, 0x61, 0x6e, 0x6f, 0x5f,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x62, 0x61, 0x6e, 0x61, 0x6e, 0x6f, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64,
	0x12, 0x29, 0x0a, 0x10, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x64, 0x22, 0x22, 0x0a, 0x20, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x66, 0x0a, 0x21, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3c, 0x0a,
	0x1d, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x55, 0x72, 0x6c, 0x22, 0x53, 0x0a, 0x1e, 0x53,
	0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a,
	0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x22, 0x79, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x56, 0x69, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3b,
	0x0a, 0x0a, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x56, 0x69,
	0x70, 0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x0a, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x14, 0x0a, 0x12, 0x41,
	0x64, 0x64, 0x56, 0x69, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3f, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x56, 0x69, 0x70, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x17, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x56, 0x69, 0x70, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x0a, 0x1a, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1d, 0x0a, 0x1b, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x42, 0x0a, 0x24, 0x49, 0x6e, 0x63, 0x72,
	0x65, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x53, 0x6b, 0x69, 0x70,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x22, 0x27, 0x0a, 0x25,
	0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65,
	0x53, 0x6b, 0x69, 0x70, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x42, 0x0a, 0x26, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x29, 0x0a, 0x27, 0x53, 0x65, 0x74,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0x0a, 0x22, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x50, 0x0a, 0x23, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x28, 0x0a, 0x26, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x69, 0x6e,
	0x67, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x90, 0x02, 0x0a, 0x1e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x45, 0x6e, 0x71, 0x75,
	0x65, 0x75, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5b, 0x0a, 0x17, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x69, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74,
	0x76, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x45, 0x6e,
	0x71, 0x75, 0x65, 0x75, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x15, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x69,
	0x6e, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x65,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a,
	0x13, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x73, 0x5f, 0x6e, 0x75, 0x6d,
	0x65, 0x72, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x49, 0x73, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x12, 0x36, 0x0a,
	0x17, 0x68, 0x61, 0x73, 0x5f, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72,
	0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15,
	0x68, 0x61, 0x73, 0x45, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x76, 0x69,
	0x6c, 0x65, 0x67, 0x65, 0x73, 0x22, 0x1d, 0x0a, 0x1b, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x1e, 0x0a, 0x1c, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x0a, 0x1f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x22, 0x0a, 0x20, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x1b, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x53, 0x0a, 0x18, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x16, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xa1, 0x02,
	0x0a, 0x19, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x09, 0x68,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09,
	0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x62, 0x0a, 0x11, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x52, 0x4c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x49, 0x0a,
	0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x22, 0x24, 0x0a, 0x22, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x58, 0x0a, 0x29, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72,
	0x6c, 0x22, 0x89, 0x01, 0x0a, 0x21, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x74,
	0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x45, 0x0a, 0x10, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x40, 0x0a,
	0x1f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x22,
	0xba, 0x01, 0x0a, 0x20, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x53, 0x0a, 0x18, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x16, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x61, 0x0a, 0x26,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x44, 0x69, 0x73, 0x73, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x22,
	0x29, 0x0a, 0x27, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x44, 0x69, 0x73, 0x73,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x5d, 0x0a, 0x18, 0x45, 0x6e,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x41, 0x49, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x53, 0x55, 0x46, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54,
	0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53, 0x10, 0x03, 0x2a, 0x99, 0x01, 0x0a, 0x1b, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x26, 0x51, 0x55, 0x45,
	0x55, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x45,
	0x4e, 0x54, 0x52, 0x59, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x49,
	0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x25,
	0x0a, 0x21, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x4d, 0x4f,
	0x56, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x50, 0x10, 0x02, 0x2a, 0xdf, 0x01, 0x0a, 0x0a, 0x53, 0x6b, 0x69, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x4b, 0x49, 0x50, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a,
	0x17, 0x53, 0x4b, 0x49, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x4b, 0x49, 0x50, 0x50, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x4b,
	0x49, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x4f, 0x46,
	0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x10, 0x02, 0x12,
	0x18, 0x0a, 0x14, 0x53, 0x4b, 0x49, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e,
	0x4f, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x4b, 0x49,
	0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x4b, 0x49, 0x50, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x05,
	0x12, 0x25, 0x0a, 0x21, 0x53, 0x4b, 0x49, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x50,
	0x45, 0x52, 0x49, 0x4f, 0x44, 0x10, 0x06, 0x2a, 0x43, 0x0a, 0x17, 0x46, 0x6f, 0x72, 0x63, 0x65,
	0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4e, 0x51, 0x55, 0x45, 0x55, 0x45, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x4e, 0x4f, 0x57, 0x10, 0x02, 0x2a, 0x40, 0x0a, 0x12,
	0x43, 0x68, 0x61, 0x74, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x4f, 0x44, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x2a, 0x5d,
	0x0a, 0x19, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x45, 0x6e,
	0x71, 0x75, 0x65, 0x75, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x44,
	0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x41,
	0x46, 0x46, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4e, 0x41,
	0x42, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f,
	0x52, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x4a, 0x0a,
	0x0f, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41,
	0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x53, 0x45, 0x52, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x41, 0x50, 0x50, 0x45, 0x44, 0x49, 0x54, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x09,
	0x0a, 0x05, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x03, 0x2a, 0x8d, 0x01, 0x0a, 0x13, 0x44, 0x69,
	0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x21, 0x0a, 0x1d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x44, 0x49, 0x53,
	0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x49, 0x53, 0x41, 0x4c, 0x4c, 0x4f, 0x57,
	0x45, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x59, 0x4f,
	0x55, 0x54, 0x55, 0x42, 0x45, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x01, 0x12, 0x2a, 0x0a,
	0x26, 0x44, 0x49, 0x53, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49,
	0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x4e, 0x44, 0x43, 0x4c, 0x4f, 0x55,
	0x44, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x10, 0x02, 0x2a, 0xb9, 0x01, 0x0a, 0x1d, 0x44, 0x69,
	0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x28, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45,
	0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x34, 0x0a, 0x30, 0x44, 0x49, 0x53,
	0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x43, 0x4f,
	0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x59, 0x4f,
	0x55, 0x54, 0x55, 0x42, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x01, 0x12,
	0x34, 0x0a, 0x30, 0x44, 0x49, 0x53, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x5f, 0x4d, 0x45,
	0x44, 0x49, 0x41, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x4e, 0x44, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x10, 0x02, 0x2a, 0x69, 0x0a, 0x11, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1e, 0x0a, 0x1a, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x42, 0x4f, 0x41, 0x52,
	0x44, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x41,
	0x53, 0x54, 0x5f, 0x32, 0x34, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x53, 0x10, 0x01, 0x12, 0x0f, 0x0a,
	0x0b, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x37, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x10, 0x02, 0x12, 0x10,
	0x0a, 0x0c, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x33, 0x30, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x10, 0x03,
	0x2a, 0xe9, 0x01, 0x0a, 0x13, 0x52, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x44, 0x72, 0x61, 0x77, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x1d, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x52, 0x41, 0x46, 0x46, 0x4c, 0x45, 0x5f, 0x44, 0x52, 0x41, 0x57, 0x49,
	0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x52,
	0x41, 0x46, 0x46, 0x4c, 0x45, 0x5f, 0x44, 0x52, 0x41, 0x57, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4e, 0x47, 0x4f, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x21,
	0x0a, 0x1d, 0x52, 0x41, 0x46, 0x46, 0x4c, 0x45, 0x5f, 0x44, 0x52, 0x41, 0x57, 0x49, 0x4e, 0x47,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10,
	0x02, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x41, 0x46, 0x46, 0x4c, 0x45, 0x5f, 0x44, 0x52, 0x41, 0x57,
	0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x52, 0x4d, 0x45, 0x44, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x41, 0x46, 0x46, 0x4c, 0x45,
	0x5f, 0x44, 0x52, 0x41, 0x57, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x56, 0x4f, 0x49, 0x44, 0x45, 0x44, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x41, 0x46, 0x46,
	0x4c, 0x45, 0x5f, 0x44, 0x52, 0x41, 0x57, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x05, 0x2a, 0x46, 0x0a, 0x11,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10,
	0x00, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x4d, 0x4f, 0x4e, 0x4b, 0x45,
	0x59, 0x53, 0x10, 0x01, 0x2a, 0xe1, 0x05, 0x0a, 0x15, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23,
	0x0a, 0x1f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x10, 0x00, 0x12, 0x35, 0x0a, 0x31, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47,
	0x45, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x01, 0x12, 0x30, 0x0a, 0x2c, 0x50, 0x4f,
	0x49, 0x4e, 0x54, 0x53, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x02, 0x12, 0x31, 0x0a, 0x2d,
	0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x45, 0x4e,
	0x51, 0x55, 0x45, 0x55, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x03, 0x12,
	0x2f, 0x0a, 0x2b, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f,
	0x47, 0x49, 0x46, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x48, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x04,
	0x12, 0x2d, 0x0a, 0x29, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x55,
	0x41, 0x4c, 0x5f, 0x41, 0x44, 0x4a, 0x55, 0x53, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x05, 0x12,
	0x3a, 0x0a, 0x36, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41,
	0x5f, 0x45, 0x4e, 0x51, 0x55, 0x45, 0x55, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44,
	0x5f, 0x52, 0x45, 0x56, 0x45, 0x52, 0x53, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x32, 0x0a, 0x2e, 0x50,
	0x4f, 0x49, 0x4e, 0x54, 0x53, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x42, 0x41, 0x4e, 0x41, 0x4e, 0x4f, 0x10, 0x07, 0x12,
	0x32, 0x0a, 0x2e, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45,
	0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x49, 0x4e,
	0x47, 0x10, 0x08, 0x12, 0x30, 0x0a, 0x2c, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x4f, 0x4e, 0x54, 0x48, 0x4c, 0x59, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x09, 0x12, 0x34, 0x0a, 0x30, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x4b, 0x49, 0x50, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x5f,
	0x52, 0x45, 0x44, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0a, 0x12, 0x33, 0x0a, 0x2f, 0x50,
	0x4f, 0x49, 0x4e, 0x54, 0x53, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x5f, 0x54, 0x48, 0x52, 0x45,
	0x53, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x41, 0x53, 0x45, 0x10, 0x0b,
	0x12, 0x35, 0x0a, 0x31, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x43,
	0x45, 0x41, 0x4c, 0x45, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x45, 0x4e, 0x51, 0x55,
	0x45, 0x55, 0x49, 0x4e, 0x47, 0x10, 0x0c, 0x12, 0x2f, 0x0a, 0x2b, 0x50, 0x4f, 0x49, 0x4e, 0x54,
	0x53, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44,
	0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x0d, 0x2a, 0xbb, 0x01, 0x0a, 0x11, 0x56, 0x69, 0x70,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1f,
	0x0a, 0x1b, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x56, 0x49, 0x50, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x41, 0x50, 0x50, 0x45, 0x41, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x00, 0x12,
	0x1e, 0x0a, 0x1a, 0x56, 0x49, 0x50, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x50, 0x50, 0x45,
	0x41, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12,
	0x21, 0x0a, 0x1d, 0x56, 0x49, 0x50, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x50, 0x50, 0x45,
	0x41, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52,
	0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x56, 0x49, 0x50, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41,
	0x50, 0x50, 0x45, 0x41, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x56, 0x49, 0x50, 0x10, 0x03, 0x12,
	0x25, 0x0a, 0x21, 0x56, 0x49, 0x50, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x50, 0x50, 0x45,
	0x41, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x56, 0x49, 0x50, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x52,
	0x41, 0x54, 0x4f, 0x52, 0x10, 0x04, 0x32, 0xd6, 0x5b, 0x0a, 0x08, 0x4a, 0x75, 0x6e, 0x67, 0x6c,
	0x65, 0x54, 0x56, 0x12, 0x3f, 0x0a, 0x06, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x12, 0x17, 0x2e,
	0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74,
	0x76, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x5b, 0x0a, 0x15, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x69,
	0x67, 0x6e, 0x49, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x26, 0x2e,
	0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53,
	0x69, 0x67, 0x6e, 0x49, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x4f, 0x0a, 0x0c, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x12, 0x1d, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x45, 0x6e, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x45, 0x6e, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x64, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x77, 0x6e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x24, 0x2e, 0x6a, 0x75, 0x6e, 0x67,
	0x6c, 0x65, 0x74, 0x76, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x77, 0x6e, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x4f, 0x77, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0e, 0x4d, 0x6f, 0x76, 0x65,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1f, 0x2e, 0x6a, 0x75, 0x6e,
	0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6a, 0x75,
	0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x51, 0x0a, 0x0d, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x1e, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x45, 0x6e, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x57, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x12, 0x1d, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x42, 0x0a, 0x0c, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x1d, 0x2e, 0x6a, 0x75,
	0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x6a, 0x75, 0x6e,
	0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x57, 0x0a, 0x11, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x6b, 0x69, 0x70, 0x41, 0x6e,
	0x64, 0x54, 0x69, 0x70, 0x12, 0x22, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x6b, 0x69, 0x70, 0x41, 0x6e, 0x64, 0x54, 0x69,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c,
	0x65, 0x74, 0x76, 0x2e, 0x53, 0x6b, 0x69, 0x70, 0x41, 0x6e, 0x64, 0x54, 0x69, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x30, 0x01, 0x12, 0x49, 0x0a, 0x0a, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74,
	0x76, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x17, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x28,
	0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c,
	0x65, 0x74, 0x76, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x53, 0x65, 0x67, 0x63, 0x68, 0x61, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12,
	0x27, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x53, 0x65, 0x67, 0x63, 0x68, 0x61, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c,
	0x65, 0x74, 0x76, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x65, 0x67, 0x63, 0x68,
	0x61, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x12, 0x1c, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x14, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x58, 0x0a, 0x0f, 0x53,
	0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20,
	0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x68,
	0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x65, 0x6e, 0x64,
	0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x24, 0x2e, 0x6a,
	0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x2e, 0x6a, 0x75, 0x6e,
	0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c,
	0x65, 0x74, 0x76, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x58,
	0x0a, 0x0f, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x74, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x08, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x12, 0x19, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a,
	0x0c, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1d, 0x2e,
	0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6a,
	0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52,
	0x0a, 0x0d, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x1e, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x5e, 0x0a, 0x11, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x22, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65,
	0x74, 0x76, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6a, 0x75,
	0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61,
	0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x5e, 0x0a, 0x11, 0x4f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x66,
	0x66, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65,
	0x74, 0x76, 0x2e, 0x4f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x66, 0x66, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6a, 0x75,
	0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x4f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x52, 0x61,
	0x66, 0x66, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x55, 0x0a, 0x0e, 0x52, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x44, 0x72, 0x61, 0x77,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x1f, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e,
	0x52, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x44, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76,
	0x2e, 0x52, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x44, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0b, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c,
	0x65, 0x74, 0x76, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74,
	0x76, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x6a, 0x75,
	0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c,
	0x65, 0x74, 0x76, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6a, 0x75,
	0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x4c, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x1c, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x46, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1a, 0x2e, 0x6a,
	0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c,
	0x65, 0x74, 0x76, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x12, 0x24,
	0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x42, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e,
	0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x69, 0x6f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a,
	0x17, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x28, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c,
	0x65, 0x74, 0x76, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x61, 0x0a, 0x12, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x23, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6a, 0x75, 0x6e,
	0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x46, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x1a, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6a, 0x75,
	0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0b, 0x55, 0x6e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x6a, 0x75, 0x6e, 0x67,
	0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65,
	0x74, 0x76, 0x2e, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0c, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c,
	0x65, 0x74, 0x76, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65,
	0x74, 0x76, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0a, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65,
	0x74, 0x76, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x12, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x2e, 0x6a, 0x75, 0x6e,
	0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x74, 0x47,
	0x69, 0x66, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1e, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c,
	0x65, 0x74, 0x76, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x47, 0x69, 0x66, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c,
	0x65, 0x74, 0x76, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x47, 0x69, 0x66, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x15, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x42, 0x61, 0x6e, 0x61, 0x6e, 0x6f, 0x54, 0x6f, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x42, 0x61, 0x6e, 0x61, 0x6e, 0x6f, 0x54, 0x6f, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6a,
	0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x42,
	0x61, 0x6e, 0x61, 0x6e, 0x6f, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x00, 0x30, 0x01, 0x12, 0x76, 0x0a, 0x19, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x4f, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2b, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x4f, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x6d, 0x0a, 0x16, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x27, 0x2e, 0x6a, 0x75, 0x6e, 0x67,
	0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x6f,
	0x75, 0x6e, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x82,
	0x01, 0x0a, 0x1d, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x52, 0x65, 0x64,
	0x75, 0x63, 0x65, 0x53, 0x6b, 0x69, 0x70, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x12, 0x2e, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x49, 0x6e, 0x63, 0x72,
	0x65, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x53, 0x6b, 0x69, 0x70,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x49, 0x6e, 0x63, 0x72,
	0x65, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x53, 0x6b, 0x69, 0x70,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x1b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x2c, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2d, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x69, 0x6e, 0x67, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x81, 0x01, 0x0a, 0x1f, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76,
	0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x45, 0x6e, 0x71,
	0x75, 0x65, 0x75, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65,
	0x74, 0x76, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x69, 0x6e,
	0x67, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x00, 0x30, 0x01, 0x12, 0x67, 0x0a, 0x14, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x25, 0x2e,
	0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66,
	0x0a, 0x14, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74,
	0x76, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x73, 0x0a, 0x18, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x29, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x88, 0x01, 0x0a, 0x1f,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x44, 0x69, 0x73, 0x73, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x30, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x4f, 0x72, 0x44, 0x69, 0x73, 0x73, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x31, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x44, 0x69, 0x73, 0x73, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x15, 0x46, 0x6f, 0x72, 0x63, 0x69, 0x62,
	0x6c, 0x79, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12,
	0x26, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x46, 0x6f, 0x72, 0x63, 0x69,
	0x62, 0x6c, 0x79, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65,
	0x74, 0x76, 0x2e, 0x46, 0x6f, 0x72, 0x63, 0x69, 0x62, 0x6c, 0x79, 0x45, 0x6e, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x5b, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x21, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74,
	0x76, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6a, 0x75, 0x6e, 0x67,
	0x6c, 0x65, 0x74, 0x76, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5e, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c,
	0x65, 0x74, 0x76, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x58, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x20, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e,
	0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x18, 0x53, 0x65, 0x74,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x69, 0x6e, 0x67, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x29, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76,
	0x2e, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x69,
	0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x65, 0x74, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43,
	0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x73, 0x12, 0x19, 0x2e, 0x6a, 0x75, 0x6e,
	0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x07, 0x42, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x18,
	0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x42, 0x61, 0x6e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c,
	0x65, 0x74, 0x76, 0x2e, 0x42, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x09, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42,
	0x61, 0x6e, 0x12, 0x1a, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x42, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x42, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a,
	0x11, 0x55, 0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x22, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74,
	0x76, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a,
	0x0a, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x6a, 0x75,
	0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c,
	0x65, 0x74, 0x76, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6a, 0x75,
	0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x6a, 0x75,
	0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x20, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65,
	0x74, 0x76, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6a, 0x75, 0x6e, 0x67,
	0x6c, 0x65, 0x74, 0x76, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61,
	0x0a, 0x12, 0x41, 0x64, 0x64, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x12, 0x23, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e,
	0x41, 0x64, 0x64, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6a, 0x75, 0x6e, 0x67,
	0x6c, 0x65, 0x74, 0x76, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x6a, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x69, 0x73, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x26, 0x2e, 0x6a, 0x75, 0x6e,
	0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x69, 0x73, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x79, 0x0a,
	0x1a, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x2e, 0x6a, 0x75,
	0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c,
	0x65, 0x74, 0x76, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x1c, 0x41, 0x64, 0x64, 0x44,
	0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c,
	0x65, 0x74, 0x76, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65,
	0x74, 0x76, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x88, 0x01, 0x0a, 0x1f, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x2e,
	0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44,
	0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x31, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74,
	0x76, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x20, 0x2e, 0x6a, 0x75, 0x6e,
	0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46,
	0x0a, 0x09, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x2e, 0x6a, 0x75,
	0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65,
	0x74, 0x76, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x74, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x2e,
	0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x74, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x13,
	0x53, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x12, 0x24, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53,
	0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6a, 0x75, 0x6e, 0x67,
	0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x79, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x12, 0x2b, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x65, 0x74, 0x4d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x69,
	0x6d, 0x75, 0x6d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x82, 0x01,
	0x0a, 0x1d, 0x53, 0x65, 0x74, 0x43, 0x72, 0x6f, 0x77, 0x64, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x64,
	0x53, 0x6b, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x2e, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x72,
	0x6f, 0x77, 0x64, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2f, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x72,
	0x6f, 0x77, 0x64, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x6d, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x53, 0x6b, 0x69, 0x70, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x27, 0x2e, 0x6a,
	0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x6b, 0x69, 0x70, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76,
	0x2e, 0x53, 0x65, 0x74, 0x53, 0x6b, 0x69, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x64, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x61, 0x66, 0x66,
	0x6c, 0x65, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x24, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c,
	0x65, 0x74, 0x76, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x61, 0x66, 0x66, 0x6c,
	0x65, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x52, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x6a, 0x75, 0x6e, 0x67,
	0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x66,
	0x66, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6a, 0x75, 0x6e,
	0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61,
	0x66, 0x66, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f,
	0x0a, 0x0c, 0x52, 0x65, 0x64, 0x72, 0x61, 0x77, 0x52, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x12, 0x1d,
	0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x52, 0x65, 0x64, 0x72, 0x61, 0x77,
	0x52, 0x61, 0x66, 0x66, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x52, 0x65, 0x64, 0x72, 0x61, 0x77, 0x52,
	0x61, 0x66, 0x66, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x8b, 0x01, 0x0a, 0x20, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x6e, 0x6e, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65,
	0x74, 0x76, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a,
	0x0d, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e,
	0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13,
	0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61,
	0x74, 0x6f, 0x72, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x70,
	0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x2e,
	0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x70,
	0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b,
	0x0a, 0x17, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x2e, 0x6a, 0x75, 0x6e, 0x67,
	0x6c, 0x65, 0x74, 0x76, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x4d, 0x6f, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4f,
	0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x22, 0x00, 0x30, 0x01, 0x12, 0x85, 0x01, 0x0a, 0x1e,
	0x53, 0x65, 0x74, 0x4f, 0x77, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x2f,
	0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x65, 0x74, 0x4f, 0x77, 0x6e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61,
	0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x30, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x65, 0x74, 0x4f, 0x77,
	0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x1e, 0x53, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x2f, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74,
	0x76, 0x2e, 0x53, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65,
	0x74, 0x76, 0x2e, 0x53, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x94, 0x01, 0x0a, 0x23,
	0x53, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x55, 0x6e, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x34, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53,
	0x65, 0x74, 0x4e, 0x65, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x55, 0x6e, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6a, 0x75, 0x6e, 0x67,
	0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x55, 0x6e, 0x73,
	0x6b, 0x69, 0x70, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x61, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x23, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c,
	0x65, 0x74, 0x76, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x6b, 0x69, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x25, 0x2e,
	0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e,
	0x53, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d,
	0x0a, 0x16, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x27, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c,
	0x65, 0x74, 0x76, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x6c, 0x65,
	0x61, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a,
	0x10, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x21, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x6c, 0x65,
	0x61, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x18, 0x4d, 0x61,
	0x72, 0x6b, 0x41, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x4d, 0x6f, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74,
	0x76, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x41, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6c, 0x79,
	0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x4d, 0x61, 0x72,
	0x6b, 0x41, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x6d, 0x0a, 0x16, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x4d,
	0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x2e, 0x6a, 0x75, 0x6e, 0x67,
	0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6c,
	0x79, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x74,
	0x6f, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64,
	0x0a, 0x13, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x24, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76,
	0x2e, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6a, 0x75,
	0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x56, 0x69, 0x70, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x1b, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x41, 0x64,
	0x64, 0x56, 0x69, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x41, 0x64, 0x64, 0x56, 0x69,
	0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x52, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x56, 0x69, 0x70, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x1e, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x56, 0x69, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x56, 0x69, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x13, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x24, 0x2e, 0x6a, 0x75, 0x6e,
	0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x88, 0x01, 0x0a, 0x1f, 0x53, 0x65,
	0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x30, 0x2e,
	0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x31, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x18, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x12, 0x29, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6a, 0x75,
	0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0c, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x2e, 0x6a, 0x75, 0x6e, 0x67,
	0x6c, 0x65, 0x74, 0x76, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c,
	0x65, 0x74, 0x76, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x6a,
	0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x2e, 0x6a, 0x75,
	0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x23, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8e, 0x01, 0x0a, 0x21, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57,
	0x69, 0x74, 0x68, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12,
	0x32, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x57, 0x69, 0x74, 0x68, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x10, 0x43, 0x6c,
	0x6f, 0x6e, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x6c, 0x6f,
	0x6e, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x6a,
	0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x10, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x6a, 0x75,
	0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x23, 0x2e, 0x6a, 0x75, 0x6e,
	0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x19, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x15,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x19, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76,
	0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65,
	0x1a, 0x27, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x14, 0x43,
	0x6c, 0x6f, 0x6e, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x25, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43,
	0x6c, 0x6f, 0x6e, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6a, 0x75, 0x6e,
	0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x26, 0x2e,
	0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5e, 0x0a, 0x11, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76,
	0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6a, 0x75, 0x6e, 0x67,
	0x6c, 0x65, 0x74, 0x76, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x58, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x53,
	0x74, 0x6f, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76,
	0x2e, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0e, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x1f, 0x2e, 0x6a,
	0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x6b, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x26, 0x2e, 0x6a, 0x75, 0x6e,
	0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x22, 0x00, 0x30, 0x01, 0x12, 0x6c,
	0x0a, 0x1a, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x2e, 0x6a,
	0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6a, 0x75, 0x6e, 0x67,
	0x6c, 0x65, 0x74, 0x76, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x00, 0x30, 0x01, 0x12, 0x88, 0x01, 0x0a,
	0x1f, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x30, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x45, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x6e,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x45, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4f, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x11, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x6a,
	0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x11, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x6a,
	0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x19, 0x54, 0x79, 0x70, 0x65, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2b, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x6d, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x12, 0x27, 0x2e, 0x6a, 0x75, 0x6e, 0x67,
	0x6c, 0x65, 0x74, 0x76, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b,
	0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x29, 0x2e, 0x6a, 0x75, 0x6e,
	0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76,
	0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x70, 0x0a, 0x17, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x28, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74,
	0x76, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a,
	0x17, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c,
	0x65, 0x74, 0x76, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2e, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x21, 0x5a, 0x1f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x6e,
	0x79, 0x69, 0x6d, 0x2f, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x76, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_jungletv_proto_rawDescOnce sync.Once
	file_jungletv_proto_rawDescData = file_jungletv_proto_rawDesc
)

func file_jungletv_proto_rawDescGZIP() []byte {
	file_jungletv_proto_rawDescOnce.Do(func() {
		file_jungletv_proto_rawDescData = protoimpl.X.CompressGZIP(file_jungletv_proto_rawDescData)
	})
	return file_jungletv_proto_rawDescData
}

var file_jungletv_proto_enumTypes = make([]protoimpl.EnumInfo, 14)
var file_jungletv_proto_msgTypes = make([]protoimpl.MessageInfo, 252)
var file_jungletv_proto_goTypes = []interface{}{
	(EnqueueMediaTicketStatus)(0),                       // 0: jungletv.EnqueueMediaTicketStatus
	(QueueEntryMovementDirection)(0),                    // 1: jungletv.QueueEntryMovementDirection
	(SkipStatus)(0),                                     // 2: jungletv.SkipStatus
	(ForcedTicketEnqueueType)(0),                        // 3: jungletv.ForcedTicketEnqueueType
	(ChatDisabledReason)(0),                             // 4: jungletv.ChatDisabledReason
	(AllowedMediaEnqueuingType)(0),                      // 5: jungletv.AllowedMediaEnqueuingType
	(PermissionLevel)(0),                                // 6: jungletv.PermissionLevel
	(DisallowedMediaType)(0),                            // 7: jungletv.DisallowedMediaType
	(DisallowedMediaCollectionType)(0),                  // 8: jungletv.DisallowedMediaCollectionType
	(LeaderboardPeriod)(0),                              // 9: jungletv.LeaderboardPeriod
	(RaffleDrawingStatus)(0),                            // 10: jungletv.RaffleDrawingStatus
	(ConnectionService)(0),                              // 11: jungletv.ConnectionService
	(PointsTransactionType)(0),                          // 12: jungletv.PointsTransactionType
	(VipUserAppearance)(0),                              // 13: jungletv.VipUserAppearance
	(*SignInRequest)(nil),                               // 14: jungletv.SignInRequest
	(*LabSignInOptions)(nil),                            // 15: jungletv.LabSignInOptions
	(*SignInProgress)(nil),                              // 16: jungletv.SignInProgress
	(*SignInVerification)(nil),                          // 17: jungletv.SignInVerification
	(*SignInAccountUnopened)(nil),                       // 18: jungletv.SignInAccountUnopened
	(*SignInResponse)(nil),                              // 19: jungletv.SignInResponse
	(*SignInVerificationExpired)(nil),                   // 20: jungletv.SignInVerificationExpired
	(*SignInMessageToSign)(nil),                         // 21: jungletv.SignInMessageToSign
	(*VerifySignInSignatureRequest)(nil),                // 22: jungletv.VerifySignInSignatureRequest
	(*EnqueueYouTubeVideoData)(nil),                     // 23: jungletv.EnqueueYouTubeVideoData
	(*EnqueueSoundCloudTrackData)(nil),                  // 24: jungletv.EnqueueSoundCloudTrackData
	(*EnqueueDocumentData)(nil),                         // 25: jungletv.EnqueueDocumentData
	(*EnqueueStubData)(nil),                             // 26: jungletv.EnqueueStubData
	(*EnqueueMediaRequest)(nil),                         // 27: jungletv.EnqueueMediaRequest
	(*EnqueueMediaResponse)(nil),                        // 28: jungletv.EnqueueMediaResponse
	(*EnqueueMediaFailure)(nil),                         // 29: jungletv.EnqueueMediaFailure
	(*EnqueueMediaTicket)(nil),                          // 30: jungletv.EnqueueMediaTicket
	(*ExtraCurrencyPaymentData)(nil),                    // 31: jungletv.ExtraCurrencyPaymentData
	(*MonitorTicketRequest)(nil),                        // 32: jungletv.MonitorTicketRequest
	(*RemoveOwnQueueEntryRequest)(nil),                  // 33: jungletv.RemoveOwnQueueEntryRequest
	(*RemoveOwnQueueEntryResponse)(nil),                 // 34: jungletv.RemoveOwnQueueEntryResponse
	(*MoveQueueEntryRequest)(nil),                       // 35: jungletv.MoveQueueEntryRequest
	(*MoveQueueEntryResponse)(nil),                      // 36: jungletv.MoveQueueEntryResponse
	(*ConsumeMediaRequest)(nil),                         // 37: jungletv.ConsumeMediaRequest
	(*NowPlayingStubData)(nil),                          // 38: jungletv.NowPlayingStubData
	(*NowPlayingYouTubeVideoData)(nil),                  // 39: jungletv.NowPlayingYouTubeVideoData
	(*NowPlayingSoundCloudTrackData)(nil),               // 40: jungletv.NowPlayingSoundCloudTrackData
	(*NowPlayingDocumentData)(nil),                      // 41: jungletv.NowPlayingDocumentData
	(*NowPlayingApplicationPageData)(nil),               // 42: jungletv.NowPlayingApplicationPageData
	(*MediaConsumptionCheckpoint)(nil),                  // 43: jungletv.MediaConsumptionCheckpoint
	(*ActivityChallenge)(nil),                           // 44: jungletv.ActivityChallenge
	(*ConfigurationChange)(nil),                         // 45: jungletv.ConfigurationChange
	(*ConfigurationChangeSidebarTabOpen)(nil),           // 46: jungletv.ConfigurationChangeSidebarTabOpen
	(*MonitorQueueRequest)(nil),                         // 47: jungletv.MonitorQueueRequest
	(*Queue)(nil),                                       // 48: jungletv.Queue
	(*QueueYouTubeVideoData)(nil),                       // 49: jungletv.QueueYouTubeVideoData
	(*QueueSoundCloudTrackData)(nil),                    // 50: jungletv.QueueSoundCloudTrackData
	(*QueueDocumentData)(nil),                           // 51: jungletv.QueueDocumentData
	(*QueueApplicationPageData)(nil),                    // 52: jungletv.QueueApplicationPageData
	(*QueueConcealedData)(nil),                          // 53: jungletv.QueueConcealedData
	(*QueueEntry)(nil),                                  // 54: jungletv.QueueEntry
	(*MonitorSkipAndTipRequest)(nil),                    // 55: jungletv.MonitorSkipAndTipRequest
	(*SkipAndTipStatus)(nil),                            // 56: jungletv.SkipAndTipStatus
	(*RewardInfoRequest)(nil),                           // 57: jungletv.RewardInfoRequest
	(*RewardInfoResponse)(nil),                          // 58: jungletv.RewardInfoResponse
	(*RemoveQueueEntryRequest)(nil),                     // 59: jungletv.RemoveQueueEntryRequest
	(*RemoveQueueEntryResponse)(nil),                    // 60: jungletv.RemoveQueueEntryResponse
	(*ForciblyEnqueueTicketRequest)(nil),                // 61: jungletv.ForciblyEnqueueTicketRequest
	(*ForciblyEnqueueTicketResponse)(nil),               // 62: jungletv.ForciblyEnqueueTicketResponse
	(*SubmitActivityChallengeRequest)(nil),              // 63: jungletv.SubmitActivityChallengeRequest
	(*SubmitActivityChallengeResponse)(nil),             // 64: jungletv.SubmitActivityChallengeResponse
	(*ConsumeChatRequest)(nil),                          // 65: jungletv.ConsumeChatRequest
	(*ChatUpdate)(nil),                                  // 66: jungletv.ChatUpdate
	(*ChatUpdateEvent)(nil),                             // 67: jungletv.ChatUpdateEvent
	(*ChatMessage)(nil),                                 // 68: jungletv.ChatMessage
	(*ChatMessageAttachment)(nil),                       // 69: jungletv.ChatMessageAttachment
	(*ChatMessageTenorGifAttachment)(nil),               // 70: jungletv.ChatMessageTenorGifAttachment
	(*ChatMessageApplicationPageAttachment)(nil),        // 71: jungletv.ChatMessageApplicationPageAttachment
	(*UserChatMessage)(nil),                             // 72: jungletv.UserChatMessage
	(*SystemChatMessage)(nil),                           // 73: jungletv.SystemChatMessage
	(*ChatDisabledEvent)(nil),                           // 74: jungletv.ChatDisabledEvent
	(*ChatEnabledEvent)(nil),                            // 75: jungletv.ChatEnabledEvent
	(*ChatMessageCreatedEvent)(nil),                     // 76: jungletv.ChatMessageCreatedEvent
	(*ChatMessageDeletedEvent)(nil),                     // 77: jungletv.ChatMessageDeletedEvent
	(*ChatHeartbeatEvent)(nil),                          // 78: jungletv.ChatHeartbeatEvent
	(*ChatBlockedUserCreatedEvent)(nil),                 // 79: jungletv.ChatBlockedUserCreatedEvent
	(*ChatBlockedUserDeletedEvent)(nil),                 // 80: jungletv.ChatBlockedUserDeletedEvent
	(*ChatEmoteCreatedEvent)(nil),                       // 81: jungletv.ChatEmoteCreatedEvent
	(*SendChatMessageRequest)(nil),                      // 82: jungletv.SendChatMessageRequest
	(*SendChatMessageResponse)(nil),                     // 83: jungletv.SendChatMessageResponse
	(*RemoveChatMessageRequest)(nil),                    // 84: jungletv.RemoveChatMessageRequest
	(*RemoveChatMessageResponse)(nil),                   // 85: jungletv.RemoveChatMessageResponse
	(*SetChatSettingsRequest)(nil),                      // 86: jungletv.SetChatSettingsRequest
	(*SetChatSettingsResponse)(nil),                     // 87: jungletv.SetChatSettingsResponse
	(*BanUserRequest)(nil),                              // 88: jungletv.BanUserRequest
	(*BanUserResponse)(nil),                             // 89: jungletv.BanUserResponse
	(*RemoveBanRequest)(nil),                            // 90: jungletv.RemoveBanRequest
	(*RemoveBanResponse)(nil),                           // 91: jungletv.RemoveBanResponse
	(*UserBan)(nil),                                     // 92: jungletv.UserBan
	(*UserBansRequest)(nil),                             // 93: jungletv.UserBansRequest
	(*UserBansResponse)(nil),                            // 94: jungletv.UserBansResponse
	(*VerifyUserRequest)(nil),                           // 95: jungletv.VerifyUserRequest
	(*VerifyUserResponse)(nil),                          // 96: jungletv.VerifyUserResponse
	(*RemoveUserVerificationRequest)(nil),               // 97: jungletv.RemoveUserVerificationRequest
	(*RemoveUserVerificationResponse)(nil),              // 98: jungletv.RemoveUserVerificationResponse
	(*UserVerification)(nil),                            // 99: jungletv.UserVerification
	(*UserVerificationsRequest)(nil),                    // 100: jungletv.UserVerificationsRequest
	(*UserVerificationsResponse)(nil),                   // 101: jungletv.UserVerificationsResponse
	(*SetMediaEnqueuingEnabledRequest)(nil),             // 102: jungletv.SetMediaEnqueuingEnabledRequest
	(*SetMediaEnqueuingEnabledResponse)(nil),            // 103: jungletv.SetMediaEnqueuingEnabledResponse
	(*UserChatMessagesRequest)(nil),                     // 104: jungletv.UserChatMessagesRequest
	(*UserChatMessagesResponse)(nil),                    // 105: jungletv.UserChatMessagesResponse
	(*UserPermissionLevelRequest)(nil),                  // 106: jungletv.UserPermissionLevelRequest
	(*UserPermissionLevelResponse)(nil),                 // 107: jungletv.UserPermissionLevelResponse
	(*DisallowedMediaRequest)(nil),                      // 108: jungletv.DisallowedMediaRequest
	(*DisallowedMedia)(nil),                             // 109: jungletv.DisallowedMedia
	(*DisallowedMediaResponse)(nil),                     // 110: jungletv.DisallowedMediaResponse
	(*AddDisallowedMediaRequest)(nil),                   // 111: jungletv.AddDisallowedMediaRequest
	(*AddDisallowedMediaResponse)(nil),                  // 112: jungletv.AddDisallowedMediaResponse
	(*RemoveDisallowedMediaRequest)(nil),                // 113: jungletv.RemoveDisallowedMediaRequest
	(*RemoveDisallowedMediaResponse)(nil),               // 114: jungletv.RemoveDisallowedMediaResponse
	(*DisallowedMediaCollectionsRequest)(nil),           // 115: jungletv.DisallowedMediaCollectionsRequest
	(*DisallowedMediaCollection)(nil),                   // 116: jungletv.DisallowedMediaCollection
	(*DisallowedMediaCollectionsResponse)(nil),          // 117: jungletv.DisallowedMediaCollectionsResponse
	(*AddDisallowedMediaCollectionRequest)(nil),         // 118: jungletv.AddDisallowedMediaCollectionRequest
	(*AddDisallowedMediaCollectionResponse)(nil),        // 119: jungletv.AddDisallowedMediaCollectionResponse
	(*RemoveDisallowedMediaCollectionRequest)(nil),      // 120: jungletv.RemoveDisallowedMediaCollectionRequest
	(*RemoveDisallowedMediaCollectionResponse)(nil),     // 121: jungletv.RemoveDisallowedMediaCollectionResponse
	(*GetDocumentRequest)(nil),                          // 122: jungletv.GetDocumentRequest
	(*Document)(nil),                                    // 123: jungletv.Document
	(*UpdateDocumentResponse)(nil),                      // 124: jungletv.UpdateDocumentResponse
	(*DocumentsRequest)(nil),                            // 125: jungletv.DocumentsRequest
	(*DocumentHeader)(nil),                              // 126: jungletv.DocumentHeader
	(*DocumentsResponse)(nil),                           // 127: jungletv.DocumentsResponse
	(*SetChatNicknameRequest)(nil),                      // 128: jungletv.SetChatNicknameRequest
	(*SetChatNicknameResponse)(nil),                     // 129: jungletv.SetChatNicknameResponse
	(*SetUserChatNicknameRequest)(nil),                  // 130: jungletv.SetUserChatNicknameRequest
	(*SetUserChatNicknameResponse)(nil),                 // 131: jungletv.SetUserChatNicknameResponse
	(*SetPricesMultiplierRequest)(nil),                  // 132: jungletv.SetPricesMultiplierRequest
	(*SetPricesMultiplierResponse)(nil),                 // 133: jungletv.SetPricesMultiplierResponse
	(*SetMinimumPricesMultiplierRequest)(nil),           // 134: jungletv.SetMinimumPricesMultiplierRequest
	(*SetMinimumPricesMultiplierResponse)(nil),          // 135: jungletv.SetMinimumPricesMultiplierResponse
	(*WithdrawRequest)(nil),                             // 136: jungletv.WithdrawRequest
	(*WithdrawResponse)(nil),                            // 137: jungletv.WithdrawResponse
	(*LeaderboardsRequest)(nil),                         // 138: jungletv.LeaderboardsRequest
	(*LeaderboardsResponse)(nil),                        // 139: jungletv.LeaderboardsResponse
	(*Leaderboard)(nil),                                 // 140: jungletv.Leaderboard
	(*LeaderboardRow)(nil),                              // 141: jungletv.LeaderboardRow
	(*LeaderboardValue)(nil),                            // 142: jungletv.LeaderboardValue
	(*RewardHistoryRequest)(nil),                        // 143: jungletv.RewardHistoryRequest
	(*ReceivedReward)(nil),                              // 144: jungletv.ReceivedReward
	(*RewardHistoryResponse)(nil),                       // 145: jungletv.RewardHistoryResponse
	(*WithdrawalHistoryRequest)(nil),                    // 146: jungletv.WithdrawalHistoryRequest
	(*Withdrawal)(nil),                                  // 147: jungletv.Withdrawal
	(*WithdrawalHistoryResponse)(nil),                   // 148: jungletv.WithdrawalHistoryResponse
	(*SetCrowdfundedSkippingEnabledRequest)(nil),        // 149: jungletv.SetCrowdfundedSkippingEnabledRequest
	(*SetCrowdfundedSkippingEnabledResponse)(nil),       // 150: jungletv.SetCrowdfundedSkippingEnabledResponse
	(*SetSkipPriceMultiplierRequest)(nil),               // 151: jungletv.SetSkipPriceMultiplierRequest
	(*SetSkipPriceMultiplierResponse)(nil),              // 152: jungletv.SetSkipPriceMultiplierResponse
	(*ProduceSegchaChallengeRequest)(nil),               // 153: jungletv.ProduceSegchaChallengeRequest
	(*ProduceSegchaChallengeResponse)(nil),              // 154: jungletv.ProduceSegchaChallengeResponse
	(*SegchaChallengeStep)(nil),                         // 155: jungletv.SegchaChallengeStep
	(*ConfirmRaffleWinnerRequest)(nil),                  // 156: jungletv.ConfirmRaffleWinnerRequest
	(*ConfirmRaffleWinnerResponse)(nil),                 // 157: jungletv.ConfirmRaffleWinnerResponse
	(*CompleteRaffleRequest)(nil),                       // 158: jungletv.CompleteRaffleRequest
	(*CompleteRaffleResponse)(nil),                      // 159: jungletv.CompleteRaffleResponse
	(*RedrawRaffleRequest)(nil),                         // 160: jungletv.RedrawRaffleRequest
	(*RedrawRaffleResponse)(nil),                        // 161: jungletv.RedrawRaffleResponse
	(*OngoingRaffleInfoRequest)(nil),                    // 162: jungletv.OngoingRaffleInfoRequest
	(*OngoingRaffleInfoResponse)(nil),                   // 163: jungletv.OngoingRaffleInfoResponse
	(*OngoingRaffleInfo)(nil),                           // 164: jungletv.OngoingRaffleInfo
	(*RaffleDrawing)(nil),                               // 165: jungletv.RaffleDrawing
	(*RaffleDrawingsRequest)(nil),                       // 166: jungletv.RaffleDrawingsRequest
	(*RaffleDrawingsResponse)(nil),                      // 167: jungletv.RaffleDrawingsResponse
	(*TriggerAnnouncementsNotificationRequest)(nil),     // 168: jungletv.TriggerAnnouncementsNotificationRequest
	(*TriggerAnnouncementsNotificationResponse)(nil),    // 169: jungletv.TriggerAnnouncementsNotificationResponse
	(*SpectatorInfoRequest)(nil),                        // 170: jungletv.SpectatorInfoRequest
	(*Spectator)(nil),                                   // 171: jungletv.Spectator
	(*ResetSpectatorStatusRequest)(nil),                 // 172: jungletv.ResetSpectatorStatusRequest
	(*ResetSpectatorStatusResponse)(nil),                // 173: jungletv.ResetSpectatorStatusResponse
	(*MonitorModerationStatusRequest)(nil),              // 174: jungletv.MonitorModerationStatusRequest
	(*ModerationStatusOverview)(nil),                    // 175: jungletv.ModerationStatusOverview
	(*SetQueueEntryReorderingAllowedRequest)(nil),       // 176: jungletv.SetQueueEntryReorderingAllowedRequest
	(*SetQueueEntryReorderingAllowedResponse)(nil),      // 177: jungletv.SetQueueEntryReorderingAllowedResponse
	(*SetOwnQueueEntryRemovalAllowedRequest)(nil),       // 178: jungletv.SetOwnQueueEntryRemovalAllowedRequest
	(*SetOwnQueueEntryRemovalAllowedResponse)(nil),      // 179: jungletv.SetOwnQueueEntryRemovalAllowedResponse
	(*SetNewQueueEntriesAlwaysUnskippableRequest)(nil),  // 180: jungletv.SetNewQueueEntriesAlwaysUnskippableRequest
	(*SetNewQueueEntriesAlwaysUnskippableResponse)(nil), // 181: jungletv.SetNewQueueEntriesAlwaysUnskippableResponse
	(*SetSkippingEnabledRequest)(nil),                   // 182: jungletv.SetSkippingEnabledRequest
	(*SetSkippingEnabledResponse)(nil),                  // 183: jungletv.SetSkippingEnabledResponse
	(*ConnectionsRequest)(nil),                          // 184: jungletv.ConnectionsRequest
	(*Connection)(nil),                                  // 185: jungletv.Connection
	(*ServiceInfo)(nil),                                 // 186: jungletv.ServiceInfo
	(*ConnectionsResponse)(nil),                         // 187: jungletv.ConnectionsResponse
	(*CreateConnectionRequest)(nil),                     // 188: jungletv.CreateConnectionRequest
	(*CreateConnectionResponse)(nil),                    // 189: jungletv.CreateConnectionResponse
	(*RemoveConnectionRequest)(nil),                     // 190: jungletv.RemoveConnectionRequest
	(*RemoveConnectionResponse)(nil),                    // 191: jungletv.RemoveConnectionResponse
	(*SetQueueInsertCursorRequest)(nil),                 // 192: jungletv.SetQueueInsertCursorRequest
	(*SetQueueInsertCursorResponse)(nil),                // 193: jungletv.SetQueueInsertCursorResponse
	(*ClearQueueInsertCursorRequest)(nil),               // 194: jungletv.ClearQueueInsertCursorRequest
	(*ClearQueueInsertCursorResponse)(nil),              // 195: jungletv.ClearQueueInsertCursorResponse
	(*UserProfileRequest)(nil),                          // 196: jungletv.UserProfileRequest
	(*UserProfileResponse)(nil),                         // 197: jungletv.UserProfileResponse
	(*UserStatsRequest)(nil),                            // 198: jungletv.UserStatsRequest
	(*UserStatsForPeriod)(nil),                          // 199: jungletv.UserStatsForPeriod
	(*UserStatsResponse)(nil),                           // 200: jungletv.UserStatsResponse
	(*PlayedMedia)(nil),                                 // 201: jungletv.PlayedMedia
	(*SetProfileBiographyRequest)(nil),                  // 202: jungletv.SetProfileBiographyRequest
	(*SetProfileBiographyResponse)(nil),                 // 203: jungletv.SetProfileBiographyResponse
	(*SetProfileFeaturedMediaRequest)(nil),              // 204: jungletv.SetProfileFeaturedMediaRequest
	(*SetProfileFeaturedMediaResponse)(nil),             // 205: jungletv.SetProfileFeaturedMediaResponse
	(*ClearUserProfileRequest)(nil),                     // 206: jungletv.ClearUserProfileRequest
	(*ClearUserProfileResponse)(nil),                    // 207: jungletv.ClearUserProfileResponse
	(*PlayedMediaHistoryRequest)(nil),                   // 208: jungletv.PlayedMediaHistoryRequest
	(*PlayedMediaHistoryResponse)(nil),                  // 209: jungletv.PlayedMediaHistoryResponse
	(*BlockUserRequest)(nil),                            // 210: jungletv.BlockUserRequest
	(*BlockUserResponse)(nil),                           // 211: jungletv.BlockUserResponse
	(*UnblockUserRequest)(nil),                          // 212: jungletv.UnblockUserRequest
	(*UnblockUserResponse)(nil),                         // 213: jungletv.UnblockUserResponse
	(*BlockedUsersRequest)(nil),                         // 214: jungletv.BlockedUsersRequest
	(*BlockedUser)(nil),                                 // 215: jungletv.BlockedUser
	(*BlockedUsersResponse)(nil),                        // 216: jungletv.BlockedUsersResponse
	(*MarkAsActivelyModeratingRequest)(nil),             // 217: jungletv.MarkAsActivelyModeratingRequest
	(*MarkAsActivelyModeratingResponse)(nil),            // 218: jungletv.MarkAsActivelyModeratingResponse
	(*StopActivelyModeratingRequest)(nil),               // 219: jungletv.StopActivelyModeratingRequest
	(*StopActivelyModeratingResponse)(nil),              // 220: jungletv.StopActivelyModeratingResponse
	(*PointsInfoRequest)(nil),                           // 221: jungletv.PointsInfoRequest
	(*PointsInfoResponse)(nil),                          // 222: jungletv.PointsInfoResponse
	(*SubscriptionDetails)(nil),                         // 223: jungletv.SubscriptionDetails
	(*PointsTransactionsRequest)(nil),                   // 224: jungletv.PointsTransactionsRequest
	(*PointsTransactionsResponse)(nil),                  // 225: jungletv.PointsTransactionsResponse
	(*PointsTransaction)(nil),                           // 226: jungletv.PointsTransaction
	(*ChatGifSearchRequest)(nil),                        // 227: jungletv.ChatGifSearchRequest
	(*ChatGifSearchResponse)(nil),                       // 228: jungletv.ChatGifSearchResponse
	(*ChatGifSearchResult)(nil),                         // 229: jungletv.ChatGifSearchResult
	(*AdjustPointsBalanceRequest)(nil),                  // 230: jungletv.AdjustPointsBalanceRequest
	(*AdjustPointsBalanceResponse)(nil),                 // 231: jungletv.AdjustPointsBalanceResponse
	(*ConvertBananoToPointsRequest)(nil),                // 232: jungletv.ConvertBananoToPointsRequest
	(*ConvertBananoToPointsStatus)(nil),                 // 233: jungletv.ConvertBananoToPointsStatus
	(*StartOrExtendSubscriptionRequest)(nil),            // 234: jungletv.StartOrExtendSubscriptionRequest
	(*StartOrExtendSubscriptionResponse)(nil),           // 235: jungletv.StartOrExtendSubscriptionResponse
	(*SoundCloudTrackDetailsRequest)(nil),               // 236: jungletv.SoundCloudTrackDetailsRequest
	(*SoundCloudTrackDetailsResponse)(nil),              // 237: jungletv.SoundCloudTrackDetailsResponse
	(*AddVipUserRequest)(nil),                           // 238: jungletv.AddVipUserRequest
	(*AddVipUserResponse)(nil),                          // 239: jungletv.AddVipUserResponse
	(*RemoveVipUserRequest)(nil),                        // 240: jungletv.RemoveVipUserRequest
	(*RemoveVipUserResponse)(nil),                       // 241: jungletv.RemoveVipUserResponse
	(*TriggerClientReloadRequest)(nil),                  // 242: jungletv.TriggerClientReloadRequest
	(*TriggerClientReloadResponse)(nil),                 // 243: jungletv.TriggerClientReloadResponse
	(*IncreaseOrReduceSkipThresholdRequest)(nil),        // 244: jungletv.IncreaseOrReduceSkipThresholdRequest
	(*IncreaseOrReduceSkipThresholdResponse)(nil),       // 245: jungletv.IncreaseOrReduceSkipThresholdResponse
	(*SetMulticurrencyPaymentsEnabledRequest)(nil),      // 246: jungletv.SetMulticurrencyPaymentsEnabledRequest
	(*SetMulticurrencyPaymentsEnabledResponse)(nil),     // 247: jungletv.SetMulticurrencyPaymentsEnabledResponse
	(*CheckMediaEnqueuingPasswordRequest)(nil),          // 248: jungletv.CheckMediaEnqueuingPasswordRequest
	(*CheckMediaEnqueuingPasswordResponse)(nil),         // 249: jungletv.CheckMediaEnqueuingPasswordResponse
	(*MonitorMediaEnqueuingPermissionRequest)(nil),      // 250: jungletv.MonitorMediaEnqueuingPermissionRequest
	(*MediaEnqueuingPermissionStatus)(nil),              // 251: jungletv.MediaEnqueuingPermissionStatus
	(*InvalidateAuthTokensRequest)(nil),                 // 252: jungletv.InvalidateAuthTokensRequest
	(*InvalidateAuthTokensResponse)(nil),                // 253: jungletv.InvalidateAuthTokensResponse
	(*InvalidateUserAuthTokensRequest)(nil),             // 254: jungletv.InvalidateUserAuthTokensRequest
	(*InvalidateUserAuthTokensResponse)(nil),            // 255: jungletv.InvalidateUserAuthTokensResponse
	(*AuthorizeApplicationRequest)(nil),                 // 256: jungletv.AuthorizeApplicationRequest
	(*AuthorizeApplicationEvent)(nil),                   // 257: jungletv.AuthorizeApplicationEvent
	(*AuthorizeApplicationHeartbeatEvent)(nil),          // 258: jungletv.AuthorizeApplicationHeartbeatEvent
	(*AuthorizeApplicationAuthorizationURLEvent)(nil),   // 259: jungletv.AuthorizeApplicationAuthorizationURLEvent
	(*AuthorizeApplicationApprovedEvent)(nil),           // 260: jungletv.AuthorizeApplicationApprovedEvent
	(*AuthorizationProcessDataRequest)(nil),             // 261: jungletv.AuthorizationProcessDataRequest
	(*AuthorizationProcessDataResponse)(nil),            // 262: jungletv.AuthorizationProcessDataResponse
	(*ConsentOrDissentToAuthorizationRequest)(nil),      // 263: jungletv.ConsentOrDissentToAuthorizationRequest
	(*ConsentOrDissentToAuthorizationResponse)(nil),     // 264: jungletv.ConsentOrDissentToAuthorizationResponse
	nil,                                               // 265: jungletv.PointsTransaction.ExtraEntry
	(*timestamppb.Timestamp)(nil),                     // 266: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),                       // 267: google.protobuf.Duration
	(*ResolveApplicationPageResponse)(nil),            // 268: jungletv.ResolveApplicationPageResponse
	(*User)(nil),                                      // 269: jungletv.User
	(*PaginationParameters)(nil),                      // 270: jungletv.PaginationParameters
	(*ApplicationsRequest)(nil),                       // 271: jungletv.ApplicationsRequest
	(*GetApplicationRequest)(nil),                     // 272: jungletv.GetApplicationRequest
	(*Application)(nil),                               // 273: jungletv.Application
	(*CreateApplicationWithWalletPrefixRequest)(nil),  // 274: jungletv.CreateApplicationWithWalletPrefixRequest
	(*CloneApplicationRequest)(nil),                   // 275: jungletv.CloneApplicationRequest
	(*DeleteApplicationRequest)(nil),                  // 276: jungletv.DeleteApplicationRequest
	(*ApplicationFilesRequest)(nil),                   // 277: jungletv.ApplicationFilesRequest
	(*GetApplicationFileRequest)(nil),                 // 278: jungletv.GetApplicationFileRequest
	(*ApplicationFile)(nil),                           // 279: jungletv.ApplicationFile
	(*CloneApplicationFileRequest)(nil),               // 280: jungletv.CloneApplicationFileRequest
	(*DeleteApplicationFileRequest)(nil),              // 281: jungletv.DeleteApplicationFileRequest
	(*LaunchApplicationRequest)(nil),                  // 282: jungletv.LaunchApplicationRequest
	(*StopApplicationRequest)(nil),                    // 283: jungletv.StopApplicationRequest
	(*ApplicationLogRequest)(nil),                     // 284: jungletv.ApplicationLogRequest
	(*ConsumeApplicationLogRequest)(nil),              // 285: jungletv.ConsumeApplicationLogRequest
	(*MonitorRunningApplicationsRequest)(nil),         // 286: jungletv.MonitorRunningApplicationsRequest
	(*EvaluateExpressionOnApplicationRequest)(nil),    // 287: jungletv.EvaluateExpressionOnApplicationRequest
	(*ExportApplicationRequest)(nil),                  // 288: jungletv.ExportApplicationRequest
	(*ImportApplicationRequest)(nil),                  // 289: jungletv.ImportApplicationRequest
	(*TypeScriptTypeDefinitionsRequest)(nil),          // 290: jungletv.TypeScriptTypeDefinitionsRequest
	(*ResolveApplicationPageRequest)(nil),             // 291: jungletv.ResolveApplicationPageRequest
	(*ConsumeApplicationEventsRequest)(nil),           // 292: jungletv.ConsumeApplicationEventsRequest
	(*ApplicationServerMethodRequest)(nil),            // 293: jungletv.ApplicationServerMethodRequest
	(*TriggerApplicationEventRequest)(nil),            // 294: jungletv.TriggerApplicationEventRequest
	(*ApplicationsResponse)(nil),                      // 295: jungletv.ApplicationsResponse
	(*UpdateApplicationResponse)(nil),                 // 296: jungletv.UpdateApplicationResponse
	(*CreateApplicationWithWalletPrefixResponse)(nil), // 297: jungletv.CreateApplicationWithWalletPrefixResponse
	(*CloneApplicationResponse)(nil),                  // 298: jungletv.CloneApplicationResponse
	(*DeleteApplicationResponse)(nil),                 // 299: jungletv.DeleteApplicationResponse
	(*ApplicationFilesResponse)(nil),                  // 300: jungletv.ApplicationFilesResponse
	(*UpdateApplicationFileResponse)(nil),             // 301: jungletv.UpdateApplicationFileResponse
	(*CloneApplicationFileResponse)(nil),              // 302: jungletv.CloneApplicationFileResponse
	(*DeleteApplicationFileResponse)(nil),             // 303: jungletv.DeleteApplicationFileResponse
	(*LaunchApplicationResponse)(nil),                 // 304: jungletv.LaunchApplicationResponse
	(*StopApplicationResponse)(nil),                   // 305: jungletv.StopApplicationResponse
	(*ApplicationLogResponse)(nil),                    // 306: jungletv.ApplicationLogResponse
	(*ApplicationLogEntryContainer)(nil),              // 307: jungletv.ApplicationLogEntryContainer
	(*RunningApplications)(nil),                       // 308: jungletv.RunningApplications
	(*EvaluateExpressionOnApplicationResponse)(nil),   // 309: jungletv.EvaluateExpressionOnApplicationResponse
	(*ExportApplicationResponse)(nil),                 // 310: jungletv.ExportApplicationResponse
	(*ImportApplicationResponse)(nil),                 // 311: jungletv.ImportApplicationResponse
	(*TypeScriptTypeDefinitionsResponse)(nil),         // 312: jungletv.TypeScriptTypeDefinitionsResponse
	(*ApplicationEventUpdate)(nil),                    // 313: jungletv.ApplicationEventUpdate
	(*ApplicationServerMethodResponse)(nil),           // 314: jungletv.ApplicationServerMethodResponse
	(*TriggerApplicationEventResponse)(nil),           // 315: jungletv.TriggerApplicationEventResponse
}
var file_jungletv_proto_depIdxs = []int32{
	15,  // 0: jungletv.SignInRequest.lab_sign_in_options:type_name -> jungletv.LabSignInOptions
	6,   // 1: jungletv.LabSignInOptions.desired_permission_level:type_name -> jungletv.PermissionLevel
	17,  // 2: jungletv.SignInProgress.verification:type_name -> jungletv.SignInVerification
	19,  // 3: jungletv.SignInProgress.response:type_name -> jungletv.SignInResponse
	20,  // 4: jungletv.SignInProgress.expired:type_name -> jungletv.SignInVerificationExpired
	18,  // 5: jungletv.SignInProgress.account_unopened:type_name -> jungletv.SignInAccountUnopened
	21,  // 6: jungletv.SignInProgress.message_to_sign:type_name -> jungletv.SignInMessageToSign
	266, // 7: jungletv.SignInVerification.expiration:type_name -> google.protobuf.Timestamp
	266, // 8: jungletv.SignInResponse.token_expiration:type_name -> google.protobuf.Timestamp
	266, // 9: jungletv.SignInMessageToSign.expiration:type_name -> google.protobuf.Timestamp
	267, // 10: jungletv.EnqueueYouTubeVideoData.start_offset:type_name -> google.protobuf.Duration
	267, // 11: jungletv.EnqueueYouTubeVideoData.end_offset:type_name -> google.protobuf.Duration
	267, // 12: jungletv.EnqueueSoundCloudTrackData.start_offset:type_name -> google.protobuf.Duration
	267, // 13: jungletv.EnqueueSoundCloudTrackData.end_offset:type_name -> google.protobuf.Duration
	267, // 14: jungletv.EnqueueDocumentData.duration:type_name -> google.protobuf.Duration
	3,   // 15: jungletv.EnqueueDocumentData.enqueue_type:type_name -> jungletv.ForcedTicketEnqueueType
	26,  // 16: jungletv.EnqueueMediaRequest.stub_data:type_name -> jungletv.EnqueueStubData
	23,  // 17: jungletv.EnqueueMediaRequest.youtube_video_data:type_name -> jungletv.EnqueueYouTubeVideoData
	24,  // 18: jungletv.EnqueueMediaRequest.soundcloud_track_data:type_name -> jungletv.EnqueueSoundCloudTrackData
	25,  // 19: jungletv.EnqueueMediaRequest.document_data:type_name -> jungletv.EnqueueDocumentData
	30,  // 20: jungletv.EnqueueMediaResponse.ticket:type_name -> jungletv.EnqueueMediaTicket
	29,  // 21: jungletv.EnqueueMediaResponse.failure:type_name -> jungletv.EnqueueMediaFailure
	0,   // 22: jungletv.EnqueueMediaTicket.status:type_name -> jungletv.EnqueueMediaTicketStatus
	266, // 23: jungletv.EnqueueMediaTicket.expiration:type_name -> google.protobuf.Timestamp
	267, // 24: jungletv.EnqueueMediaTicket.length:type_name -> google.protobuf.Duration
	267, // 25: jungletv.EnqueueMediaTicket.offset:type_name -> google.protobuf.Duration
	31,  // 26: jungletv.EnqueueMediaTicket.extra_currency_payment_data:type_name -> jungletv.ExtraCurrencyPaymentData
	49,  // 27: jungletv.EnqueueMediaTicket.youtube_video_data:type_name -> jungletv.QueueYouTubeVideoData
	50,  // 28: jungletv.EnqueueMediaTicket.soundcloud_track_data:type_name -> jungletv.QueueSoundCloudTrackData
	51,  // 29: jungletv.EnqueueMediaTicket.document_data:type_name -> jungletv.QueueDocumentData
	1,   // 30: jungletv.MoveQueueEntryRequest.direction:type_name -> jungletv.QueueEntryMovementDirection
	266, // 31: jungletv.NowPlayingDocumentData.updated_at:type_name -> google.protobuf.Timestamp
	123, // 32: jungletv.NowPlayingDocumentData.document:type_name -> jungletv.Document
	268, // 33: jungletv.NowPlayingApplicationPageData.page_info:type_name -> jungletv.ResolveApplicationPageResponse
	267, // 34: jungletv.MediaConsumptionCheckpoint.current_position:type_name -> google.protobuf.Duration
	269, // 35: jungletv.MediaConsumptionCheckpoint.requested_by:type_name -> jungletv.User
	44,  // 36: jungletv.MediaConsumptionCheckpoint.activity_challenge:type_name -> jungletv.ActivityChallenge
	38,  // 37: jungletv.MediaConsumptionCheckpoint.stub_data:type_name -> jungletv.NowPlayingStubData
	39,  // 38: jungletv.MediaConsumptionCheckpoint.youtube_video_data:type_name -> jungletv.NowPlayingYouTubeVideoData
	40,  // 39: jungletv.MediaConsumptionCheckpoint.soundcloud_track_data:type_name -> jungletv.NowPlayingSoundCloudTrackData
	41,  // 40: jungletv.MediaConsumptionCheckpoint.document_data:type_name -> jungletv.NowPlayingDocumentData
	42,  // 41: jungletv.MediaConsumptionCheckpoint.application_page_data:type_name -> jungletv.NowPlayingApplicationPageData
	45,  // 42: jungletv.MediaConsumptionCheckpoint.configuration_changes:type_name -> jungletv.ConfigurationChange
	266, // 43: jungletv.ActivityChallenge.challenged_at:type_name -> google.protobuf.Timestamp
	46,  // 44: jungletv.ConfigurationChange.open_sidebar_tab:type_name -> jungletv.ConfigurationChangeSidebarTabOpen
	54,  // 45: jungletv.Queue.entries:type_name -> jungletv.QueueEntry
	266, // 46: jungletv.Queue.playing_since:type_name -> google.protobuf.Timestamp
	266, // 47: jungletv.QueueApplicationPageData.application_version:type_name -> google.protobuf.Timestamp
	269, // 48: jungletv.QueueEntry.requested_by:type_name -> jungletv.User
	266, // 49: jungletv.QueueEntry.requested_at:type_name -> google.protobuf.Timestamp
	267, // 50: jungletv.QueueEntry.length:type_name -> google.protobuf.Duration
	267, // 51: jungletv.QueueEntry.offset:type_name -> google.protobuf.Duration
	49,  // 52: jungletv.QueueEntry.youtube_video_data:type_name -> jungletv.QueueYouTubeVideoData
	50,  // 53: jungletv.QueueEntry.soundcloud_track_data:type_name -> jungletv.QueueSoundCloudTrackData
	51,  // 54: jungletv.QueueEntry.document_data:type_name -> jungletv.QueueDocumentData
	52,  // 55: jungletv.QueueEntry.application_page_data:type_name -> jungletv.QueueApplicationPageData
	53,  // 56: jungletv.QueueEntry.concealed_data:type_name -> jungletv.QueueConcealedData
	2,   // 57: jungletv.SkipAndTipStatus.skip_status:type_name -> jungletv.SkipStatus
	3,   // 58: jungletv.ForciblyEnqueueTicketRequest.enqueue_type:type_name -> jungletv.ForcedTicketEnqueueType
	67,  // 59: jungletv.ChatUpdate.events:type_name -> jungletv.ChatUpdateEvent
	74,  // 60: jungletv.ChatUpdateEvent.disabled:type_name -> jungletv.ChatDisabledEvent
	75,  // 61: jungletv.ChatUpdateEvent.enabled:type_name -> jungletv.ChatEnabledEvent
	76,  // 62: jungletv.ChatUpdateEvent.message_created:type_name -> jungletv.ChatMessageCreatedEvent
	77,  // 63: jungletv.ChatUpdateEvent.message_deleted:type_name -> jungletv.ChatMessageDeletedEvent
	78,  // 64: jungletv.ChatUpdateEvent.heartbeat:type_name -> jungletv.ChatHeartbeatEvent
	79,  // 65: jungletv.ChatUpdateEvent.blocked_user_created:type_name -> jungletv.ChatBlockedUserCreatedEvent
	80,  // 66: jungletv.ChatUpdateEvent.blocked_user_deleted:type_name -> jungletv.ChatBlockedUserDeletedEvent
	81,  // 67: jungletv.ChatUpdateEvent.emote_created:type_name -> jungletv.ChatEmoteCreatedEvent
	266, // 68: jungletv.ChatMessage.created_at:type_name -> google.protobuf.Timestamp
	72,  // 69: jungletv.ChatMessage.user_message:type_name -> jungletv.UserChatMessage
	73,  // 70: jungletv.ChatMessage.system_message:type_name -> jungletv.SystemChatMessage
	68,  // 71: jungletv.ChatMessage.reference:type_name -> jungletv.ChatMessage
	69,  // 72: jungletv.ChatMessage.attachments:type_name -> jungletv.ChatMessageAttachment
	70,  // 73: jungletv.ChatMessageAttachment.tenor_gif:type_name -> jungletv.ChatMessageTenorGifAttachment
	71,  // 74: jungletv.ChatMessageAttachment.application_page:type_name -> jungletv.ChatMessageApplicationPageAttachment
	268, // 75: jungletv.ChatMessageApplicationPageAttachment.page_info:type_name -> jungletv.ResolveApplicationPageResponse
	269, // 76: jungletv.UserChatMessage.author:type_name -> jungletv.User
	4,   // 77: jungletv.ChatDisabledEvent.reason:type_name -> jungletv.ChatDisabledReason
	68,  // 78: jungletv.ChatMessageCreatedEvent.message:type_name -> jungletv.ChatMessage
	267, // 79: jungletv.BanUserRequest.duration:type_name -> google.protobuf.Duration
	266, // 80: jungletv.UserBan.banned_at:type_name -> google.protobuf.Timestamp
	266, // 81: jungletv.UserBan.banned_until:type_name -> google.protobuf.Timestamp
	269, // 82: jungletv.UserBan.user:type_name -> jungletv.User
	269, // 83: jungletv.UserBan.banned_by:type_name -> jungletv.User
	270, // 84: jungletv.UserBansRequest.pagination_params:type_name -> jungletv.PaginationParameters
	92,  // 85: jungletv.UserBansResponse.user_bans:type_name -> jungletv.UserBan
	266, // 86: jungletv.UserVerification.created_at:type_name -> google.protobuf.Timestamp
	269, // 87: jungletv.UserVerification.user:type_name -> jungletv.User
	269, // 88: jungletv.UserVerification.verified_by:type_name -> jungletv.User
	270, // 89: jungletv.UserVerificationsRequest.pagination_params:type_name -> jungletv.PaginationParameters
	99,  // 90: jungletv.UserVerificationsResponse.user_verifications:type_name -> jungletv.UserVerification
	5,   // 91: jungletv.SetMediaEnqueuingEnabledRequest.allowed:type_name -> jungletv.AllowedMediaEnqueuingType
	68,  // 92: jungletv.UserChatMessagesResponse.messages:type_name -> jungletv.ChatMessage
	6,   // 93: jungletv.UserPermissionLevelResponse.permission_level:type_name -> jungletv.PermissionLevel
	270, // 94: jungletv.DisallowedMediaRequest.pagination_params:type_name -> jungletv.PaginationParameters
	269, // 95: jungletv.DisallowedMedia.disallowed_by:type_name -> jungletv.User
	266, // 96: jungletv.DisallowedMedia.disallowed_at:type_name -> google.protobuf.Timestamp
	7,   // 97: jungletv.DisallowedMedia.media_type:type_name -> jungletv.DisallowedMediaType
	109, // 98: jungletv.DisallowedMediaResponse.disallowed_media:type_name -> jungletv.DisallowedMedia
	27,  // 99: jungletv.AddDisallowedMediaRequest.disallowed_media_request:type_name -> jungletv.EnqueueMediaRequest
	270, // 100: jungletv.DisallowedMediaCollectionsRequest.pagination_params:type_name -> jungletv.PaginationParameters
	269, // 101: jungletv.DisallowedMediaCollection.disallowed_by:type_name -> jungletv.User
	266, // 102: jungletv.DisallowedMediaCollection.disallowed_at:type_name -> google.protobuf.Timestamp
	8,   // 103: jungletv.DisallowedMediaCollection.collection_type:type_name -> jungletv.DisallowedMediaCollectionType
	116, // 104: jungletv.DisallowedMediaCollectionsResponse.disallowed_media_collections:type_name -> jungletv.DisallowedMediaCollection
	27,  // 105: jungletv.AddDisallowedMediaCollectionRequest.disallowed_media_request:type_name -> jungletv.EnqueueMediaRequest
	266, // 106: jungletv.Document.updated_at:type_name -> google.protobuf.Timestamp
	270, // 107: jungletv.DocumentsRequest.pagination_params:type_name -> jungletv.PaginationParameters
	266, // 108: jungletv.DocumentHeader.updated_at:type_name -> google.protobuf.Timestamp
	269, // 109: jungletv.DocumentHeader.updated_by:type_name -> jungletv.User
	126, // 110: jungletv.DocumentsResponse.documents:type_name -> jungletv.DocumentHeader
	9,   // 111: jungletv.LeaderboardsRequest.period:type_name -> jungletv.LeaderboardPeriod
	140, // 112: jungletv.LeaderboardsResponse.leaderboards:type_name -> jungletv.Leaderboard
	141, // 113: jungletv.Leaderboard.rows:type_name -> jungletv.LeaderboardRow
	269, // 114: jungletv.LeaderboardRow.user:type_name -> jungletv.User
	142, // 115: jungletv.LeaderboardRow.values:type_name -> jungletv.LeaderboardValue
	270, // 116: jungletv.RewardHistoryRequest.pagination_params:type_name -> jungletv.PaginationParameters
	266, // 117: jungletv.ReceivedReward.received_at:type_name -> google.protobuf.Timestamp
	49,  // 118: jungletv.ReceivedReward.youtube_video_data:type_name -> jungletv.QueueYouTubeVideoData
	50,  // 119: jungletv.ReceivedReward.soundcloud_track_data:type_name -> jungletv.QueueSoundCloudTrackData
	51,  // 120: jungletv.ReceivedReward.document_data:type_name -> jungletv.QueueDocumentData
	52,  // 121: jungletv.ReceivedReward.application_page_data:type_name -> jungletv.QueueApplicationPageData
	144, // 122: jungletv.RewardHistoryResponse.received_rewards:type_name -> jungletv.ReceivedReward
	270, // 123: jungletv.WithdrawalHistoryRequest.pagination_params:type_name -> jungletv.PaginationParameters
	266, // 124: jungletv.Withdrawal.started_at:type_name -> google.protobuf.Timestamp
	266, // 125: jungletv.Withdrawal.completed_at:type_name -> google.protobuf.Timestamp
	147, // 126: jungletv.WithdrawalHistoryResponse.withdrawals:type_name -> jungletv.Withdrawal
	155, // 127: jungletv.ProduceSegchaChallengeResponse.steps:type_name -> jungletv.SegchaChallengeStep
	164, // 128: jungletv.OngoingRaffleInfoResponse.raffle_info:type_name -> jungletv.OngoingRaffleInfo
	266, // 129: jungletv.OngoingRaffleInfo.period_start:type_name -> google.protobuf.Timestamp
	266, // 130: jungletv.OngoingRaffleInfo.period_end:type_name -> google.protobuf.Timestamp
	266, // 131: jungletv.RaffleDrawing.period_start:type_name -> google.protobuf.Timestamp
	266, // 132: jungletv.RaffleDrawing.period_end:type_name -> google.protobuf.Timestamp
	10,  // 133: jungletv.RaffleDrawing.status:type_name -> jungletv.RaffleDrawingStatus
	269, // 134: jungletv.RaffleDrawing.winner:type_name -> jungletv.User
	270, // 135: jungletv.RaffleDrawingsRequest.pagination_params:type_name -> jungletv.PaginationParameters
	165, // 136: jungletv.RaffleDrawingsResponse.raffle_drawings:type_name -> jungletv.RaffleDrawing
	266, // 137: jungletv.Spectator.watching_since:type_name -> google.protobuf.Timestamp
	266, // 138: jungletv.Spectator.not_legitimate_since:type_name -> google.protobuf.Timestamp
	266, // 139: jungletv.Spectator.stopped_watching_at:type_name -> google.protobuf.Timestamp
	44,  // 140: jungletv.Spectator.activity_challenge:type_name -> jungletv.ActivityChallenge
	5,   // 141: jungletv.ModerationStatusOverview.allowed_media_enqueuing:type_name -> jungletv.AllowedMediaEnqueuingType
	269, // 142: jungletv.ModerationStatusOverview.actively_moderating:type_name -> jungletv.User
	269, // 143: jungletv.ModerationStatusOverview.vip_users:type_name -> jungletv.User
	11,  // 144: jungletv.Connection.service:type_name -> jungletv.ConnectionService
	266, // 145: jungletv.Connection.created_at:type_name -> google.protobuf.Timestamp
	11,  // 146: jungletv.ServiceInfo.service:type_name -> jungletv.ConnectionService
	185, // 147: jungletv.ConnectionsResponse.connections:type_name -> jungletv.Connection
	186, // 148: jungletv.ConnectionsResponse.service_infos:type_name -> jungletv.ServiceInfo
	11,  // 149: jungletv.CreateConnectionRequest.service:type_name -> jungletv.ConnectionService
	269, // 150: jungletv.UserProfileResponse.user:type_name -> jungletv.User
	201, // 151: jungletv.UserProfileResponse.recently_played_requests:type_name -> jungletv.PlayedMedia
	223, // 152: jungletv.UserProfileResponse.current_subscription:type_name -> jungletv.SubscriptionDetails
	49,  // 153: jungletv.UserProfileResponse.youtube_video_data:type_name -> jungletv.QueueYouTubeVideoData
	50,  // 154: jungletv.UserProfileResponse.soundcloud_track_data:type_name -> jungletv.QueueSoundCloudTrackData
	51,  // 155: jungletv.UserProfileResponse.document_data:type_name -> jungletv.QueueDocumentData
	267, // 156: jungletv.UserStatsForPeriod.requested_media_play_time:type_name -> google.protobuf.Duration
	199, // 157: jungletv.UserStatsResponse.stats_all_time:type_name -> jungletv.UserStatsForPeriod
	199, // 158: jungletv.UserStatsResponse.stats_30_days:type_name -> jungletv.UserStatsForPeriod
	199, // 159: jungletv.UserStatsResponse.stats_7_days:type_name -> jungletv.UserStatsForPeriod
	269, // 160: jungletv.PlayedMedia.requested_by:type_name -> jungletv.User
	266, // 161: jungletv.PlayedMedia.enqueued_at:type_name -> google.protobuf.Timestamp
	266, // 162: jungletv.PlayedMedia.started_at:type_name -> google.protobuf.Timestamp
	266, // 163: jungletv.PlayedMedia.ended_at:type_name -> google.protobuf.Timestamp
	267, // 164: jungletv.PlayedMedia.length:type_name -> google.protobuf.Duration
	267, // 165: jungletv.PlayedMedia.offset:type_name -> google.protobuf.Duration
	49,  // 166: jungletv.PlayedMedia.youtube_video_data:type_name -> jungletv.QueueYouTubeVideoData
	50,  // 167: jungletv.PlayedMedia.soundcloud_track_data:type_name -> jungletv.QueueSoundCloudTrackData
	51,  // 168: jungletv.PlayedMedia.document_data:type_name -> jungletv.QueueDocumentData
	52,  // 169: jungletv.PlayedMedia.application_page_data:type_name -> jungletv.QueueApplicationPageData
	270, // 170: jungletv.PlayedMediaHistoryRequest.pagination_params:type_name -> jungletv.PaginationParameters
	201, // 171: jungletv.PlayedMediaHistoryResponse.played_media:type_name -> jungletv.PlayedMedia
	270, // 172: jungletv.BlockedUsersRequest.pagination_params:type_name -> jungletv.PaginationParameters
	269, // 173: jungletv.BlockedUser.blocked_user:type_name -> jungletv.User
	269, // 174: jungletv.BlockedUser.blocked_by:type_name -> jungletv.User
	266, // 175: jungletv.BlockedUser.created_at:type_name -> google.protobuf.Timestamp
	215, // 176: jungletv.BlockedUsersResponse.blocked_users:type_name -> jungletv.BlockedUser
	223, // 177: jungletv.PointsInfoResponse.current_subscription:type_name -> jungletv.SubscriptionDetails
	266, // 178: jungletv.SubscriptionDetails.subscribed_at:type_name -> google.protobuf.Timestamp
	266, // 179: jungletv.SubscriptionDetails.subscribed_until:type_name -> google.protobuf.Timestamp
	270, // 180: jungletv.PointsTransactionsRequest.pagination_params:type_name -> jungletv.PaginationParameters
	226, // 181: jungletv.PointsTransactionsResponse.transactions:type_name -> jungletv.PointsTransaction
	266, // 182: jungletv.PointsTransaction.created_at:type_name -> google.protobuf.Timestamp
	266, // 183: jungletv.PointsTransaction.updated_at:type_name -> google.protobuf.Timestamp
	12,  // 184: jungletv.PointsTransaction.type:type_name -> jungletv.PointsTransactionType
	265, // 185: jungletv.PointsTransaction.extra:type_name -> jungletv.PointsTransaction.ExtraEntry
	229, // 186: jungletv.ChatGifSearchResponse.results:type_name -> jungletv.ChatGifSearchResult
	266, // 187: jungletv.ConvertBananoToPointsStatus.expiration:type_name -> google.protobuf.Timestamp
	223, // 188: jungletv.StartOrExtendSubscriptionResponse.subscription:type_name -> jungletv.SubscriptionDetails
	267, // 189: jungletv.SoundCloudTrackDetailsResponse.length:type_name -> google.protobuf.Duration
	13,  // 190: jungletv.AddVipUserRequest.appearance:type_name -> jungletv.VipUserAppearance
	5,   // 191: jungletv.MediaEnqueuingPermissionStatus.allowed_media_enqueuing:type_name -> jungletv.AllowedMediaEnqueuingType
	6,   // 192: jungletv.AuthorizeApplicationRequest.desired_permission_level:type_name -> jungletv.PermissionLevel
	258, // 193: jungletv.AuthorizeApplicationEvent.heartbeat:type_name -> jungletv.AuthorizeApplicationHeartbeatEvent
	259, // 194: jungletv.AuthorizeApplicationEvent.authorization_url:type_name -> jungletv.AuthorizeApplicationAuthorizationURLEvent
	260, // 195: jungletv.AuthorizeApplicationEvent.approved:type_name -> jungletv.AuthorizeApplicationApprovedEvent
	266, // 196: jungletv.AuthorizeApplicationApprovedEvent.token_expiration:type_name -> google.protobuf.Timestamp
	6,   // 197: jungletv.AuthorizationProcessDataResponse.desired_permission_level:type_name -> jungletv.PermissionLevel
	14,  // 198: jungletv.JungleTV.SignIn:input_type -> jungletv.SignInRequest
	22,  // 199: jungletv.JungleTV.VerifySignInSignature:input_type -> jungletv.VerifySignInSignatureRequest
	27,  // 200: jungletv.JungleTV.EnqueueMedia:input_type -> jungletv.EnqueueMediaRequest
	33,  // 201: jungletv.JungleTV.RemoveOwnQueueEntry:input_type -> jungletv.RemoveOwnQueueEntryRequest
	35,  // 202: jungletv.JungleTV.MoveQueueEntry:input_type -> jungletv.MoveQueueEntryRequest
	32,  // 203: jungletv.JungleTV.MonitorTicket:input_type -> jungletv.MonitorTicketRequest
	37,  // 204: jungletv.JungleTV.ConsumeMedia:input_type -> jungletv.ConsumeMediaRequest
	47,  // 205: jungletv.JungleTV.MonitorQueue:input_type -> jungletv.MonitorQueueRequest
	55,  // 206: jungletv.JungleTV.MonitorSkipAndTip:input_type -> jungletv.MonitorSkipAndTipRequest
	57,  // 207: jungletv.JungleTV.RewardInfo:input_type -> jungletv.RewardInfoRequest
	63,  // 208: jungletv.JungleTV.SubmitActivityChallenge:input_type -> jungletv.SubmitActivityChallengeRequest
	153, // 209: jungletv.JungleTV.ProduceSegchaChallenge:input_type -> jungletv.ProduceSegchaChallengeRequest
	65,  // 210: jungletv.JungleTV.ConsumeChat:input_type -> jungletv.ConsumeChatRequest
	82,  // 211: jungletv.JungleTV.SendChatMessage:input_type -> jungletv.SendChatMessageRequest
	106, // 212: jungletv.JungleTV.UserPermissionLevel:input_type -> jungletv.UserPermissionLevelRequest
	122, // 213: jungletv.JungleTV.GetDocument:input_type -> jungletv.GetDocumentRequest
	128, // 214: jungletv.JungleTV.SetChatNickname:input_type -> jungletv.SetChatNicknameRequest
	136, // 215: jungletv.JungleTV.Withdraw:input_type -> jungletv.WithdrawRequest
	138, // 216: jungletv.JungleTV.Leaderboards:input_type -> jungletv.LeaderboardsRequest
	143, // 217: jungletv.JungleTV.RewardHistory:input_type -> jungletv.RewardHistoryRequest
	146, // 218: jungletv.JungleTV.WithdrawalHistory:input_type -> jungletv.WithdrawalHistoryRequest
	162, // 219: jungletv.JungleTV.OngoingRaffleInfo:input_type -> jungletv.OngoingRaffleInfoRequest
	166, // 220: jungletv.JungleTV.RaffleDrawings:input_type -> jungletv.RaffleDrawingsRequest
	184, // 221: jungletv.JungleTV.Connections:input_type -> jungletv.ConnectionsRequest
	188, // 222: jungletv.JungleTV.CreateConnection:input_type -> jungletv.CreateConnectionRequest
	190, // 223: jungletv.JungleTV.RemoveConnection:input_type -> jungletv.RemoveConnectionRequest
	196, // 224: jungletv.JungleTV.UserProfile:input_type -> jungletv.UserProfileRequest
	198, // 225: jungletv.JungleTV.UserStats:input_type -> jungletv.UserStatsRequest
	202, // 226: jungletv.JungleTV.SetProfileBiography:input_type -> jungletv.SetProfileBiographyRequest
	204, // 227: jungletv.JungleTV.SetProfileFeaturedMedia:input_type -> jungletv.SetProfileFeaturedMediaRequest
	208, // 228: jungletv.JungleTV.PlayedMediaHistory:input_type -> jungletv.PlayedMediaHistoryRequest
	210, // 229: jungletv.JungleTV.BlockUser:input_type -> jungletv.BlockUserRequest
	212, // 230: jungletv.JungleTV.UnblockUser:input_type -> jungletv.UnblockUserRequest
	214, // 231: jungletv.JungleTV.BlockedUsers:input_type -> jungletv.BlockedUsersRequest
	221, // 232: jungletv.JungleTV.PointsInfo:input_type -> jungletv.PointsInfoRequest
	224, // 233: jungletv.JungleTV.PointsTransactions:input_type -> jungletv.PointsTransactionsRequest
	227, // 234: jungletv.JungleTV.ChatGifSearch:input_type -> jungletv.ChatGifSearchRequest
	232, // 235: jungletv.JungleTV.ConvertBananoToPoints:input_type -> jungletv.ConvertBananoToPointsRequest
	234, // 236: jungletv.JungleTV.StartOrExtendSubscription:input_type -> jungletv.StartOrExtendSubscriptionRequest
	236, // 237: jungletv.JungleTV.SoundCloudTrackDetails:input_type -> jungletv.SoundCloudTrackDetailsRequest
	244, // 238: jungletv.JungleTV.IncreaseOrReduceSkipThreshold:input_type -> jungletv.IncreaseOrReduceSkipThresholdRequest
	248, // 239: jungletv.JungleTV.CheckMediaEnqueuingPassword:input_type -> jungletv.CheckMediaEnqueuingPasswordRequest
	250, // 240: jungletv.JungleTV.MonitorMediaEnqueuingPermission:input_type -> jungletv.MonitorMediaEnqueuingPermissionRequest
	252, // 241: jungletv.JungleTV.InvalidateAuthTokens:input_type -> jungletv.InvalidateAuthTokensRequest
	256, // 242: jungletv.JungleTV.AuthorizeApplication:input_type -> jungletv.AuthorizeApplicationRequest
	261, // 243: jungletv.JungleTV.AuthorizationProcessData:input_type -> jungletv.AuthorizationProcessDataRequest
	263, // 244: jungletv.JungleTV.ConsentOrDissentToAuthorization:input_type -> jungletv.ConsentOrDissentToAuthorizationRequest
	61,  // 245: jungletv.JungleTV.ForciblyEnqueueTicket:input_type -> jungletv.ForciblyEnqueueTicketRequest
	59,  // 246: jungletv.JungleTV.RemoveQueueEntry:input_type -> jungletv.RemoveQueueEntryRequest
	84,  // 247: jungletv.JungleTV.RemoveChatMessage:input_type -> jungletv.RemoveChatMessageRequest
	86,  // 248: jungletv.JungleTV.SetChatSettings:input_type -> jungletv.SetChatSettingsRequest
	102, // 249: jungletv.JungleTV.SetMediaEnqueuingEnabled:input_type -> jungletv.SetMediaEnqueuingEnabledRequest
	93,  // 250: jungletv.JungleTV.UserBans:input_type -> jungletv.UserBansRequest
	88,  // 251: jungletv.JungleTV.BanUser:input_type -> jungletv.BanUserRequest
	90,  // 252: jungletv.JungleTV.RemoveBan:input_type -> jungletv.RemoveBanRequest
	100, // 253: jungletv.JungleTV.UserVerifications:input_type -> jungletv.UserVerificationsRequest
	95,  // 254: jungletv.JungleTV.VerifyUser:input_type -> jungletv.VerifyUserRequest
	97,  // 255: jungletv.JungleTV.RemoveUserVerification:input_type -> jungletv.RemoveUserVerificationRequest
	104, // 256: jungletv.JungleTV.UserChatMessages:input_type -> jungletv.UserChatMessagesRequest
	108, // 257: jungletv.JungleTV.DisallowedMedia:input_type -> jungletv.DisallowedMediaRequest
	111, // 258: jungletv.JungleTV.AddDisallowedMedia:input_type -> jungletv.AddDisallowedMediaRequest
	113, // 259: jungletv.JungleTV.RemoveDisallowedMedia:input_type -> jungletv.RemoveDisallowedMediaRequest
	115, // 260: jungletv.JungleTV.DisallowedMediaCollections:input_type -> jungletv.DisallowedMediaCollectionsRequest
	118, // 261: jungletv.JungleTV.AddDisallowedMediaCollection:input_type -> jungletv.AddDisallowedMediaCollectionRequest
	120, // 262: jungletv.JungleTV.RemoveDisallowedMediaCollection:input_type -> jungletv.RemoveDisallowedMediaCollectionRequest
	123, // 263: jungletv.JungleTV.UpdateDocument:input_type -> jungletv.Document
	125, // 264: jungletv.JungleTV.Documents:input_type -> jungletv.DocumentsRequest
	130, // 265: jungletv.JungleTV.SetUserChatNickname:input_type -> jungletv.SetUserChatNicknameRequest
	132, // 266: jungletv.JungleTV.SetPricesMultiplier:input_type -> jungletv.SetPricesMultiplierRequest
	134, // 267: jungletv.JungleTV.SetMinimumPricesMultiplier:input_type -> jungletv.SetMinimumPricesMultiplierRequest
	149, // 268: jungletv.JungleTV.SetCrowdfundedSkippingEnabled:input_type -> jungletv.SetCrowdfundedSkippingEnabledRequest
	151, // 269: jungletv.JungleTV.SetSkipPriceMultiplier:input_type -> jungletv.SetSkipPriceMultiplierRequest
	156, // 270: jungletv.JungleTV.ConfirmRaffleWinner:input_type -> jungletv.ConfirmRaffleWinnerRequest
	158, // 271: jungletv.JungleTV.CompleteRaffle:input_type -> jungletv.CompleteRaffleRequest
	160, // 272: jungletv.JungleTV.RedrawRaffle:input_type -> jungletv.RedrawRaffleRequest
	168, // 273: jungletv.JungleTV.TriggerAnnouncementsNotification:input_type -> jungletv.TriggerAnnouncementsNotificationRequest
	170, // 274: jungletv.JungleTV.SpectatorInfo:input_type -> jungletv.SpectatorInfoRequest
	172, // 275: jungletv.JungleTV.ResetSpectatorStatus:input_type -> jungletv.ResetSpectatorStatusRequest
	174, // 276: jungletv.JungleTV.MonitorModerationStatus:input_type -> jungletv.MonitorModerationStatusRequest
	178, // 277: jungletv.JungleTV.SetOwnQueueEntryRemovalAllowed:input_type -> jungletv.SetOwnQueueEntryRemovalAllowedRequest
	176, // 278: jungletv.JungleTV.SetQueueEntryReorderingAllowed:input_type -> jungletv.SetQueueEntryReorderingAllowedRequest
	180, // 279: jungletv.JungleTV.SetNewQueueEntriesAlwaysUnskippable:input_type -> jungletv.SetNewQueueEntriesAlwaysUnskippableRequest
	182, // 280: jungletv.JungleTV.SetSkippingEnabled:input_type -> jungletv.SetSkippingEnabledRequest
	192, // 281: jungletv.JungleTV.SetQueueInsertCursor:input_type -> jungletv.SetQueueInsertCursorRequest
	194, // 282: jungletv.JungleTV.ClearQueueInsertCursor:input_type -> jungletv.ClearQueueInsertCursorRequest
	206, // 283: jungletv.JungleTV.ClearUserProfile:input_type -> jungletv.ClearUserProfileRequest
	217, // 284: jungletv.JungleTV.MarkAsActivelyModerating:input_type -> jungletv.MarkAsActivelyModeratingRequest
	219, // 285: jungletv.JungleTV.StopActivelyModerating:input_type -> jungletv.StopActivelyModeratingRequest
	230, // 286: jungletv.JungleTV.AdjustPointsBalance:input_type -> jungletv.AdjustPointsBalanceRequest
	238, // 287: jungletv.JungleTV.AddVipUser:input_type -> jungletv.AddVipUserRequest
	240, // 288: jungletv.JungleTV.RemoveVipUser:input_type -> jungletv.RemoveVipUserRequest
	242, // 289: jungletv.JungleTV.TriggerClientReload:input_type -> jungletv.TriggerClientReloadRequest
	246, // 290: jungletv.JungleTV.SetMulticurrencyPaymentsEnabled:input_type -> jungletv.SetMulticurrencyPaymentsEnabledRequest
	254, // 291: jungletv.JungleTV.InvalidateUserAuthTokens:input_type -> jungletv.InvalidateUserAuthTokensRequest
	271, // 292: jungletv.JungleTV.Applications:input_type -> jungletv.ApplicationsRequest
	272, // 293: jungletv.JungleTV.GetApplication:input_type -> jungletv.GetApplicationRequest
	273, // 294: jungletv.JungleTV.UpdateApplication:input_type -> jungletv.Application
	274, // 295: jungletv.JungleTV.CreateApplicationWithWalletPrefix:input_type -> jungletv.CreateApplicationWithWalletPrefixRequest
	275, // 296: jungletv.JungleTV.CloneApplication:input_type -> jungletv.CloneApplicationRequest
	276, // 297: jungletv.JungleTV.DeleteApplication:input_type -> jungletv.DeleteApplicationRequest
	277, // 298: jungletv.JungleTV.ApplicationFiles:input_type -> jungletv.ApplicationFilesRequest
	278, // 299: jungletv.JungleTV.GetApplicationFile:input_type -> jungletv.GetApplicationFileRequest
	279, // 300: jungletv.JungleTV.UpdateApplicationFile:input_type -> jungletv.ApplicationFile
	280, // 301: jungletv.JungleTV.CloneApplicationFile:input_type -> jungletv.CloneApplicationFileRequest
	281, // 302: jungletv.JungleTV.DeleteApplicationFile:input_type -> jungletv.DeleteApplicationFileRequest
	282, // 303: jungletv.JungleTV.LaunchApplication:input_type -> jungletv.LaunchApplicationRequest
	283, // 304: jungletv.JungleTV.StopApplication:input_type -> jungletv.StopApplicationRequest
	284, // 305: jungletv.JungleTV.ApplicationLog:input_type -> jungletv.ApplicationLogRequest
	285, // 306: jungletv.JungleTV.ConsumeApplicationLog:input_type -> jungletv.ConsumeApplicationLogRequest
	286, // 307: jungletv.JungleTV.MonitorRunningApplications:input_type -> jungletv.MonitorRunningApplicationsRequest
	287, // 308: jungletv.JungleTV.EvaluateExpressionOnApplication:input_type -> jungletv.EvaluateExpressionOnApplicationRequest
	288, // 309: jungletv.JungleTV.ExportApplication:input_type -> jungletv.ExportApplicationRequest
	289, // 310: jungletv.JungleTV.ImportApplication:input_type -> jungletv.ImportApplicationRequest
	290, // 311: jungletv.JungleTV.TypeScriptTypeDefinitions:input_type -> jungletv.TypeScriptTypeDefinitionsRequest
	291, // 312: jungletv.JungleTV.ResolveApplicationPage:input_type -> jungletv.ResolveApplicationPageRequest
	292, // 313: jungletv.JungleTV.ConsumeApplicationEvents:input_type -> jungletv.ConsumeApplicationEventsRequest
	293, // 314: jungletv.JungleTV.ApplicationServerMethod:input_type -> jungletv.ApplicationServerMethodRequest
	294, // 315: jungletv.JungleTV.TriggerApplicationEvent:input_type -> jungletv.TriggerApplicationEventRequest
	16,  // 316: jungletv.JungleTV.SignIn:output_type -> jungletv.SignInProgress
	19,  // 317: jungletv.JungleTV.VerifySignInSignature:output_type -> jungletv.SignInResponse
	28,  // 318: jungletv.JungleTV.EnqueueMedia:output_type -> jungletv.EnqueueMediaResponse
	34,  // 319: jungletv.JungleTV.RemoveOwnQueueEntry:output_type -> jungletv.RemoveOwnQueueEntryResponse
	36,  // 320: jungletv.JungleTV.MoveQueueEntry:output_type -> jungletv.MoveQueueEntryResponse
	30,  // 321: jungletv.JungleTV.MonitorTicket:output_type -> jungletv.EnqueueMediaTicket
	43,  // 322: jungletv.JungleTV.ConsumeMedia:output_type -> jungletv.MediaConsumptionCheckpoint
	48,  // 323: jungletv.JungleTV.MonitorQueue:output_type -> jungletv.Queue
	56,  // 324: jungletv.JungleTV.MonitorSkipAndTip:output_type -> jungletv.SkipAndTipStatus
	58,  // 325: jungletv.JungleTV.RewardInfo:output_type -> jungletv.RewardInfoResponse
	64,  // 326: jungletv.JungleTV.SubmitActivityChallenge:output_type -> jungletv.SubmitActivityChallengeResponse
	154, // 327: jungletv.JungleTV.ProduceSegchaChallenge:output_type -> jungletv.ProduceSegchaChallengeResponse
	66,  // 328: jungletv.JungleTV.ConsumeChat:output_type -> jungletv.ChatUpdate
	83,  // 329: jungletv.JungleTV.SendChatMessage:output_type -> jungletv.SendChatMessageResponse
	107, // 330: jungletv.JungleTV.UserPermissionLevel:output_type -> jungletv.UserPermissionLevelResponse
	123, // 331: jungletv.JungleTV.GetDocument:output_type -> jungletv.Document
	129, // 332: jungletv.JungleTV.SetChatNickname:output_type -> jungletv.SetChatNicknameResponse
	137, // 333: jungletv.JungleTV.Withdraw:output_type -> jungletv.WithdrawResponse
	139, // 334: jungletv.JungleTV.Leaderboards:output_type -> jungletv.LeaderboardsResponse
	145, // 335: jungletv.JungleTV.RewardHistory:output_type -> jungletv.RewardHistoryResponse
	148, // 336: jungletv.JungleTV.WithdrawalHistory:output_type -> jungletv.WithdrawalHistoryResponse
	163, // 337: jungletv.JungleTV.OngoingRaffleInfo:output_type -> jungletv.OngoingRaffleInfoResponse
	167, // 338: jungletv.JungleTV.RaffleDrawings:output_type -> jungletv.RaffleDrawingsResponse
	187, // 339: jungletv.JungleTV.Connections:output_type -> jungletv.ConnectionsResponse
	189, // 340: jungletv.JungleTV.CreateConnection:output_type -> jungletv.CreateConnectionResponse
	191, // 341: jungletv.JungleTV.RemoveConnection:output_type -> jungletv.RemoveConnectionResponse
	197, // 342: jungletv.JungleTV.UserProfile:output_type -> jungletv.UserProfileResponse
	200, // 343: jungletv.JungleTV.UserStats:output_type -> jungletv.UserStatsResponse
	203, // 344: jungletv.JungleTV.SetProfileBiography:output_type -> jungletv.SetProfileBiographyResponse
	205, // 345: jungletv.JungleTV.SetProfileFeaturedMedia:output_type -> jungletv.SetProfileFeaturedMediaResponse
	209, // 346: jungletv.JungleTV.PlayedMediaHistory:output_type -> jungletv.PlayedMediaHistoryResponse
	211, // 347: jungletv.JungleTV.BlockUser:output_type -> jungletv.BlockUserResponse
	213, // 348: jungletv.JungleTV.UnblockUser:output_type -> jungletv.UnblockUserResponse
	216, // 349: jungletv.JungleTV.BlockedUsers:output_type -> jungletv.BlockedUsersResponse
	222, // 350: jungletv.JungleTV.PointsInfo:output_type -> jungletv.PointsInfoResponse
	225, // 351: jungletv.JungleTV.PointsTransactions:output_type -> jungletv.PointsTransactionsResponse
	228, // 352: jungletv.JungleTV.ChatGifSearch:output_type -> jungletv.ChatGifSearchResponse
	233, // 353: jungletv.JungleTV.ConvertBananoToPoints:output_type -> jungletv.ConvertBananoToPointsStatus
	235, // 354: jungletv.JungleTV.StartOrExtendSubscription:output_type -> jungletv.StartOrExtendSubscriptionResponse
	237, // 355: jungletv.JungleTV.SoundCloudTrackDetails:output_type -> jungletv.SoundCloudTrackDetailsResponse
	245, // 356: jungletv.JungleTV.IncreaseOrReduceSkipThreshold:output_type -> jungletv.IncreaseOrReduceSkipThresholdResponse
	249, // 357: jungletv.JungleTV.CheckMediaEnqueuingPassword:output_type -> jungletv.CheckMediaEnqueuingPasswordResponse
	251, // 358: jungletv.JungleTV.MonitorMediaEnqueuingPermission:output_type -> jungletv.MediaEnqueuingPermissionStatus
	253, // 359: jungletv.JungleTV.InvalidateAuthTokens:output_type -> jungletv.InvalidateAuthTokensResponse
	257, // 360: jungletv.JungleTV.AuthorizeApplication:output_type -> jungletv.AuthorizeApplicationEvent
	262, // 361: jungletv.JungleTV.AuthorizationProcessData:output_type -> jungletv.AuthorizationProcessDataResponse
	264, // 362: jungletv.JungleTV.ConsentOrDissentToAuthorization:output_type -> jungletv.ConsentOrDissentToAuthorizationResponse
	62,  // 363: jungletv.JungleTV.ForciblyEnqueueTicket:output_type -> jungletv.ForciblyEnqueueTicketResponse
	60,  // 364: jungletv.JungleTV.RemoveQueueEntry:output_type -> jungletv.RemoveQueueEntryResponse
	85,  // 365: jungletv.JungleTV.RemoveChatMessage:output_type -> jungletv.RemoveChatMessageResponse
	87,  // 366: jungletv.JungleTV.SetChatSettings:output_type -> jungletv.SetChatSettingsResponse
	103, // 367: jungletv.JungleTV.SetMediaEnqueuingEnabled:output_type -> jungletv.SetMediaEnqueuingEnabledResponse
	94,  // 368: jungletv.JungleTV.UserBans:output_type -> jungletv.UserBansResponse
	89,  // 369: jungletv.JungleTV.BanUser:output_type -> jungletv.BanUserResponse
	91,  // 370: jungletv.JungleTV.RemoveBan:output_type -> jungletv.RemoveBanResponse
	101, // 371: jungletv.JungleTV.UserVerifications:output_type -> jungletv.UserVerificationsResponse
	96,  // 372: jungletv.JungleTV.VerifyUser:output_type -> jungletv.VerifyUserResponse
	98,  // 373: jungletv.JungleTV.RemoveUserVerification:output_type -> jungletv.RemoveUserVerificationResponse
	105, // 374: jungletv.JungleTV.UserChatMessages:output_type -> jungletv.UserChatMessagesResponse
	110, // 375: jungletv.JungleTV.DisallowedMedia:output_type -> jungletv.DisallowedMediaResponse
	112, // 376: jungletv.JungleTV.AddDisallowedMedia:output_type -> jungletv.AddDisallowedMediaResponse
	114, // 377: jungletv.JungleTV.RemoveDisallowedMedia:output_type -> jungletv.RemoveDisallowedMediaResponse
	117, // 378: jungletv.JungleTV.DisallowedMediaCollections:output_type -> jungletv.DisallowedMediaCollectionsResponse
	119, // 379: jungletv.JungleTV.AddDisallowedMediaCollection:output_type -> jungletv.AddDisallowedMediaCollectionResponse
	121, // 380: jungletv.JungleTV.RemoveDisallowedMediaCollection:output_type -> jungletv.RemoveDisallowedMediaCollectionResponse
	124, // 381: jungletv.JungleTV.UpdateDocument:output_type -> jungletv.UpdateDocumentResponse
	127, // 382: jungletv.JungleTV.Documents:output_type -> jungletv.DocumentsResponse
	131, // 383: jungletv.JungleTV.SetUserChatNickname:output_type -> jungletv.SetUserChatNicknameResponse
	133, // 384: jungletv.JungleTV.SetPricesMultiplier:output_type -> jungletv.SetPricesMultiplierResponse
	135, // 385: jungletv.JungleTV.SetMinimumPricesMultiplier:output_type -> jungletv.SetMinimumPricesMultiplierResponse
	150, // 386: jungletv.JungleTV.SetCrowdfundedSkippingEnabled:output_type -> jungletv.SetCrowdfundedSkippingEnabledResponse
	152, // 387: jungletv.JungleTV.SetSkipPriceMultiplier:output_type -> jungletv.SetSkipPriceMultiplierResponse
	157, // 388: jungletv.JungleTV.ConfirmRaffleWinner:output_type -> jungletv.ConfirmRaffleWinnerResponse
	159, // 389: jungletv.JungleTV.CompleteRaffle:output_type -> jungletv.CompleteRaffleResponse
	161, // 390: jungletv.JungleTV.RedrawRaffle:output_type -> jungletv.RedrawRaffleResponse
	169, // 391: jungletv.JungleTV.TriggerAnnouncementsNotification:output_type -> jungletv.TriggerAnnouncementsNotificationResponse
	171, // 392: jungletv.JungleTV.SpectatorInfo:output_type -> jungletv.Spectator
	173, // 393: jungletv.JungleTV.ResetSpectatorStatus:output_type -> jungletv.ResetSpectatorStatusResponse
	175, // 394: jungletv.JungleTV.MonitorModerationStatus:output_type -> jungletv.ModerationStatusOverview
	179, // 395: jungletv.JungleTV.SetOwnQueueEntryRemovalAllowed:output_type -> jungletv.SetOwnQueueEntryRemovalAllowedResponse
	177, // 396: jungletv.JungleTV.SetQueueEntryReorderingAllowed:output_type -> jungletv.SetQueueEntryReorderingAllowedResponse
	181, // 397: jungletv.JungleTV.SetNewQueueEntriesAlwaysUnskippable:output_type -> jungletv.SetNewQueueEntriesAlwaysUnskippableResponse
	183, // 398: jungletv.JungleTV.SetSkippingEnabled:output_type -> jungletv.SetSkippingEnabledResponse
	193, // 399: jungletv.JungleTV.SetQueueInsertCursor:output_type -> jungletv.SetQueueInsertCursorResponse
	195, // 400: jungletv.JungleTV.ClearQueueInsertCursor:output_type -> jungletv.ClearQueueInsertCursorResponse
	207, // 401: jungletv.JungleTV.ClearUserProfile:output_type -> jungletv.ClearUserProfileResponse
	218, // 402: jungletv.JungleTV.MarkAsActivelyModerating:output_type -> jungletv.MarkAsActivelyModeratingResponse
	220, // 403: jungletv.JungleTV.StopActivelyModerating:output_type -> jungletv.StopActivelyModeratingResponse
	231, // 404: jungletv.JungleTV.AdjustPointsBalance:output_type -> jungletv.AdjustPointsBalanceResponse
	239, // 405: jungletv.JungleTV.AddVipUser:output_type -> jungletv.AddVipUserResponse
	241, // 406: jungletv.JungleTV.RemoveVipUser:output_type -> jungletv.RemoveVipUserResponse
	243, // 407: jungletv.JungleTV.TriggerClientReload:output_type -> jungletv.TriggerClientReloadResponse
	247, // 408: jungletv.JungleTV.SetMulticurrencyPaymentsEnabled:output_type -> jungletv.SetMulticurrencyPaymentsEnabledResponse
	255, // 409: jungletv.JungleTV.InvalidateUserAuthTokens:output_type -> jungletv.InvalidateUserAuthTokensResponse
	295, // 410: jungletv.JungleTV.Applications:output_type -> jungletv.ApplicationsResponse
	273, // 411: jungletv.JungleTV.GetApplication:output_type -> jungletv.Application
	296, // 412: jungletv.JungleTV.UpdateApplication:output_type -> jungletv.UpdateApplicationResponse
	297, // 413: jungletv.JungleTV.CreateApplicationWithWalletPrefix:output_type -> jungletv.CreateApplicationWithWalletPrefixResponse
	298, // 414: jungletv.JungleTV.CloneApplication:output_type -> jungletv.CloneApplicationResponse
	299, // 415: jungletv.JungleTV.DeleteApplication:output_type -> jungletv.DeleteApplicationResponse
	300, // 416: jungletv.JungleTV.ApplicationFiles:output_type -> jungletv.ApplicationFilesResponse
	279, // 417: jungletv.JungleTV.GetApplicationFile:output_type -> jungletv.ApplicationFile
	301, // 418: jungletv.JungleTV.UpdateApplicationFile:output_type -> jungletv.UpdateApplicationFileResponse
	302, // 419: jungletv.JungleTV.CloneApplicationFile:output_type -> jungletv.CloneApplicationFileResponse
	303, // 420: jungletv.JungleTV.DeleteApplicationFile:output_type -> jungletv.DeleteApplicationFileResponse
	304, // 421: jungletv.JungleTV.LaunchApplication:output_type -> jungletv.LaunchApplicationResponse
	305, // 422: jungletv.JungleTV.StopApplication:output_type -> jungletv.StopApplicationResponse
	306, // 423: jungletv.JungleTV.ApplicationLog:output_type -> jungletv.ApplicationLogResponse
	307, // 424: jungletv.JungleTV.ConsumeApplicationLog:output_type -> jungletv.ApplicationLogEntryContainer
	308, // 425: jungletv.JungleTV.MonitorRunningApplications:output_type -> jungletv.RunningApplications
	309, // 426: jungletv.JungleTV.EvaluateExpressionOnApplication:output_type -> jungletv.EvaluateExpressionOnApplicationResponse
	310, // 427: jungletv.JungleTV.ExportApplication:output_type -> jungletv.ExportApplicationResponse
	311, // 428: jungletv.JungleTV.ImportApplication:output_type -> jungletv.ImportApplicationResponse
	312, // 429: jungletv.JungleTV.TypeScriptTypeDefinitions:output_type -> jungletv.TypeScriptTypeDefinitionsResponse
	268, // 430: jungletv.JungleTV.ResolveApplicationPage:output_type -> jungletv.ResolveApplicationPageResponse
	313, // 431: jungletv.JungleTV.ConsumeApplicationEvents:output_type -> jungletv.ApplicationEventUpdate
	314, // 432: jungletv.JungleTV.ApplicationServerMethod:output_type -> jungletv.ApplicationServerMethodResponse
	315, // 433: jungletv.JungleTV.TriggerApplicationEvent:output_type -> jungletv.TriggerApplicationEventResponse
	316, // [316:434] is the sub-list for method output_type
	198, // [198:316] is the sub-list for method input_type
	198, // [198:198] is the sub-list for extension type_name
	198, // [198:198] is the sub-list for extension extendee
	0,   // [0:198] is the sub-list for field type_name
}

func init() { file_jungletv_proto_init() }
func file_jungletv_proto_init() {
	if File_jungletv_proto != nil {
		return
	}
	file_common_proto_init()
	file_application_editor_proto_init()
	file_application_runtime_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_jungletv_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignInRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabSignInOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignInProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignInVerification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignInAccountUnopened); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignInResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignInVerificationExpired); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignInMessageToSign); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifySignInSignatureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnqueueYouTubeVideoData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnqueueSoundCloudTrackData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnqueueDocumentData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnqueueStubData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnqueueMediaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnqueueMediaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnqueueMediaFailure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnqueueMediaTicket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtraCurrencyPaymentData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorTicketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveOwnQueueEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveOwnQueueEntryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveQueueEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveQueueEntryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsumeMediaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NowPlayingStubData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NowPlayingYouTubeVideoData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NowPlayingSoundCloudTrackData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NowPlayingDocumentData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NowPlayingApplicationPageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaConsumptionCheckpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityChallenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationChangeSidebarTabOpen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorQueueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Queue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueYouTubeVideoData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueSoundCloudTrackData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueDocumentData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueApplicationPageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueConcealedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorSkipAndTipRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkipAndTipStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveQueueEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveQueueEntryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForciblyEnqueueTicketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForciblyEnqueueTicketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitActivityChallengeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitActivityChallengeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsumeChatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatUpdateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatMessageAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatMessageTenorGifAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatMessageApplicationPageAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserChatMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemChatMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatDisabledEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatEnabledEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatMessageCreatedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatMessageDeletedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatHeartbeatEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatBlockedUserCreatedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatBlockedUserDeletedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatEmoteCreatedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendChatMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendChatMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveChatMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveChatMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetChatSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetChatSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BanUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BanUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveBanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveBanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserBan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserBansRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserBansResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveUserVerificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveUserVerificationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserVerification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserVerificationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserVerificationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMediaEnqueuingEnabledRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMediaEnqueuingEnabledResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserChatMessagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserChatMessagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPermissionLevelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPermissionLevelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisallowedMediaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisallowedMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisallowedMediaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDisallowedMediaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDisallowedMediaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveDisallowedMediaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveDisallowedMediaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisallowedMediaCollectionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisallowedMediaCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisallowedMediaCollectionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDisallowedMediaCollectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDisallowedMediaCollectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveDisallowedMediaCollectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveDisallowedMediaCollectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDocumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Document); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDocumentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetChatNicknameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetChatNicknameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUserChatNicknameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUserChatNicknameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPricesMultiplierRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPricesMultiplierResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMinimumPricesMultiplierRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMinimumPricesMultiplierResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaderboardsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaderboardsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Leaderboard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaderboardRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaderboardValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceivedReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawalHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Withdrawal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawalHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCrowdfundedSkippingEnabledRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCrowdfundedSkippingEnabledResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSkipPriceMultiplierRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSkipPriceMultiplierResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceSegchaChallengeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceSegchaChallengeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegchaChallengeStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmRaffleWinnerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmRaffleWinnerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteRaffleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteRaffleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedrawRaffleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedrawRaffleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OngoingRaffleInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OngoingRaffleInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OngoingRaffleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaffleDrawing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaffleDrawingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaffleDrawingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerAnnouncementsNotificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerAnnouncementsNotificationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpectatorInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Spectator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetSpectatorStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetSpectatorStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorModerationStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModerationStatusOverview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetQueueEntryReorderingAllowedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetQueueEntryReorderingAllowedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetOwnQueueEntryRemovalAllowedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetOwnQueueEntryRemovalAllowedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNewQueueEntriesAlwaysUnskippableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNewQueueEntriesAlwaysUnskippableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSkippingEnabledRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSkippingEnabledResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Connection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateConnectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveConnectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetQueueInsertCursorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetQueueInsertCursorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearQueueInsertCursorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearQueueInsertCursorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStatsForPeriod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayedMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetProfileBiographyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetProfileBiographyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetProfileFeaturedMediaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetProfileFeaturedMediaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearUserProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearUserProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayedMediaHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayedMediaHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnblockUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnblockUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockedUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockedUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockedUsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkAsActivelyModeratingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkAsActivelyModeratingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopActivelyModeratingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopActivelyModeratingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PointsInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PointsInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PointsTransactionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PointsTransactionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PointsTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatGifSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatGifSearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatGifSearchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdjustPointsBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdjustPointsBalanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvertBananoToPointsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvertBananoToPointsStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartOrExtendSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartOrExtendSubscriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SoundCloudTrackDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SoundCloudTrackDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddVipUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddVipUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveVipUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveVipUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerClientReloadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerClientReloadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncreaseOrReduceSkipThresholdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncreaseOrReduceSkipThresholdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMulticurrencyPaymentsEnabledRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMulticurrencyPaymentsEnabledResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckMediaEnqueuingPasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckMediaEnqueuingPasswordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorMediaEnqueuingPermissionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaEnqueuingPermissionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvalidateAuthTokensRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvalidateAuthTokensResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvalidateUserAuthTokensRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvalidateUserAuthTokensResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizeApplicationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizeApplicationEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizeApplicationHeartbeatEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizeApplicationAuthorizationURLEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizeApplicationApprovedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizationProcessDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizationProcessDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsentOrDissentToAuthorizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jungletv_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsentOrDissentToAuthorizationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_jungletv_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_jungletv_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_jungletv_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*SignInProgress_Verification)(nil),
		(*SignInProgress_Response)(nil),
		(*SignInProgress_Expired)(nil),
		(*SignInProgress_AccountUnopened)(nil),
		(*SignInProgress_MessageToSign)(nil),
	}
	file_jungletv_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_jungletv_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_jungletv_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_jungletv_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*EnqueueMediaRequest_StubData)(nil),
		(*EnqueueMediaRequest_YoutubeVideoData)(nil),
		(*EnqueueMediaRequest_SoundcloudTrackData)(nil),
		(*EnqueueMediaRequest_DocumentData)(nil),
	}
	file_jungletv_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*EnqueueMediaResponse_Ticket)(nil),
		(*EnqueueMediaResponse_Failure)(nil),
	}
	file_jungletv_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*EnqueueMediaTicket_YoutubeVideoData)(nil),
		(*EnqueueMediaTicket_SoundcloudTrackData)(nil),
		(*EnqueueMediaTicket_DocumentData)(nil),
	}
	file_jungletv_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_jungletv_proto_msgTypes[29].OneofWrappers = []interface{}{
		(*MediaConsumptionCheckpoint_StubData)(nil),
		(*MediaConsumptionCheckpoint_YoutubeVideoData)(nil),
		(*MediaConsumptionCheckpoint_SoundcloudTrackData)(nil),
		(*MediaConsumptionCheckpoint_DocumentData)(nil),
		(*MediaConsumptionCheckpoint_ApplicationPageData)(nil),
	}
	file_jungletv_proto_msgTypes[31].OneofWrappers = []interface{}{
		(*ConfigurationChange_ApplicationName)(nil),
		(*ConfigurationChange_LogoUrl)(nil),
		(*ConfigurationChange_FaviconUrl)(nil),
		(*ConfigurationChange_OpenSidebarTab)(nil),
		(*ConfigurationChange_CloseSidebarTab)(nil),
	}
	file_jungletv_proto_msgTypes[34].OneofWrappers = []interface{}{}
	file_jungletv_proto_msgTypes[40].OneofWrappers = []interface{}{
		(*QueueEntry_YoutubeVideoData)(nil),
		(*QueueEntry_SoundcloudTrackData)(nil),
		(*QueueEntry_DocumentData)(nil),
		(*QueueEntry_ApplicationPageData)(nil),
		(*QueueEntry_ConcealedData)(nil),
	}
	file_jungletv_proto_msgTypes[44].OneofWrappers = []interface{}{}
	file_jungletv_proto_msgTypes[53].OneofWrappers = []interface{}{
		(*ChatUpdateEvent_Disabled)(nil),
		(*ChatUpdateEvent_Enabled)(nil),
		(*ChatUpdateEvent_MessageCreated)(nil),
		(*ChatUpdateEvent_MessageDeleted)(nil),
		(*ChatUpdateEvent_Heartbeat)(nil),
		(*ChatUpdateEvent_BlockedUserCreated)(nil),
		(*ChatUpdateEvent_BlockedUserDeleted)(nil),
		(*ChatUpdateEvent_EmoteCreated)(nil),
	}
	file_jungletv_proto_msgTypes[54].OneofWrappers = []interface{}{
		(*ChatMessage_UserMessage)(nil),
		(*ChatMessage_SystemMessage)(nil),
	}
	file_jungletv_proto_msgTypes[55].OneofWrappers = []interface{}{
		(*ChatMessageAttachment_TenorGif)(nil),
		(*ChatMessageAttachment_ApplicationPage)(nil),
	}
	file_jungletv_proto_msgTypes[68].OneofWrappers = []interface{}{}
	file_jungletv_proto_msgTypes[74].OneofWrappers = []interface{}{}
	file_jungletv_proto_msgTypes[78].OneofWrappers = []interface{}{}
	file_jungletv_proto_msgTypes[88].OneofWrappers = []interface{}{}
	file_jungletv_proto_msgTypes[128].OneofWrappers = []interface{}{
		(*LeaderboardValue_Amount)(nil),
	}
	file_jungletv_proto_msgTypes[130].OneofWrappers = []interface{}{
		(*ReceivedReward_YoutubeVideoData)(nil),
		(*ReceivedReward_SoundcloudTrackData)(nil),
		(*ReceivedReward_DocumentData)(nil),
		(*ReceivedReward_ApplicationPageData)(nil),
	}
	file_jungletv_proto_msgTypes[149].OneofWrappers = []interface{}{}
	file_jungletv_proto_msgTypes[150].OneofWrappers = []interface{}{}
	file_jungletv_proto_msgTypes[151].OneofWrappers = []interface{}{}
	file_jungletv_proto_msgTypes[157].OneofWrappers = []interface{}{}
	file_jungletv_proto_msgTypes[161].OneofWrappers = []interface{}{}
	file_jungletv_proto_msgTypes[172].OneofWrappers = []interface{}{}
	file_jungletv_proto_msgTypes[183].OneofWrappers = []interface{}{
		(*UserProfileResponse_YoutubeVideoData)(nil),
		(*UserProfileResponse_SoundcloudTrackData)(nil),
		(*UserProfileResponse_DocumentData)(nil),
	}
	file_jungletv_proto_msgTypes[187].OneofWrappers = []interface{}{
		(*PlayedMedia_YoutubeVideoData)(nil),
		(*PlayedMedia_SoundcloudTrackData)(nil),
		(*PlayedMedia_DocumentData)(nil),
		(*PlayedMedia_ApplicationPageData)(nil),
	}
	file_jungletv_proto_msgTypes[190].OneofWrappers = []interface{}{}
	file_jungletv_proto_msgTypes[198].OneofWrappers = []interface{}{
		(*UnblockUserRequest_BlockId)(nil),
		(*UnblockUserRequest_Address)(nil),
	}
	file_jungletv_proto_msgTypes[208].OneofWrappers = []interface{}{}
	file_jungletv_proto_msgTypes[243].OneofWrappers = []interface{}{
		(*AuthorizeApplicationEvent_Heartbeat)(nil),
		(*AuthorizeApplicationEvent_AuthorizationUrl)(nil),
		(*AuthorizeApplicationEvent_Approved)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_jungletv_proto_rawDesc,
			NumEnums:      14,
			NumMessages:   252,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_jungletv_proto_goTypes,
		DependencyIndexes: file_jungletv_proto_depIdxs,
		EnumInfos:         file_jungletv_proto_enumTypes,
		MessageInfos:      file_jungletv_proto_msgTypes,
	}.Build()
	File_jungletv_proto = out.File
	file_jungletv_proto_rawDesc = nil
	file_jungletv_proto_goTypes = nil
	file_jungletv_proto_depIdxs = nil
}
